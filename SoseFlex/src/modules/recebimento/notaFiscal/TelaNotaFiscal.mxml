<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:notaFiscal="modules.recebimento.notaFiscal.*"
		 xmlns:recebimentoComponente="modules.recebimento.notaFiscal.componentesInformacoesNotaFiscal.*"
		 xmlns:texto="components.textInput.*" xmlns:combos="components.combos.*"  paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10"
		 xmlns:grid="components.grid.*" xmlns:dc="components.grid.filtros.controles.*" xmlns:componentes="components.*" horizontalAlign="center"
		 width="100%" height="100%" initialize="init()" xmlns:flextras="http://www.flextras.com/mxml">
	
	<fx:Declarations>
		<mx:RemoteObject concurrency="single" showBusyCursor="true" id="notaFiscalService" destination="notaFiscalService" endpoint="{resourceManager.getString('ConfigurationResource','amf')}">			
			<mx:method name="listarNotaFiscal"      
					   fault="onListarNotaFiscalFault(event)" 
					   result="onListarNotaFiscalResult(event)"
					   />
			<mx:method name="salvarNotaFiscal"      
					   fault="onSalvarNotaFiscalFault(event)" 
					   result="onSalvarNotaFiscalResult(event)"
					   />
			<mx:method name="buscarPorId2"      
					   fault="onBuscarNotaFiscalFault(event)" 
					   result="onBuscarNotaFiscalResult(event)"
					   />
		</mx:RemoteObject>
		<mx:RemoteObject concurrency="single" showBusyCursor="true" id="itemNotaFiscalService" destination="itemNotaFiscalService" endpoint="{resourceManager.getString('ConfigurationResource','amf')}">			
			<mx:method name="adicionarItemNotaFiscal"      
					   fault="onAdicionarItemNotaFiscalFault(event)" 
					   result="onAdicionarItemNotaFiscalResult(event)"
					   />
			<mx:method name="excluirItemNotaFiscal"      
					   fault="onExcluirItemNotaFiscalFault(event)" 
					   result="onExcluirItemNotaFiscalResult(event)"
					   />
		</mx:RemoteObject>
		<mx:RemoteObject concurrency="single" showBusyCursor="true" id="ordemServicoService" destination="ordemServicoService" endpoint="{resourceManager.getString('ConfigurationResource','amf')}">			
			<mx:method name="excluirPlacaFilha"      
					   fault="onExcluirPlacaFilhaFault(event)" 
					   result="onExcluirPlacaFilhaResult(event)"
					   />
			<mx:method name="verificarGarantia"      
					   fault="onVerificarGarantiaFault(event)" 
					   result="onVerificarGarantiaResult(event)"
					   />
			<mx:method name="testarPublicacao" />
		</mx:RemoteObject>
		<mx:RemoteObject concurrency="single" showBusyCursor="true" id="recebimentoController" destination="recebimentoController" endpoint="{resourceManager.getString('ConfigurationResource','amf')}">			
			<mx:method name="processarNotaFiscal"      
					   fault="onProcessarNotaFiscalFault(event)" 
					   result="onProcessarNotaFiscalResult(event)"
					   />
			<mx:method name="salvarNotaFiscal"      
					   fault="onSalvarNotaFiscalFault(event)" 
					   result="onSalvarNotaFiscalResult(event)"
					   />
		</mx:RemoteObject>
		<mx:RemoteObject concurrency="single" showBusyCursor="true" id="aplicacaoController" destination="aplicacaoController" endpoint="{resourceManager.getString('ConfigurationResource','amf')}">			
			<mx:method name="processarOrdemServico"      
					   fault="onProcessarOrdemServicoFault(event)" 
					   result="onProcessarOrdemServicoResult(event)"
					   />
		</mx:RemoteObject>
		
		<mx:Producer id="produtorRecebimentoService" destination="RecebimentoMessageServicePush" /> 
		
		<mx:Consumer id="consumidorRecebimentoMessageService" destination="RecebimentoMessageServicePush" message="onMsgAreaTecnica(event)" />
		
		<mx:StringValidator id="pfNumOrdemServicoValidator"
							required="true" 
							source="{pfNumOrdemServico}" 
							property="text"
							triggerEvent = "{FocusEvent.FOCUS_OUT}"
							requiredFieldError="Campo obrigatório"
							/>
		
		<mx:StringValidator id="pfNumSerieValidator"
							required="true" 
							source="{pfNumSerie}" 
							property="text"
							triggerEvent = "{FocusEvent.FOCUS_OUT}"
							requiredFieldError="Campo obrigatório"
							/>
		
		<mx:StringValidator id="nOrdemServicoValidator"
							required="true" 
							source="{nOrdemServico}" 
							property="text"
							/>
		
		<mx:StringValidator id="nSerieValidator"
							required="true" 
							source="{nSerie}" 
							property="text"
							/>
		
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import components.PopupModalController;
			import components.events.UserRegisterNumberModalEvent;
			import components.messages.MensagemEvent;
			import components.messages.MessageType;
			
			import entities.GlobalMessage;
			import entities.administrativo.Unidade;
			import entities.administrativo.Usuario;
			import entities.administrativo.parceiros.Pessoa;
			import entities.recebimento.ItemNotaFiscal;
			import entities.recebimento.NotaFiscal;
			import entities.recebimento.OrdemServico;
			
			import modules.recebimento.eventos.ConfirmarInformacoesModalEvent;
			import modules.recebimento.eventos.NotaFiscalEvent;
			import modules.recebimento.eventos.VerificarGarantiaModalEvent;
			import modules.view.Login;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.events.ListEvent;
			import mx.managers.CursorManager;
			import mx.messaging.events.MessageEvent;
			import mx.messaging.messages.AsyncMessage;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			import mx.validators.Validator;
			
			import utils.MensagensAplicacao;
			import utils.Publicador;
			import utils.ScreenUtils;
			import utils.TipoNotaFiscal;
			
			[Bindable]
			public var listaPlacaFilha:ArrayCollection;
			
			[Bindable]
			public var _placaFilha:OrdemServico;
			
			[Bindable]
			public var _unidadePlacaFilha:Unidade;
			
			[Bindable]
			public var _ordemServico:OrdemServico;
			
			[Bindable]
			public var _notasFiscais:ArrayCollection;
			
			[Bindable]
			public var _ordemServicoPendentes:ArrayCollection;
			
			[Bindable]
			public var _ordemServicoProcessadas:ArrayCollection;
			
			[Bindable]
			public var _notaFiscal:NotaFiscal;
			
			[Bindable]
			public var _item:ItemNotaFiscal;
			
			private var _indexEdicaoPlacaFilha:int = -1;
			
			[Bindable]
			private var indexOrdemServico:int = -1;
			
			[Bindable]
			private var validatorArr:Array;
			
			[Bindable]
			private var totalOs:Number=0;
			
			private var sortItemNF:Sort;
			
			public function init():void
			{
				consumidorRecebimentoMessageService.subscribe();
				notaFiscalService.listarNotaFiscal();
				this.addEventListener(NotaFiscalEvent.EDITAR_NOTA_FISCAL,onEditar);
				this.addEventListener(NotaFiscalEvent.EXCLUIR_NOTA_FISCAL,onExcluir);
				sortItemNF = new Sort();
				sortItemNF.fields=[new SortField("id",false,false,true)];
			}
						
			private function sortLista(lista:ArrayCollection):void
			{
				lista.sort = sortItemNF;
				lista.refresh();
			}
			
			private function onMsgAreaTecnica(event:MessageEvent):void{ 
				var globalMessage:GlobalMessage = event.message.body as GlobalMessage;	
				
				if (globalMessage.mensagem=="TESTE"){
					dispatchEvent(new MensagemEvent("PUBLISH FROM SERVER OK", MessageType.INFO, 5000));
				}
			} 
			
			private function onEditar(event:NotaFiscalEvent):void
			{
				var notaFiscal:NotaFiscal = event.notaFiscal;
				buscarNotaFiscal(notaFiscal.id);
			}
			
			private function buscarNotaFiscal(id:Number):void
			{
				notaFiscalService.buscarPorId2(id);
			}
			
			private function onBuscarNotaFiscalResult(event:ResultEvent = null):void
			{
				this.currentState = "edicaoInfoNota";
				
				_notaFiscal = event.result as NotaFiscal;
				_item = new ItemNotaFiscal();
				_placaFilha = new OrdemServico();
				valorNotaFiscal.setValor(0);
				txtValorTotal.setValor(0);
				txtValorUnitario.setValor(0);
				_ordemServicoProcessadas = new ArrayCollection();
				_ordemServicoPendentes = new ArrayCollection();
				
				cbCliente.limpar();
				cbUnidadeServilogi.limpar();
				cbUnidadeLpu.limpar();
				cbUnidadeLpu.enabled = false;
				
				_notaFiscal.itensDaNotaFiscal = ordenarListaItemNotaFiscal(_notaFiscal.itensDaNotaFiscal);
				_notaFiscal.ordensServico = ordenarListaOrdemServico(_notaFiscal.ordensServico);
				setNotaFiscal(_notaFiscal);
				if(_notaFiscal.ordensServico != null && _notaFiscal.ordensServico.length != 0){
					listagemOsProcessadas.currentState = "listagem";
				}
				
				controlarEnableBotao();
			}
			
			private function onBuscarNotaFiscalFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[onBuscarNotaFiscalFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
			}
			
			private function getNotaFiscal():NotaFiscal
			{
				_notaFiscal.valorNotaFiscal = valorNotaFiscal.getValor();
				_notaFiscal.observacao = txtNfObservacao.inputText;
				_notaFiscal.numero = numeroNotaFiscal.inputText;
				_notaFiscal.caseAvaya = txtCaseAvaya.inputText;
				_notaFiscal.clienteAvaya = txtClienteAvaya.inputText
				_notaFiscal.dataNotaFiscal = dataNotaFiscal.inputDate;
				_notaFiscal.dataChegada = dataEntradaNotaFiscal.inputDate;
				return _notaFiscal;
			}
			
			private function setNotaFiscal(value:NotaFiscal):void
			{
				_notaFiscal = value;
				_notaFiscal.itensDaNotaFiscal = ordenarListaItemNotaFiscal(_notaFiscal.itensDaNotaFiscal);

				valorNotaFiscal.setValor(_notaFiscal.valorNotaFiscal);
				if(_notaFiscal.cliente){
					cbCliente.clienteSelecionado = _notaFiscal.cliente; 
					habilitaCampos();
				}
				
				
				if(_notaFiscal.ordensServico != null && _notaFiscal.ordensServico.length != 0){
					
					cbFiltrosItensNF.dataProvider = _notaFiscal.itensDaNotaFiscal;
					
					_ordemServicoPendentes = new ArrayCollection();
					for each(var o:OrdemServico in _notaFiscal.ordensServico)
					{
						if(o.statusString == null || o.statusString == "Não processada" || o.statusString == "Salva e nao processada"){
							_ordemServicoPendentes.addItem(o);
						}
					}
					indexOrdemServico = 0;
					if(_ordemServicoPendentes != null && _ordemServicoPendentes.length != 0){
						_ordemServicoPendentes.sort = new Sort();
						_ordemServicoPendentes.sort.fields =[new SortField("ordenarPorItemNotaFiscal",true,false,true)];
						_ordemServicoPendentes.refresh();
						_ordemServico = _ordemServicoPendentes.getItemAt(indexOrdemServico) as OrdemServico;
					}else{
						indexOrdemServico = -1;
					}
					
					_ordemServicoProcessadas = new ArrayCollection();
					for each(var o1:OrdemServico in _notaFiscal.ordensServico)
					{
						if(o1.statusString != "Não processada" && o1.statusString != "Salva e nao processada"){
							_ordemServicoProcessadas.addItem(o1);
						}
					}
					
					totalOs = 0;
					for each(var inf:ItemNotaFiscal in _notaFiscal.itensDaNotaFiscal)
					{
						totalOs = totalOs + inf.quantidade;
					}
					
					listagemOsProcessadas.listaOrdemServico = _ordemServicoProcessadas;
					listagemOsProcessadas._notaFiscal = _notaFiscal;
				}
			}
			
			private function onExcluir(event:NotaFiscalEvent):void
			{
				_notaFiscal = event.notaFiscal;
				//				pessoaService.excluirPessoa(event.pessoa);
			}
			
			public function initTxtQuantidade():void
			{
				txtQuantidade.input.addEventListener(FocusEvent.FOCUS_OUT,calculaVlTotal);
			}
			
			public function initTxtValorUnitario():void
			{
				txtValorUnitario.input.addEventListener(FocusEvent.FOCUS_OUT,calculaVlTotal);
			}
			
			
			private function clickAba(event:Event):void
			{
				if(tn.selectedIndex == 0){
					this.currentState = "edicaoInfoNota";
					if(_notaFiscal != null && (_notaFiscal.statusString == 'Nova' || _notaFiscal.statusString == '') ){
						btGerar.enabled == true;
					}else{
						btGerar.enabled == false;
					}
				}else if(tn.selectedIndex == 1){
					this.currentState = "edicaoOSPendente";
					nOrdemServico.setFocus();
					btProcessar.enabled = false;
				}else if(tn.selectedIndex == 2){
					this.currentState = "edicaoOSProcessada";
				}
			}
			
			
			private function novo(event:MouseEvent = null):void
			{
				
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					_notaFiscal = new NotaFiscal();
					_item = new ItemNotaFiscal();
					_placaFilha = new OrdemServico();
					_ordemServicoProcessadas = new ArrayCollection();
					_ordemServicoPendentes = new ArrayCollection();
					this.currentState = "edicaoInfoNota";
					valorNotaFiscal.setValor(0);
					txtValorTotal.setValor(0);
					txtValorUnitario.setValor(0);
					tn.selectedIndex = 0;
					boxInfoNF.enabled = false;
					cbFiltrosItensNF.dataProvider = new ArrayCollection();
					cbCliente.limpar();
					cbUnidadeServilogi.limpar();
					cbUnidadeLpu.limpar();
					cbUnidadeLpu.enabled = false;
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(onNovoAutenticar);
				}
			}
			
			private function teste(event:MouseEvent = null):void
			{
				ordemServicoService.testarPublicacao();
			}
			
			public function onNovoAutenticar(event:UserRegisterNumberModalEvent=null):void{
				novo();
			}
			
			private function voltar(event:MouseEvent = null):void
			{
				tn.selectedIndex = 0;
				listagemOsProcessadas.listaOrdemServico = new ArrayCollection();
				listagemOsProcessadas._notaFiscal = null;
				this.currentState = "listagem";
				_notaFiscal = null;
				_ordemServicoPendentes = new ArrayCollection();
				_ordemServicoProcessadas = new ArrayCollection();
			}
			
			
			
			private function validateForm():Boolean {	
				validatorArr = new Array();
				validatorArr.push(numeroNotaFiscal.stringValidator);
				validatorArr.push(cbCliente.comboBox.comboValidator);
				//validatorArr.push(cbTipoNotaFiscal.comboBox.comboValidator);
				validatorArr.push(dataNotaFiscal.stringValidator);
				validatorArr.push(dataEntradaNotaFiscal.stringValidator);
				if(_notaFiscal.tipo == 3){
					validatorArr.push(txtCaseAvaya.stringValidator);
					validatorArr.push(txtClienteAvaya.stringValidator);
				}
				var validatorErrorArray:Array = Validator.validateAll(validatorArr);;
				var isValidForm:Boolean = validatorErrorArray.length == 0;
				
				if(!isValidForm){
					dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','ERRO_VALIDACAO'), MessageType.WARNING, 5000));
					return isValidForm;
				}
				
				if(isValidForm && !(_notaFiscal.itensDaNotaFiscal.length > 0)){
					isValidForm = false;
					dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','PROCESSAR_NOTA_FISCAL_NAO_HA_ITENS'), MessageType.WARNING, 5000));
					return isValidForm;
				}
				
				if(dataEntradaNotaFiscal.inputDate.getTime() > parentApplication.dataAtual.getTime()){
					isValidForm = false;
					dispatchEvent(new MensagemEvent("A data de chegada não pode ser maior que a data atual", MessageType.WARNING, 5000));
					return isValidForm;
				}
				
				if(dataNotaFiscal.inputDate.getTime() > parentApplication.dataAtual.getTime()){
					isValidForm = false;
					dispatchEvent(new MensagemEvent("A data da nota fiscal não pode ser maior que a data atual", MessageType.WARNING, 5000));
					return isValidForm;
				}
				
				var totalItens:Number = 0;
				for each (var item:ItemNotaFiscal in _notaFiscal.itensDaNotaFiscal){
					totalItens = totalItens + (item.valorUnitario * item.quantidade)
				}
				if(totalItens.toFixed(4) != valorNotaFiscal.getValor().toFixed(4)){
					isValidForm = false;
					dispatchEvent(new MensagemEvent("O valor total da nota fiscal: "+valorNotaFiscal.getValor() + " não confere com o valor total dos itens da nota: " + totalItens, MessageType.WARNING, 5000));
					return isValidForm;
				}
				return isValidForm;
			}
			
			private function validateFormItemNF():Boolean {	
				validatorArr = new Array();
				validatorArr.push(cbCliente.comboBox.comboValidator);
				validatorArr.push(txtDescricao.stringValidator);
				validatorArr.push(txtQuantidade.stringValidator);
				validatorArr.push(txtCst.stringValidator);
				validatorArr.push(txtNcm.stringValidator);
				validatorArr.push(txtCfop.stringValidator);
				validatorArr.push(txtUnidadeMedida.stringValidator);
				validatorArr.push(cbUnidadeServilogi.comboBox.comboValidator);
				
				if(_notaFiscal.cliente != null && _notaFiscal.cliente.possuiContrato){
					validatorArr.push(cbUnidadeLpu.comboBox.comboValidator);			
				}
				
				
				var validatorErrorArray:Array = Validator.validateAll(validatorArr);;
				var isValidForm:Boolean = validatorErrorArray.length == 0;
				
				return isValidForm;
			}
			
			private function validateOrdemServico():Boolean {	
				validatorArr = new Array();
				validatorArr.push(nOrdemServicoValidator);
				validatorArr.push(nSerieValidator);
				
				var validatorErrorArray:Array = Validator.validateAll(validatorArr);;
				var isValidForm:Boolean = validatorErrorArray.length == 0;
				return isValidForm;
			}
			
			private function validatePlacaFilha():Boolean {	
				validatorArr = new Array();
				validatorArr.push(pfNumOrdemServicoValidator);
				validatorArr.push(pfNumSerieValidator);
				validatorArr.push(pfUnidadeServilogi.comboBox.comboValidator);
				
				if(_ordemServico.cliente != null && _ordemServico.cliente.possuiContrato){
					validatorArr.push(pfUnidadeLpu.comboBox.comboValidator);			
				}
				var validatorErrorArray:Array = Validator.validateAll(validatorArr);;
				var isValidForm:Boolean = validatorErrorArray.length == 0;
				return isValidForm;
			}
			
			private function salvar(event:MouseEvent = null):void
			{
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					_notaFiscal = getNotaFiscal();
					
					recebimentoController.salvarNotaFiscal(_notaFiscal,usr);
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(onSalvarAutenticar);
				}
			}
			
			public function onSalvarAutenticar(event:UserRegisterNumberModalEvent=null):void{
				salvar();
			}
			
			public function onSalvarNotaFiscalResult(event:ResultEvent):void			
			{
				var nf:NotaFiscal = event.result as NotaFiscal;
				setNotaFiscal(nf);
				listagemNF.adicionarNotaFiscal(nf);
				dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','SALVAR_NOTA_FISCAL_SUCESSO'), MessageType.SUCCESS, 10000));
			}
			
			public function onSalvarNotaFiscalFault(event:FaultEvent):void
			{
				CursorManager.removeAllCursors();
				trace("[ProcessarOrdemServicoFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','SALVAR_NOTA_FISCAL_ERRO'), MessageType.ERROR, 10000));
			}
			
			private function processar(event:MouseEvent = null):void
			{
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					if(validateOrdemServico()){
						_ordemServico.usuario = usr;
						aplicacaoController.processarOrdemServico(_ordemServico,usr);
						btProcessar.enabled = false;
					}else{
						dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','ERRO_VALIDACAO'), MessageType.WARNING, 10000));
					}
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(processarAutenticar);
				}
			}
			
			public function processarAutenticar(event:UserRegisterNumberModalEvent=null):void{
				processar();
			}
			
			private function verificarGarantia(event:MouseEvent = null):void
			{
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					if(validateOrdemServico()){
						_ordemServico.numeroOrdemServico = nOrdemServico.text;
						_ordemServico.serieFabricante = nSerie.text;
						_ordemServico.serieCliente = nCliente.text;
						_ordemServico.ordemServicoCliente = nOSCliente.text;
						//logger.info("Depois##INFORMAÇÕES OS: Nº OS: " + ordemServicoRetorno.getNumeroOrdemServico() + " - S/N Fabricante: " + ordemServicoRetorno.getSerieFabricante() + " - S/N Cliente: " + ordemServicoRetorno.getSerieCliente() + " - OS Cliente: " + ordemServicoRetorno.getOrdemServicoCliente());
						SoseFlex.LOG.info("Tela##INFORMAÇÕES OS: Nº OS: " + _ordemServico.numeroOrdemServico + " - S/N Fabricante: " + _ordemServico.serieFabricante + " - S/N Cliente: " + _ordemServico.serieCliente + " - OS Cliente: " + _ordemServico.ordemServicoCliente);
						PopupModalController.getInstance().showModalConfirmarInformacoes(atualizarConfirmacaoInformacao,_ordemServico);

					}else{
						dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','ERRO_VALIDACAO'), MessageType.WARNING, 10000));
					}
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(verificarGarantiaAutenticar);
				}
			}
			
			public function verificarGarantiaAutenticar(event:UserRegisterNumberModalEvent=null):void{
				verificarGarantia();
			}
			
			public function onVerificarGarantiaFault(event:FaultEvent):void
			{
				CursorManager.removeAllCursors();
				trace("[VerificarGarantiaFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				
				var str:String = event.fault.faultString;
				var i:Number;
				if(str.search("br.com.sose.exceptions") != -1){
					i = event.fault.faultString.indexOf(":");
					i++;
					dispatchEvent(new MensagemEvent(event.fault.faultString.substring(i), MessageType.ERROR, 10000));
				}else{
					dispatchEvent(new MensagemEvent("Erro ao verificar garantia", MessageType.ERROR, 10000));
				}	
				nOrdemServico.setFocus();
			}
			
			public function onVerificarGarantiaResult(event:ResultEvent):void
			{
				var osGarantia:OrdemServico = event.result as OrdemServico;
				if(osGarantia == null){
					processar();
				}else{
					dispatchEvent(new MensagemEvent("O sistema verificou uma possível garantia", MessageType.WARNING, 5000));
					PopupModalController.getInstance().showModalVerificarGarantia(atualizarGarantia,osGarantia,_ordemServico);
					btProcessar.enabled = true;
				}
			}
			
			public function atualizarGarantia(event:VerificarGarantiaModalEvent=null):void
			{
				var osRetorno:OrdemServico = event.ordemServico;
				_ordemServico = osRetorno;
			}
			
			public function atualizarConfirmacaoInformacao(event:ConfirmarInformacoesModalEvent=null):void
			{
				var osRetorno:OrdemServico = event.ordemServico;
				ordemServicoService.verificarGarantia(osRetorno);
			}
			
			private function limparCamposOs():void
			{
				nOrdemServico.text = "";
				nSerie.text = "";
				nCliente.text = "";
				nOSCliente.text = "";
			}
			
			private function publicarRecebimento(os:OrdemServico):void   { 				
				if(os.reparo){
					Publicador.enviarMensagemRecebimento(MensagensAplicacao.RECEBIMENTO_OS_PROCESSADA,os.reparo);			
				}else if(os.orcamento){
					Publicador.enviarMensagemRecebimento(MensagensAplicacao.RECEBIMENTO_OS_PROCESSADA,os.orcamento);
				}				
			}
			
			public function onProcessarOrdemServicoResult(event:ResultEvent):void			
			{
				var ordemServico:OrdemServico = event.result as OrdemServico;
				btGerar.enabled = true;
				
				//Atualiza a lista de nota fiscal
				listagemNF.adicionarNotaFiscal(ordemServico.notaFiscal);
				publicarRecebimento(ordemServico);
				
				//caso seja a primeira os e a lista de os's processadas esteja vazia
				if(_ordemServicoProcessadas == null){
					_ordemServicoProcessadas = new ArrayCollection();
				}
				_ordemServicoProcessadas.addItem(ordemServico);
				
				if(ordemServico.placasFilhas != null && ordemServico.placasFilhas.length > 0){
					_ordemServicoProcessadas.addAll(ordemServico.placasFilhas);
					for each(var osFilha:OrdemServico in ordemServico.placasFilhas){
						publicarRecebimento(osFilha);		
					}
				}
				listagemOsProcessadas.listaOrdemServico = _ordemServicoProcessadas;
				
				//resolver os's pendentes
				_ordemServicoPendentes.removeItemAt(indexOrdemServico);
				if(_ordemServicoPendentes.length == indexOrdemServico){
					indexOrdemServico--;
				}
				if(_ordemServicoPendentes.length != 0){
					_ordemServico = _ordemServicoPendentes.getItemAt(indexOrdemServico) as OrdemServico;
				}else{
					_ordemServico = null
				}
				controlarEnableBotao();
				limparCamposOs();
				limparPlacaFilha();
				nOrdemServico.setFocus();
				dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','PROCESSAR_ORDEM_SERVICO_SUCESSO'), MessageType.SUCCESS, 10000));
			}
			
			public function onProcessarOrdemServicoFault(event:FaultEvent):void
			{
				CursorManager.removeAllCursors();
				btGerar.enabled = true;
				trace("[ProcessarOrdemServicoFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				var str:String = event.fault.faultString;
				var i:Number;
				if(str.search("br.com.sose.exceptions") != -1){
					i = event.fault.faultString.indexOf(":");
					i++;
					dispatchEvent(new MensagemEvent(event.fault.faultString.substring(i), MessageType.ERROR, 10000));
				}else{
					dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','PROCESSAR_ORDEM_SERVICO_ERRO'), MessageType.ERROR, 10000));	
				}	
				nOrdemServico.setFocus();
			}
			
			private function processarNotaFiscal(event:MouseEvent = null):void
			{
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					if(validateForm()){
						_notaFiscal = getNotaFiscal();
						//						if(_notaFiscal.itensDaNotaFiscal != null && _notaFiscal.itensDaNotaFiscal.length > 0){
						//							for each(var inf:ItemNotaFiscal in _notaFiscal.itensDaNotaFiscal){
						//								inf.ordemNaLista = _notaFiscal.itensDaNotaFiscal.getItemIndex(inf);
						//							}
						//						}
						recebimentoController.processarNotaFiscal(_notaFiscal,usr);
						btGerar.enabled = false;
					}
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(processarNotaFiscalAutenticar);
				}
			}
			
			public function processarNotaFiscalAutenticar(event:UserRegisterNumberModalEvent=null):void{
				processarNotaFiscal();
			}
			
			private function ordenarListaItemNotaFiscal(value:ArrayCollection):ArrayCollection
			{
				var sortA:Sort = new Sort();
				sortA.fields=[new SortField("id",false,false,true)];
				value.sort=sortA;
				value.refresh();
				return value;
			}
			
			private function ordenarListaOrdemServico(value:ArrayCollection):ArrayCollection
			{
				var sortA:Sort = new Sort();
				//sortA.fields=[new SortField("idItemNotaFiscal",false,false,true),new SortField("id",false,false,true)];
				sortA.fields=[new SortField("id",false,false,true)];
				value.sort=sortA;
				value.refresh();
				return value;
			}
			
			public function onProcessarNotaFiscalResult(event:ResultEvent):void
			{
				_notaFiscal = event.result as NotaFiscal;
				_notaFiscal.itensDaNotaFiscal = ordenarListaItemNotaFiscal(_notaFiscal.itensDaNotaFiscal);
				_notaFiscal.ordensServico = ordenarListaOrdemServico(_notaFiscal.ordensServico);
				listagemNF.adicionarNotaFiscal(_notaFiscal);
				cbFiltrosItensNF.dataProvider = _notaFiscal.itensDaNotaFiscal;
				pfUnidadeLpu.cliente = _notaFiscal.cliente;
				_ordemServicoPendentes = _notaFiscal.ordensServico;
				if(_ordemServicoPendentes != null || _ordemServicoPendentes.length != 0){
					_ordemServicoPendentes.sort = new Sort();
					_ordemServicoPendentes.sort.fields =[new SortField("ordenarPorItemNotaFiscal",true,false,true)];
					_ordemServicoPendentes.refresh();
					indexOrdemServico = 0;
					_ordemServico = _ordemServicoPendentes.getItemAt(indexOrdemServico) as OrdemServico;
				}
				totalOs = 0;
				for each(var inf:ItemNotaFiscal in _notaFiscal.itensDaNotaFiscal)
				{
					totalOs = totalOs + inf.quantidade;
				}
				controlarEnableBotao();
				dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','PROCESSAR_NOTA_FISCAL_SUCESSO'), MessageType.SUCCESS, 10000));
			}
			
			public function onProcessarNotaFiscalFault(event:FaultEvent):void
			{
				CursorManager.removeAllCursors();
				trace("[ProcessarNotaFiscalFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				var i:Number;
				if(event.fault.faultString.search("br.com.sose.exceptions") != -1){
					i = event.fault.faultString.indexOf(":");
					dispatchEvent(new MensagemEvent(event.fault.faultString.substring(i+1), MessageType.ERROR, 10000));
				}else{
					dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','PROCESSAR_NOTA_FISCAL_ERRO'), MessageType.ERROR, 10000));
				}
				btGerar.enabled = true;
			}
			
			public function onListarNotaFiscalResult(event:ResultEvent):void
			{
				_notasFiscais = event.result as ArrayCollection;
				listagemNF.setListaNotaFiscal(_notasFiscais);
			}
			
			public function onListarNotaFiscalFault(event:FaultEvent):void
			{
				CursorManager.removeAllCursors();
				trace("[ListarNotaFiscalFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");	
			}
			
			public function onExcluirItemNotaFiscalResult(event:ResultEvent):void
			{
				var itemRemovido:ItemNotaFiscal = event.result as ItemNotaFiscal;
				var i:int = 0;
				var aux:ItemNotaFiscal = null;
				for(i=0;i<_notaFiscal.itensDaNotaFiscal.length;i++){
					aux = _notaFiscal.itensDaNotaFiscal.getItemAt(i) as ItemNotaFiscal;
					if(itemRemovido.id == aux.id){
						_notaFiscal.itensDaNotaFiscal.removeItemAt(i);
						break;
					}
				}
				dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','EXCLUIR_ITEM_NOTA_FISCAL_SUCESSO'), MessageType.SUCCESS, 10000));
				limpar();
			}
			
			public function onExcluirItemNotaFiscalFault(event:FaultEvent):void
			{
				CursorManager.removeAllCursors();
				trace("[ExcluirItemNotaFiscalFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','EXCLUIR_ITEM_NOTA_FISCAL_ERRO'), MessageType.ERROR, 10000));
			}
			
			public function onExcluirPlacaFilhaResult(event:ResultEvent):void
			{
				var index:int = _ordemServico.placasFilhas.getItemIndex(_placaFilha);
				_ordemServico.placasFilhas.removeItemAt(index);
				limparPlacaFilha();
				dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','EXCLUIR_PLACA_FILHA_SUCESSO'), MessageType.SUCCESS, 10000));
			}
			
			public function onExcluirPlacaFilhaFault(event:FaultEvent):void
			{
				CursorManager.removeAllCursors();
				trace("[ExcluirItemNotaFiscalFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','EXCLUIR_PLACA_FILHA_ERRO'), MessageType.ERROR, 10000));
			}
			
			public function editItem(data:Object=null, event:Event=null):void
			{					
				//for double click
				if(data==null && event is ListEvent){
					var event2:ListEvent = event as ListEvent						
					data = _notaFiscal.itensDaNotaFiscal.getItemAt(event2.rowIndex);				
				}
				
				if(data)
					_item = data as ItemNotaFiscal;
				
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					txtQuantidade.inputText = _item.quantidade.toString();
					txtValorUnitario.setValor(_item.valorUnitario);
					txtValorTotal.setValor(_item.quantidade * _item.valorUnitario);
					cbUnidadeServilogi.unidadeSelecionado = _item.unidade;
					cbUnidadeLpu.lpuSelecionada = _item.lpu;
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(editItemAutenticar);
				}
			}
			
			public function editItemAutenticar(event:UserRegisterNumberModalEvent=null):void{
				editItem();
			}
			
			public function excluirItem(data:Object=null, event:Event=null):void
			{		
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					_item = data as ItemNotaFiscal;
					itemNotaFiscalService.excluirItemNotaFiscal(_item);
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(excluirItemAutenticar);
				}
			}
			
			public function excluirItemAutenticar(event:UserRegisterNumberModalEvent=null):void{
				excluirItem();
			}
			
			private function adicionar(event:MouseEvent = null):void
			{
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					if(validateFormItemNF()){
						_item.valorUnitario = txtValorUnitario.getValor();
						_item.quantidade = parseFloat(txtQuantidade.inputText);
						_item.unidade = cbUnidadeServilogi.unidadeSelecionado;
						if(cbUnidadeLpu.lpuSelecionada == null || (cbUnidadeLpu.lpuSelecionada != null && (cbUnidadeLpu.lpuSelecionada.id == 0 || isNaN(cbUnidadeLpu.lpuSelecionada.id)))){
							_item.lpu = null;
						}else{
							_item.lpu = cbUnidadeLpu.lpuSelecionada;
						}
						
						_notaFiscal = getNotaFiscal();
						itemNotaFiscalService.adicionarItemNotaFiscal(_item,_notaFiscal);
						//addItemNotaFiscal(_item);
						
					}else{
						dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','ERRO_VALIDACAO'), MessageType.WARNING, 10000));
					}
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(adicionarAutenticar);
				}
			}
			
			public function adicionarAutenticar(event:UserRegisterNumberModalEvent=null):void{
				adicionar();
			}
			
			public function onAdicionarItemNotaFiscalResult(event:ResultEvent):void
			{
				if(_item.id == 0){
					_item = event.result as ItemNotaFiscal;
					if(isNaN(_notaFiscal.id)){
						_notaFiscal = _item.notaFiscal; 
					}
					_notaFiscal.itensDaNotaFiscal.addItem(_item);
				}else{
					_item = event.result as ItemNotaFiscal;
					if(isNaN(_notaFiscal.id)){
						_notaFiscal = _item.notaFiscal; 
					}
					var i:int = 0;
					var aux:ItemNotaFiscal = null;
					for(i=0;i<_notaFiscal.itensDaNotaFiscal.length;i++){
						aux = _notaFiscal.itensDaNotaFiscal.getItemAt(i) as ItemNotaFiscal;
						if(_item.id == aux.id){
							_notaFiscal.itensDaNotaFiscal.setItemAt(_item, i);
							break;
						}
					}
				}
				
				
				dispatchEvent(new MensagemEvent('Item adicionado com sucesso', MessageType.SUCCESS, 10000));
				limpar();
			}
			
			public function onAdicionarItemNotaFiscalFault(event:FaultEvent):void
			{
				CursorManager.removeAllCursors();
				trace("[ExcluirItemNotaFiscalFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				dispatchEvent(new MensagemEvent('Erro ao adicionar item', MessageType.ERROR, 10000));
				limpar();
			}
			
			public function addItemNotaFiscal(infAux:ItemNotaFiscal=null):void
			{
				if(infAux)
					var inf:ItemNotaFiscal = infAux;
				
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					var itemNotaFiscalAux:ItemNotaFiscal = null;
					var encontrou:Boolean = false;
					for(var i:int=0; i<_notaFiscal.itensDaNotaFiscal.length; i++){
						itemNotaFiscalAux = _notaFiscal.itensDaNotaFiscal.getItemAt(i) as ItemNotaFiscal; 
						if(itemNotaFiscalAux.id != 0){					
							if(itemNotaFiscalAux.id == inf.id){
								_notaFiscal.itensDaNotaFiscal.removeItemAt(i);
								_notaFiscal.itensDaNotaFiscal.addItemAt(inf,i);
								encontrou = true;
								dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','EDITAR_ITEM_NOTA_FISCAL_SUCESSO'), MessageType.SUCCESS, 10000));
								break;
							}	
						}else{
							if(itemNotaFiscalAux.idTemp == inf.idTemp){
								_notaFiscal.itensDaNotaFiscal.removeItemAt(i);
								_notaFiscal.itensDaNotaFiscal.addItemAt(inf,i);
								encontrou = true;
								dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','EDITAR_ITEM_NOTA_FISCAL_SUCESSO'), MessageType.SUCCESS, 10000));
								break;
							}	
						}
					}
					if(!encontrou){
						_notaFiscal.itensDaNotaFiscal.addItem(inf);
						dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','ADICIONAR_ITEM_NOTA_FISCAL_SUCESSO'), MessageType.SUCCESS, 10000));
					}
					
					_notaFiscal.itensDaNotaFiscal.sort = new Sort();
					_notaFiscal.itensDaNotaFiscal.sort.fields =[new SortField("idTemp",true,false,true)];
					_notaFiscal.itensDaNotaFiscal.refresh();
					
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(addItemNotaFiscalAutenticar);
				}				
			}
			
			public function addItemNotaFiscalAutenticar(event:UserRegisterNumberModalEvent=null):void{
				addItemNotaFiscal();
			}
			
			public function removeItemNotaFiscal(infAux:ItemNotaFiscal=null):void
			{
				if(infAux)
					var inf:ItemNotaFiscal = infAux;
				
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					var itemNotaFiscalAux:ItemNotaFiscal = null;
					var encontrou:Boolean = false;
					for(var i:int=0; i<_notaFiscal.itensDaNotaFiscal.length; i++){
						itemNotaFiscalAux = _notaFiscal.itensDaNotaFiscal.getItemAt(i) as ItemNotaFiscal; 
						if(itemNotaFiscalAux.id != 0){					
							if(itemNotaFiscalAux.id == inf.id){
								_notaFiscal.itensDaNotaFiscal.removeItemAt(i);
								break;
							}	
						}else{
							if(itemNotaFiscalAux.idTemp == inf.idTemp){
								_notaFiscal.itensDaNotaFiscal.removeItemAt(i);
								break;
							}	
						}
					}
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(removeItemNotaFiscalAutenticar);
				}
			}
			
			public function removeItemNotaFiscalAutenticar(event:UserRegisterNumberModalEvent=null):void{
				removeItemNotaFiscal();
			}
			
			public function limpar():void
			{
				txtValorTotal.setValor(0);
				txtValorUnitario.setValor(0);
				_item = new ItemNotaFiscal();
				//				txtValorUnitario.inputText = "R$0,00";
				txtQuantidade.inputText = "";
				//				txtValorTotal.inputText = "R$0,00";
				cbUnidadeServilogi.limpar();
				cbUnidadeLpu.limpar();
				if(_notaFiscal.cliente.possuiContrato){
					cbUnidadeLpu.enabled = true;
				}else{
					cbUnidadeLpu.enabled = false;
				}		
				
			}
			
			public function limparPlacaFilha():void
			{
				_placaFilha = new OrdemServico();
				_indexEdicaoPlacaFilha = -1;
				pfUnidadeServilogi.limpar();
				pfUnidadeLpu.limpar();	
			}
			
			public function habilitaCampos():void
			{
				if(cbCliente.clienteSelecionado != null){
					_notaFiscal.cliente = cbCliente.clienteSelecionado;
					boxInfoNF.enabled = true;
					if(_notaFiscal.cliente.tipoPessoa == 1){
						txtNome.labelText = resourceManager.getString('ApplicationResource','NOME');
						txtRgIe.labelText = resourceManager.getString('ApplicationResource','RG');
						txtCpfCnpj.labelText = resourceManager.getString('ApplicationResource','CPF');
					}else{
						txtNome.labelText = resourceManager.getString('ApplicationResource','RAZAO_SOCIAL');
						txtRgIe.labelText = resourceManager.getString('ApplicationResource','IE');
						txtCpfCnpj.labelText = resourceManager.getString('ApplicationResource','CNPJ');
					}
					if(_notaFiscal.cliente.possuiContrato){
						cbUnidadeLpu.cliente = _notaFiscal.cliente;
						pfUnidadeLpu.cliente = _notaFiscal.cliente;
						
						if(_notaFiscal.statusString == '' ||_notaFiscal.statusString == 'Nova'){
							cbUnidadeLpu.enabled = true;
						}else{
							cbUnidadeLpu.enabled = false;
						}
					}else{
						cbUnidadeLpu.enabled = false;
					}
				}else{
					_notaFiscal.cliente = new Pessoa();
					txtNome.labelText = resourceManager.getString('ApplicationResource','NOME');
					txtRgIe.labelText = resourceManager.getString('ApplicationResource','RG');
					txtCpfCnpj.labelText = resourceManager.getString('ApplicationResource','CPF');
				}
			}
			
			public function atualiza(event:Event):void{
				habilitaCampos();
				
			}
			
			public function atualizaInfoPlacaFilha(event:Event):void{
				_placaFilha.unidade = pfUnidadeServilogi.unidadeSelecionado;
				
			}
			
			public function calculaVlTotal(event:Event):void{
				var vlUnit: Number = txtValorUnitario.getValor();
				var qtd: Number = parseFloat(txtQuantidade.inputText);
				if(isNaN(qtd)) qtd = 0;
				txtValorTotal.setValor(vlUnit * qtd);
			}
			
			public function formatarColunaValorUnitario(item:Object, column:DataGridColumn):String
			{
				var itemNf:ItemNotaFiscal = item as ItemNotaFiscal;
				if(itemNf.valorUnitario != 0){
					return ScreenUtils.formatarMoeda4(itemNf.valorUnitario);
				}else{
					return "R$0,0000"
				}
			}
			
			public function editPlacaFilha(data:Object=null, event:Event=null):void
			{					
				//for double click
				if(data==null && event is ListEvent){
					var event2:ListEvent = event as ListEvent						
					data = _ordemServico.placasFilhas.getItemAt(event2.rowIndex);				
				}
				
				if(data)
					_placaFilha = data as OrdemServico;
				
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					pfUnidadeServilogi.unidadeSelecionado = _placaFilha.unidade;
					if(_placaFilha.cliente.possuiContrato){
						pfUnidadeLpu.lpuSelecionada = _placaFilha.lpu;
					}
					_indexEdicaoPlacaFilha = _ordemServico.placasFilhas.getItemIndex(_placaFilha);
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(editPlacaFilhaAutenticar);
				}
			}
			
			public function editPlacaFilhaAutenticar(event:UserRegisterNumberModalEvent=null):void{
				editPlacaFilha();
			}
			
			public function excluirPlacaFilha(data:Object=null, event:Event=null):void
			{		
				
				if(data)
					_placaFilha = data as OrdemServico;
				
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					if(_ordemServico.statusString == null || _ordemServico.statusString == "" || _ordemServico.statusString == "Criada" || _ordemServico.statusString == "Não processada" ){
						var index:int = _ordemServico.placasFilhas.getItemIndex(_placaFilha);
						if(_placaFilha != null && _placaFilha.id == 0){
							_ordemServico.placasFilhas.removeItemAt(index);
							dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','EXCLUIR_PLACA_FILHA_SUCESSO'), MessageType.SUCCESS, 10000));
						}else{
							
							ordemServicoService.excluirPlacaFilha(_placaFilha);
						}
					}else{
						dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','EXCLUIR_PLACA_FILHA_NAO_PERMITIDO'), MessageType.WARNING, 10000));
					}
					limparPlacaFilha();	
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(excluirPlacaFilhaAutenticar);
				}
			}
			
			public function excluirPlacaFilhaAutenticar(event:UserRegisterNumberModalEvent=null):void{
				excluirPlacaFilha();
			}
			
			private function adicionarPlacaFilha(event:MouseEvent = null):void
			{
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					if(validatePlacaFilha()){
						for each(var pf:OrdemServico in _ordemServico.placasFilhas){
							if(pf != _placaFilha && pf.numeroOrdemServico == _placaFilha.numeroOrdemServico){
								dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','NUMERO_ORDEM_SERVICO_JAH_UTILIZADO_PLACA_FILHA'), MessageType.ERROR, 10000));
								return;
							}
						}
						_placaFilha.cliente = _ordemServico.cliente;
						_placaFilha.itemNotaFiscal = _ordemServico.itemNotaFiscal;
						_placaFilha.notaFiscal = _ordemServico.notaFiscal;
						_placaFilha.unidadePai = _ordemServico;
						_placaFilha.usuario = Login.currentUser;
						if(_ordemServico.cliente.possuiContrato){
							_placaFilha.lpu = pfUnidadeLpu.lpuSelecionada;
						}
						if(_placaFilha != null && _placaFilha.id == 0 && _indexEdicaoPlacaFilha == -1){
							_ordemServico.placasFilhas.addItem(_placaFilha);
							dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','ADICIONAR_PLACA_FILHA_SUCESSO'), MessageType.SUCCESS, 10000));
							
						}else if(_placaFilha != null && _placaFilha.id == 0 && _indexEdicaoPlacaFilha != -1){
							_ordemServico.placasFilhas.setItemAt(_placaFilha,_indexEdicaoPlacaFilha);
							dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','EDITAR_PLACA_FILHA_SUCESSO'), MessageType.SUCCESS, 10000));
						}else{
							var index:int = _ordemServico.placasFilhas.getItemIndex(_placaFilha);
							_ordemServico.placasFilhas.setItemAt(_placaFilha,index);
							dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','EDITAR_PLACA_FILHA_SUCESSO'), MessageType.SUCCESS, 10000));
						}
						limparPlacaFilha();
					}else{
						dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','ERRO_VALIDACAO'), MessageType.WARNING, 10000));
					}	
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(adicionarPlacaFilhaAutenticar);
				}
				
				
			}
			
			public function adicionarPlacaFilhaAutenticar(event:UserRegisterNumberModalEvent=null):void{
				adicionarPlacaFilha();
			}
			
			private function controlarEnableBotao():void
			{
				if(indexOrdemServico == -1 || _ordemServicoPendentes == null || _ordemServicoPendentes.length == 0 || _ordemServicoPendentes.length-1 == 0){
					btForward.enabled = false;
					btBackward.enabled = false;
				}else if(indexOrdemServico == 0){
					btForward.enabled = true;
					btBackward.enabled = false;
				}else if(indexOrdemServico ==  _ordemServicoPendentes.length-1){
					btForward.enabled = false;
					btBackward.enabled = true;
				}else{
					btForward.enabled = true;
					btBackward.enabled = true;
				}
				
			}
			
			private function forward(event:MouseEvent = null):void
			{
				indexOrdemServico++;
				_ordemServico = _ordemServicoPendentes.getItemAt(indexOrdemServico) as OrdemServico;
				controlarEnableBotao();
			}
			
			private function backward(event:MouseEvent = null):void
			{
				indexOrdemServico--;
				_ordemServico = _ordemServicoPendentes.getItemAt(indexOrdemServico) as OrdemServico;
				controlarEnableBotao();
			}
			
			
			
		]]>
	</fx:Script>
	
	<fx:Binding source="_notaFiscal.observacao" destination="txtNfObservacao.inputText" twoWay="false" />
	<fx:Binding source="_notaFiscal.numero" destination="numeroNotaFiscal.inputText" twoWay="false" />
	<fx:Binding source="_notaFiscal.cliente.nomeRazaoSocial" destination="txtNome.inputText" twoWay="false" />
	<fx:Binding source="_notaFiscal.cliente.rgIe" destination="txtRgIe.inputText" twoWay="false" />
	<fx:Binding source="_notaFiscal.cliente.cpfCnpj" destination="txtCpfCnpj.inputText" twoWay="false" />
	<fx:Binding source="_notaFiscal.cliente.inscricaoMunicipal" destination="txtIm.inputText" twoWay="false" />
	<fx:Binding source="_notaFiscal.clienteAvaya" destination="txtClienteAvaya.inputText" twoWay="false" />
	<fx:Binding source="_notaFiscal.caseAvaya" destination="txtCaseAvaya.inputText" twoWay="false" />
	<fx:Binding source="_notaFiscal.dataNotaFiscal" destination="dataNotaFiscal.inputDate" twoWay="false" />
	<fx:Binding source="_notaFiscal.dataChegada" destination="dataEntradaNotaFiscal.inputDate" twoWay="false" />
	
	<fx:Binding source="txtCodigo.inputText" destination="_item.codigo" twoWay="true" />
	<fx:Binding source="txtCfop.inputText" destination="_item.cfop" twoWay="true" />
	<fx:Binding source="txtCst.inputText" destination="_item.cst" twoWay="true" />
	<fx:Binding source="txtNcm.inputText" destination="_item.ncm" twoWay="true" />
	<fx:Binding source="txtUnidadeMedida.inputText" destination="_item.unidadeMedida" twoWay="true" />	
	<fx:Binding source="txtDescricao.inputText" destination="_item.nome" twoWay="true" />
	<fx:Binding source="_item.quantidade.toString()" destination="txtQuantidade.inputText" twoWay="false" />
	
	<fx:Binding source="itemNota.inputText" destination="_ordemServico.itemNotaFiscal.nome" twoWay="true" />
	<fx:Binding source="unidadeServilogi.inputText" destination="_ordemServico.itemNotaFiscal.unidade.nome" twoWay="true" />
	<fx:Binding source="unidadeLpu.inputText" destination="_ordemServico.itemNotaFiscal.lpu.unidade" twoWay="true" />
	<fx:Binding source="fabricante.inputText" destination="_ordemServico.itemNotaFiscal.unidade.fabricante.nome" twoWay="true" />
	<fx:Binding source="equipamento.inputText" destination="_ordemServico.itemNotaFiscal.unidade.equipamento.nome" twoWay="true" />
	<fx:Binding source="laboratorio.inputText" destination="_ordemServico.itemNotaFiscal.unidade.laboratorio.nome" twoWay="true" />
	
	<fx:Binding source="txtObservacao.inputText" destination="_ordemServico.observacao" twoWay="true" />
	
	<fx:Binding source="pfTxtObservacao.inputText" destination="_placaFilha.observacao" twoWay="true" />
	<fx:Binding source="pfNumOrdemServico.text" destination="_placaFilha.numeroOrdemServico" twoWay="true" />
	<fx:Binding source="pfNumSerie.text" destination="_placaFilha.serieFabricante" twoWay="true" />
	<fx:Binding source="pfNumCliente.text" destination="_placaFilha.serieCliente" twoWay="true" />
	<fx:Binding source="pfNumOSCliente.text" destination="_placaFilha.ordemServicoCliente" twoWay="true" />
	<fx:Binding source="pfFabricante.inputText" destination="_placaFilha.unidade.fabricante.nome" twoWay="true" />
	<fx:Binding source="pfEquipamento.inputText" destination="_placaFilha.unidade.equipamento.nome" twoWay="true" />
	<fx:Binding source="pfLaboratorio.inputText" destination="_placaFilha.unidade.laboratorio.nome" twoWay="true" />
	
	<mx:states>
		<s:State  name="listagem"/>
		<s:State name="edicaoInfoNota"/>
		<s:State name="edicaoOSPendente"/>
		<s:State name="edicaoOSProcessada"/>
		<s:State name="insercao"/>
	</mx:states>
	
	
	<mx:VBox width="100%" horizontalAlign="center">
		<s:Label fontSize="15" fontWeight="bold" text="{resourceManager.getString('ApplicationResource','LISTA_NOTA_FISCAL')}" includeIn="listagem"/>
		<s:Label fontSize="15" fontWeight="bold" text="{resourceManager.getString('ApplicationResource','DETALHAMENTO_NOTA_FISCAL')}" excludeFrom="listagem"/>
	</mx:VBox>	
	
	<mx:VBox width.listagem="100%" horizontalAlign="left">
		<mx:Button id="newButton" includeIn="listagem"
				   label="{resourceManager.getString('ApplicationResource','NOVO')}"
				   height="25"
				   icon="@Embed(source='/assets/icons/new.png')"
				   click="novo(event)"
				   />
	</mx:VBox>
	
	<notaFiscal:ListagemNotaFiscal id="listagemNF" includeIn="listagem" width="100%" />
	
	<mx:TabNavigator id="tn" tabWidth="{tn.width/tn.numChildren}"  width="100%" height="100%" backgroundColor="0xf3f3f3"  change="clickAba(event)" borderStyle="none" excludeFrom="listagem"  >
		<s:NavigatorContent label="{resourceManager.getString('ApplicationResource','INFORMACAO_NOTA_FISCAL')}"  width="100%" height="100%" >
			<mx:VBox width="100%" height="100%"  >
				<s:Spacer height="5" />
				<s:Label fontSize="{ScreenUtils.font_header_size}" fontWeight="bold" text="{resourceManager.getString('ApplicationResource','INFORMACOES_CLIENTE')}" />
				<mx:HBox id="boxCliente" width="100%" cornerRadius="3" borderStyle="solid" borderThickness="1" paddingTop="10" paddingLeft="10" paddingBottom="10" paddingRight="10" enabled.edicaoInfoNota="{_notaFiscal.statusString == 'Nova' || _notaFiscal.statusString == ''}" >
					<combos:ComboCliente id="cbCliente" required="true" labelText="{resourceManager.getString('ApplicationResource','CLIENTE')}" width="15%"  changeFunction="atualiza" />
					<texto:TextInput id="txtNome" labelText="{resourceManager.getString('ApplicationResource','NOME')}" habilitado="false" width="37%"  />
					<texto:TextInput id="txtRgIe" labelText="{resourceManager.getString('ApplicationResource','RG')}" habilitado="false" width="16%"  />
					<texto:TextInput id="txtCpfCnpj" labelText="{resourceManager.getString('ApplicationResource','CPF')}" habilitado="false" width="16%"  />
					<texto:TextInput id="txtIm" labelText="IM" habilitado="false" width="16%"  />
				</mx:HBox>
				
				<s:Spacer height="5" />
				<s:Label fontSize="{ScreenUtils.font_header_size}" fontWeight="bold" text="{resourceManager.getString('ApplicationResource','INFORMACOES_NOTA_FISCAL')}" />
				<mx:VBox width="100%" cornerRadius="3" borderStyle="solid" borderThickness="1" paddingTop="10" paddingLeft="10" paddingBottom="10" paddingRight="10" enabled="{_notaFiscal.statusString != 'Finalizada'}">
					<mx:HBox id="boxInfoNF" width="100%">
						<texto:TextInput id="numeroNotaFiscal" required="true" labelText="{resourceManager.getString('ApplicationResource','NUMERO_NOTA_FISCAL')}" width="30%" enabled="{_notaFiscal.statusString == 'Nova' || _notaFiscal.statusString == ''}" />
						<componentes:DataInput id="dataNotaFiscal" enabled="{(_notaFiscal.statusString == '' ||_notaFiscal.statusString == 'Nova')}" required="true" labelText="{resourceManager.getString('ApplicationResource','DATA_NOTA_FISCAL')}" width="10%" inputHeight="20" />
						<componentes:DataInput id="dataEntradaNotaFiscal" enabled="{(_notaFiscal.statusString == '' ||_notaFiscal.statusString == 'Nova')}" required="true" labelText="{resourceManager.getString('ApplicationResource','DATA_RECEBIMENTO_NOTA_FISCAL')}" width="10%" inputHeight="20" />
						<texto:TextInputDinheiro4d id="valorNotaFiscal" habilitado="{(_notaFiscal.statusString == '' ||_notaFiscal.statusString == 'Nova')}" labelText="{resourceManager.getString('ApplicationResource','VALOR_NOTA_FISCAL')}" width="20%" />
						<texto:TextInput id="txtCaseAvaya" labelText="{resourceManager.getString('ApplicationResource','CASE_AVAYA')}" width="15%" enabled="{_notaFiscal.cliente.nomeRazaoSocial.toLocaleLowerCase().indexOf('avaya') != -1}" />
						<texto:TextInput id="txtClienteAvaya" labelText="{resourceManager.getString('ApplicationResource','CLIENTE_AVAYA')}" width="15%" enabled="{_notaFiscal.cliente.nomeRazaoSocial.toLocaleLowerCase().indexOf('avaya') != -1}" />	
					</mx:HBox>
					<componentes:TextAreaInput width="100%" id="txtNfObservacao" 
											   heightInLines="2" labelText="{resourceManager.getString('ApplicationResource','OBSERVACAO')}" />
				</mx:VBox>				
				
				<s:Spacer height="5" />
				<s:Label fontSize="{ScreenUtils.font_header_size}" fontWeight="bold" text="{resourceManager.getString('ApplicationResource','INFORMACOES_ITEM_NOTA_FISCAL')}" />
				<mx:VBox width="100%" height="100%" cornerRadius="3" borderStyle="solid" borderThickness="1" paddingTop="10" paddingLeft="10" paddingBottom="10" paddingRight="10">
					
					<mx:HBox verticalAlign="bottom" width="100%" enabled="{_notaFiscal.statusString != 'Finalizada'}">
						<texto:TextInput id="txtCodigo" required="false" labelText="{resourceManager.getString('ApplicationResource','CODIGO_PRODUTO')}" width="10%" />
						<texto:TextInput id="txtDescricao" required="true" labelText="{resourceManager.getString('ApplicationResource','DESCRICAO_PRODUTO')}" width="40%" />
						<texto:TextInput id="txtNcm" restrict="0-9" labelText="{resourceManager.getString('ApplicationResource','NCM')}" width="12.5%"  />
						<texto:TextInput id="txtCst" labelText="{resourceManager.getString('ApplicationResource','CST')}" width="12.5%" />
						<texto:TextInput id="txtCfop" labelText="{resourceManager.getString('ApplicationResource','CFOP')}" width="12.5%" />
						<texto:TextInput id="txtUnidadeMedida" labelText="{resourceManager.getString('ApplicationResource','UNIDADE_MEDIDA')}" width="12.5%" />
					</mx:HBox>
					
					<mx:HBox verticalAlign="bottom" width="100%" enabled="{_notaFiscal.statusString != 'Finalizada'}">
						<texto:TextInput id="txtQuantidade" required="true" initialize="initTxtQuantidade()"  labelText="{resourceManager.getString('ApplicationResource','QUANTIDADE_ABREVIADO')}" width="15%" restrict="0-9" habilitado="{(_notaFiscal.statusString == '' ||_notaFiscal.statusString == 'Nova')}" />
						<texto:TextInputDinheiro4d id="txtValorUnitario" initialize="initTxtValorUnitario()"  labelText="{resourceManager.getString('ApplicationResource','VALOR_UNITARIO')}" width="15%" habilitado="{(_notaFiscal.statusString == '' || _notaFiscal.statusString == 'Nova')}" />
						<texto:TextInputDinheiro4d id="txtValorTotal" labelText="{resourceManager.getString('ApplicationResource','VALOR_TOTAL')}" width="15%" habilitado="false" />
						<combos:ComboUnidade id="cbUnidadeServilogi"  width="25%" enabled.edicaoInfoNota="{(_notaFiscal.statusString == '' ||_notaFiscal.statusString == 'Nova')}" required="true" labelText="{resourceManager.getString('ApplicationResource','NOME_UNIDADE')}" />
						<combos:ComboLpu id="cbUnidadeLpu" required="true" labelText="{resourceManager.getString('ApplicationResource','UNIDADE_LPU')}" width="25%"  enabled.edicaoInfoNota="{(_notaFiscal.statusString == '' ||_notaFiscal.statusString == 'Nova')}" />
						<mx:Button id="btAdicionar" 
								   label="{resourceManager.getString('ApplicationResource','ADICIONAR')}"
								   height="25" width="5%" 
								   icon="@Embed(source='/assets/icons/add.png')" 
								   click="adicionar(event)"
								   />
					</mx:HBox>
					
					<mx:HBox width="100%" height="100%">
						<grid:MantisTable id="viewTable"
										  width="100%" height="100%"
										  draggableColumns="true"
										  dataProvider="{_notaFiscal.itensDaNotaFiscal}">
							<grid:columns>
								<!-- CHANGE HERE THE ENTITY COLUMNS -->
								<mx:DataGridColumn id="cCodigo" width=".05"
												   headerText = "{resourceManager.getString('ApplicationResource','CODIGO')}"
												   textAlign="center"
												   sortable="false"
												   dataField="codigo"							   
												   />
								<mx:DataGridColumn id="cDescricao" dataField="nome" width=".20"
												   headerText = "{resourceManager.getString('ApplicationResource','DESCRICAO')}"
												   textAlign="center"
												   sortable="false"					   
												   />
								<mx:DataGridColumn id="cNcm" dataField="ncm" width=".0875"
												   headerText = "{resourceManager.getString('ApplicationResource','NCM')}"
												   textAlign="center"
												   sortable="false"							   
												   />
								<mx:DataGridColumn id="cCst" 
												   headerText = "{resourceManager.getString('ApplicationResource','CST')}"
												   dataField = "cst" textAlign="center"
												   width=".0875"
												   />
								<mx:DataGridColumn id="cCfop" 
												   headerText = "{resourceManager.getString('ApplicationResource','CFOP')}"
												   dataField = "cfop" textAlign="center"
												   width=".0875"
												   />
								<mx:DataGridColumn id="cUnidadeMedida" 
												   headerText = "{resourceManager.getString('ApplicationResource','UNIDADE_MEDIDA')}"
												   dataField = "unidadeMedida" textAlign="center"
												   width=".0875"
												   />
								<mx:DataGridColumn id="cQuantidade" 
												   headerText = "{resourceManager.getString('ApplicationResource','QUANTIDADE_ABREVIADO')}"
												   dataField = "quantidade" textAlign="center"
												   width=".05"
												   />
								<mx:DataGridColumn id="cValorUnitario"  textAlign="center"
												   headerText = "{resourceManager.getString('ApplicationResource','VALOR_UNITARIO')}"
												   labelFunction="formatarColunaValorUnitario"
												   width=".10"
												   />
								<mx:DataGridColumn id="cUnidadeServilogi" 
												   headerText = "{resourceManager.getString('ApplicationResource','UNIDADE_SERVILOGI')}"
												   dataField = "unidade.nome" textAlign="center"
												   width=".10"
												   />
								<mx:DataGridColumn id="cLpu" 
												   headerText = "{resourceManager.getString('ApplicationResource','UNIDADE_LPU')}"
												   dataField = "lpu.unidade" textAlign="center"
												   width=".10"
												   />
								
								<!-- EDIT/REMOVE COLUMNS -->
								<mx:DataGridColumn headerText = "{resourceManager.getString('ApplicationResource','ACTION_COLUMN')}"	
												   draggable="false" width=".05" textAlign="center"							 
												   editable="false"
												   sortable="false">
									<mx:itemRenderer>
										<fx:Component>
											<mx:HBox horizontalAlign="center"
													 verticalAlign="middle"
													 >
												<mx:Image source="@Embed(source='/assets/icons/edit.png')"
														  click="parentDocument.editItem(data, event)"
														  buttonMode="true" visible="{parentDocument._notaFiscal.statusString != 'Finalizada'}"
														  useHandCursor="true" 
														  toolTip="{resourceManager.getString('ApplicationResource','EDIT')}"
														  />
												<mx:Image source="@Embed(source='/assets/icons/delete.png')"
														  click="parentDocument.excluirItem(data, event)"
														  buttonMode="true"
														  useHandCursor="true" visible="{parentDocument._notaFiscal.statusString == 'Nova'}"
														  toolTip="{resourceManager.getString('ApplicationResource','EXCLUIR')}"
														  />
											</mx:HBox>
										</fx:Component>
									</mx:itemRenderer>
								</mx:DataGridColumn>
							</grid:columns>
						</grid:MantisTable>
					</mx:HBox>
				</mx:VBox>
			</mx:VBox>
			
		</s:NavigatorContent>
		
		
		
		<s:NavigatorContent label="{resourceManager.getString('ApplicationResource','ORDEM_SERVICO_PENDENTES')}" 
							enabled="{_notaFiscal.statusString == 'Processada'}"
							width="100%" height="100%" >
			<mx:VBox width="100%" height="100%" verticalGap="0" paddingTop="0">
				<mx:ApplicationControlBar width="100%">
					<mx:Label text="{resourceManager.getString('ApplicationResource','FILTRO')}:" fontWeight="bold" color="0x000000"/>
					<s:ComboBox  id="cbFiltrosItensNF" labelField="nome" height="25" width="250" enabled="false" />
					<mx:Label text="OS's pendentes: " />
					<mx:Label text="{_ordemServicoPendentes != null ? _ordemServicoPendentes.length == 0 ? '0': _ordemServicoPendentes.length : '0'}" />
					<mx:Label text=" de " />
					<mx:Label text="{totalOs == 0 ? '0' : totalOs}" />
					<mx:Spacer width="100%" />
					<mx:Button icon="@Embed(source='/assets/icons/arrow_left.png')" id="btBackward" enabled="{_ordemServicoPendentes != null || _ordemServicoPendentes.length != 0}" click="backward(event)" />
					<mx:Button icon="@Embed(source='/assets/icons/arrow_right.png')" id="btForward" enabled="{_ordemServicoPendentes != null || _ordemServicoPendentes.length != 0}" click="forward(event)" />
				</mx:ApplicationControlBar>
				<mx:Spacer height="5" />
				
				<mx:VBox width="100%" height="100%" cornerRadius="3" borderStyle="solid" borderThickness="1" 
						 verticalGap="2" paddingTop="10" paddingLeft="10" paddingBottom="10" paddingRight="10">
					
					<mx:HBox width="100%" verticalAlign="middle">
						<texto:TextInput id="itemNota" labelText="{resourceManager.getString('ApplicationResource','ITEM_NOTA_FISCAL')}" width="33.33%" habilitado="false" />
						<texto:TextInput id="unidadeServilogi" labelText="{resourceManager.getString('ApplicationResource','UNIDADE_SERVILOGI')}" width="33.33%" habilitado="false" />
						<texto:TextInput id="unidadeLpu" labelText="{resourceManager.getString('ApplicationResource','UNIDADE_LPU')}" width="33.33%" habilitado="false" />
						<s:Label text="{_ordemServico.garantia ? 'Com garantia' : 'Sem garantia'}" color="{_ordemServico.garantia ? 0x00EE00 : 0xFF0000 }" fontSize="20" fontWeight="bold" />
					</mx:HBox>
					<mx:HBox width="100%" verticalAlign="bottom">
						<texto:TextInput id="fabricante" labelText="{resourceManager.getString('ApplicationResource','FABRICANTE')}" width="33%" habilitado="false" />
						<texto:TextInput id="equipamento" labelText="{resourceManager.getString('ApplicationResource','EQUIPAMENTO')}" width="33%" habilitado="false" />
						<texto:TextInput id="laboratorio" labelText="{resourceManager.getString('ApplicationResource','LABORATORIO')}" width="33%" habilitado="false" />
					</mx:HBox>
					
					<mx:HBox width="100%" verticalAlign="bottom">
						<mx:VBox width="10%">
							<s:Label text="Nº OS" />
							<s:TextInput id="nOrdemServico" restrict="0-9"  width="100%" enabled="{_ordemServicoPendentes != null &amp;&amp; _ordemServicoPendentes.length > 0}" />
						</mx:VBox>
						<mx:VBox width="35%">
							<s:Label text="N/S fabricante" />
							<s:TextInput id="nSerie"  width="100%" enabled="{_ordemServicoPendentes != null &amp;&amp; _ordemServicoPendentes.length > 0}" />
						</mx:VBox>
						<mx:VBox width="35%">
							<s:Label text="N/S cliente" />
							<s:TextInput id="nCliente" width="100%" enabled="{_ordemServicoPendentes != null &amp;&amp; _ordemServicoPendentes.length > 0}" /> 
						</mx:VBox>
						<mx:VBox width="20%">
							<s:Label text="OS cliente" />
							<s:TextInput id="nOSCliente" width="100%" enabled="{_ordemServicoPendentes != null &amp;&amp; _ordemServicoPendentes.length > 0}" />
						</mx:VBox>
					</mx:HBox>
					
					<componentes:TextAreaInput width="100%" id="txtObservacao" 
											   heightInLines="2" labelText="{resourceManager.getString('ApplicationResource','OBSERVACAO')}" />
					
					<mx:Accordion id="accordion"  width="100%" height="100%">
						<s:NavigatorContent label="{resourceManager.getString('ApplicationResource','PLACAS_FILHAS')}" width="100%" height="100%">
							<mx:VBox width="100%" height="100%" verticalGap="2" enabled="{_ordemServicoPendentes != null &amp;&amp; _ordemServicoPendentes.length > 0}"
									 paddingTop="10" paddingLeft="10" paddingBottom="10" paddingRight="10">
								
								<mx:HBox width="100%">
									<mx:VBox width="25%">
										<s:Label text="Nº OS" />
										<s:TextInput id="pfNumOrdemServico" restrict="0-9"  width="100%" />
									</mx:VBox>
									<mx:VBox width="25%">
										<s:Label text="N/S fabricante" />
										<s:TextInput id="pfNumSerie"  width="100%" />
									</mx:VBox>
									<mx:VBox width="25%">
										<s:Label text="N/S cliente" />
										<s:TextInput id="pfNumCliente" width="100%" /> 
									</mx:VBox>
									<mx:VBox width="25%">
										<s:Label text="OS cliente" />
										<s:TextInput id="pfNumOSCliente" width="100%" />
									</mx:VBox>
								</mx:HBox>
								
								<mx:HBox width="100%">
									<combos:ComboUnidade id="pfUnidadeServilogi" required="true" labelText="{resourceManager.getString('ApplicationResource','UNIDADE_SERVILOGI')}" width="25%" changeFunction="atualizaInfoPlacaFilha"/>
									<texto:TextInput id="pfFabricante" labelText="{resourceManager.getString('ApplicationResource','FABRICANTE')}" width="16.66%" habilitado="false" />
									<texto:TextInput id="pfEquipamento" labelText="{resourceManager.getString('ApplicationResource','EQUIPAMENTO')}" width="16.66%" habilitado="false" />
									<texto:TextInput id="pfLaboratorio" labelText="{resourceManager.getString('ApplicationResource','LABORATORIO')}" width="16.66%" habilitado="false" />
									<combos:ComboLpu id="pfUnidadeLpu" required="true" labelText="{resourceManager.getString('ApplicationResource','UNIDADE_LPU')}" width="25%" enabled="{_ordemServico.cliente.possuiContrato}" />
								</mx:HBox>
								
								<mx:HBox width="100%" verticalAlign="bottom">
									<componentes:TextAreaInput width="85%" id="pfTxtObservacao" 
															   heightInLines="2" labelText="{resourceManager.getString('ApplicationResource','OBSERVACAO')}" />
									<mx:Button id="btAdicionarPlacaFilha" 
											   label="{resourceManager.getString('ApplicationResource','ADICIONAR')}"
											   height="32" width="15%" enabled="{_ordemServicoPendentes != null &amp;&amp; _ordemServicoPendentes.length > 0}"
											   icon="@Embed(source='/assets/icons/add.png')"
											   click="adicionarPlacaFilha(event)"
											   />
								</mx:HBox>
								
								<grid:MantisTable id="tabelaPlacaFilha"
												  width="100%"
												  height="100%"
												  draggableColumns="true"
												  dataProvider="{_ordemServico.placasFilhas}">
									<grid:columns>
										
										<!-- CHANGE HERE THE ENTITY COLUMNS -->
										
										
										<dc:DataGridColumnFilter id="cNumOrdemServico" filterRenderer="components.grid.filtros.BeginWithFilterRenderer"
														   headerText = "{resourceManager.getString('ApplicationResource','NUMERO_ORDEM_SERVICO')}"
														   textAlign="center" width=".05"
														   sortable="false"
														   dataField="numeroOrdemServico"							   
														   />
										
										<mx:DataGridColumn id="cUnidade" dataField="unidade.nome"
														   headerText = "{resourceManager.getString('ApplicationResource','UNIDADE')}"
														   textAlign="center" width=".15"
														   sortable="false"					   
														   />
										
										<mx:DataGridColumn id="cNumSerie" dataField="serieFabricante"
														   headerText = "{resourceManager.getString('ApplicationResource','NUMERO_SERIE')}"
														   textAlign="center" width=".10"
														   sortable="false"							   
														   />
										
										<mx:DataGridColumn id="cNumCliente" 
														   headerText = "{resourceManager.getString('ApplicationResource','NUMERO_CLIENTE')}"
														   dataField = "serieCliente"
														   width=".10"
														   />
										
										<mx:DataGridColumn id="cNumOSCliente" 
														   headerText = "{resourceManager.getString('ApplicationResource','NUMERO_ORDEM_CLIENTE')}"
														   dataField = "ordemServicoCliente"
														   width=".10"
														   />
										
										<mx:DataGridColumn id="cLaboratorio" 
														   headerText = "{resourceManager.getString('ApplicationResource','LABORATORIO')}"
														   dataField = "unidade.nomeLaboratorio"
														   width=".10"
														   />
										
										<mx:DataGridColumn id="cFabricante" 
														   headerText = "{resourceManager.getString('ApplicationResource','FABRICANTE')}"
														   dataField = "unidade.nomeFabricante"
														   width=".10"
														   />
										
										<mx:DataGridColumn id="cEquipamento" 
														   headerText = "{resourceManager.getString('ApplicationResource','EQUIPAMENTO')}"
														   dataField = "unidade.nomeEquipamento"
														   width=".10"
														   />
										
										<mx:DataGridColumn id="cLpuPlacaFilha" 
														   headerText = "{resourceManager.getString('ApplicationResource','LPU')}"
														   dataField = "lpu.unidade"
														   width=".10"
														   />
										
										<!-- EDIT/REMOVE COLUMNS -->
										
										<mx:DataGridColumn headerText = "{resourceManager.getString('ApplicationResource','ACTION_COLUMN')}"	
														   draggable="false" width=".10"							 
														   editable="false"
														   sortable="false">
											<mx:itemRenderer>
												<fx:Component>
													<mx:HBox horizontalAlign="center"
															 verticalAlign="middle"
															 >
														
														<mx:Image source="@Embed(source='/assets/icons/edit.png')"
																  click="parentDocument.editPlacaFilha(data, event)"
																  buttonMode="true"
																  useHandCursor="true"
																  toolTip="{resourceManager.getString('ApplicationResource','EDIT')}"
																  />
														
														<mx:Image source="@Embed(source='/assets/icons/delete.png')"
																  click="parentDocument.excluirPlacaFilha(data, event)"
																  buttonMode="true"
																  useHandCursor="true"
																  toolTip="{resourceManager.getString('ApplicationResource','EXCLUIR')}"
																  />
														
													</mx:HBox>
												</fx:Component>
											</mx:itemRenderer>
										</mx:DataGridColumn>
									</grid:columns>
								</grid:MantisTable>				
							</mx:VBox>
						</s:NavigatorContent>
					</mx:Accordion>
				</mx:VBox>
			</mx:VBox>
		</s:NavigatorContent>
		
		<s:NavigatorContent label="{resourceManager.getString('ApplicationResource','ORDEM_SERVICO_PROCESSADAS')}" 
							enabled="{_ordemServicoProcessadas != null ? _ordemServicoProcessadas.length != 0:false}"
							width="100%" height="100%" >
			<notaFiscal:OrdemServicoProcessadas id="listagemOsProcessadas" height="100%" />
		</s:NavigatorContent>
	</mx:TabNavigator>
	

	<mx:HBox width="100%" excludeFrom="listagem" horizontalAlign="left">
		<mx:Button id="btSalvar" includeIn="edicaoInfoNota"
				   label="{resourceManager.getString('ApplicationResource','SALVAR')}"
				   height="25" enabled="{_notaFiscal.statusString != 'Finalizada'}"
				   icon="@Embed(source='/assets/icons/save.png')"
				   click="salvar(event)"
				   />
		<mx:Button id="btGerar" includeIn="edicaoInfoNota"
				   label="{resourceManager.getString('ApplicationResource','GERAR_ORDEM_SERVICO')}"
				   height="25" enabled.edicaoInfoNota="{_notaFiscal.statusString == 'Nova' || _notaFiscal.statusString == ''}"
				   icon="@Embed(source='/assets/icons/page_gear.png')"
				   click="processarNotaFiscal(event)"
				   />
		<mx:Button id="btVerificarGarantia" includeIn="edicaoOSPendente"
				   label="Verificar garantia"
				   height="25" enabled="{_ordemServicoPendentes != null &amp;&amp; _ordemServicoPendentes.length > 0}"
				   icon="@Embed(source='/assets/icons/page_gear.png')"
				   click="verificarGarantia(event)"
				   />
		<mx:Button id="btProcessar" includeIn="edicaoOSPendente"
				   label="{resourceManager.getString('ApplicationResource','PROCESSAR_ORDEM_SERVICO')}"
				   height="25"
				   icon="@Embed(source='/assets/icons/page_gear.png')"
				   click="processar(event)"
				   />
		<mx:Button id="btVoltar" includeIn="edicaoOSPendente,edicaoInfoNota"
				   label="{resourceManager.getString('ApplicationResource','VOLTAR')}"
				   height="25"
				   icon="@Embed(source='/assets/icons/back.png')"
				   click="voltar(event)"
				   />
	</mx:HBox>
</mx:VBox>
