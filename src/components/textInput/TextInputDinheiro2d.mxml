<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 horizontalAlign="left" horizontalScrollPolicy="off" verticalScrollPolicy="off"
		 verticalGap="0" width="200"
		 initialize="onInit()">
	
	<!-- Action Scripts -->
	<fx:Script>
		<![CDATA[
			import flash.globalization.CurrencyParseResult;
			
			import flashx.textLayout.edit.SelectionFormat;
			import flashx.textLayout.edit.SelectionState;
			
			import mx.events.FlexEvent;
			/** Exposed text property */
			[Bindable]
			public var labelText:String = "";
			
			[Bindable]
			public var simboloMoeda:String = "R$";
			
			/** Exposed input width property */
			
			[Bindable]
			public var inputText:String;
			
			private var _valor:Number;
			
			[Bindable]
			public var editableFlag:Boolean = true;
			
			[Bindable]
			public var change:Function;
			
			private var _tabObject:Object;
			
			private var _tabObjectEnabled:Boolean = false;
			
			[Bindable]
			public var enter:Function;
			
			[Bindable]
			public var restrict:String;
			
			[Bindable]
			public var maxLength:int = 255;
			
			[Bindable]
			public var minLength:int;
			
			[Bindable]
			public var required:Boolean = false;
			
			[Bindable]
			public var habilitado:Boolean = true;
			
			private function onInit():void
			{
				input.addEventListener(FocusEvent.FOCUS_IN,onFocusIn);
				input.addEventListener(FocusEvent.FOCUS_OUT,onFocusOut);
				input.addEventListener(KeyboardEvent.KEY_UP,onEnter);
			}
			
			private function onCreationComplete():void
			{
				//input.text = "R$0,00";
			}
			
			public function limpar():void
			{
				input.text = "";
			}
			
			public function isValorValido(str:String):Boolean
			{
				var c:String;
				var nPontos:int=0;
				var nVirgulas:int=0;
				if(str != null && str.length > 0){
					for (var i:int=0;i<str.length;i++){
						c = str.charAt(i);
						if(c == "."){
							nPontos++;
						}
						if(c == ","){
							nVirgulas++;
						}
					}
					if(nVirgulas > 1){
						return false;
					}
					var indexUltimoPonto = str.lastIndexOf(".");
					var indexUltimaVirgula = str.lastIndexOf(",");
					
					if(indexUltimoPonto != -1 && indexUltimaVirgula  != -1){
						if(indexUltimoPonto > indexUltimaVirgula){
							return false;
						}
					}
					
				}else{
					return true;
				}
				return true;				
			}
			
			public function format(str:String):String
			{
				str = str.replace("R$","");
				str = str.replace(" ","");
				var myPattern:RegExp = /\./g;
				str = str.replace(myPattern,"");
				
				var formatted:String="";
				
				var inteiro:String = "";
				var inteiroFormatado:String = "";
				//Pega os centavos se esses existirem
				var centavos:String = "";
				var centavosFormatado:String = "";
				if(str !=null && str.length > 0){
					var indexVirgula:int = str.lastIndexOf(",");
					//possui virgula?
					if(indexVirgula != -1){
						centavos = str.substring(indexVirgula+1);
						inteiro = str.substring(0,indexVirgula);
					}else{
						inteiro = str;
					}
				}
				
				//Formata os centavos
				if(centavos.length > 0){
					if(centavos.length == 1){
						centavosFormatado = centavos.charAt(0)+"0";
					}
					if(centavos.length > 2){
						var char:String = centavos.charAt(2);
						var numero:int = parseInt(char);
						if(numero >= 5){
							var char1:String = centavos.charAt(1)
							var numero1:int = parseInt(char1);
							centavosFormatado = centavos.charAt(0) + (numero1+1).toString(); 
						}else{
							centavosFormatado = centavos.charAt(0)+centavos.charAt(1);
						}
					}else{
						centavosFormatado = centavos;
					}
				}else{
					centavosFormatado = "00";
				}
				
				//Formatar valor inteiro
				var separador:int = 0;
				var char2:String = "";
				for(var i:int=inteiro.length-1;i!=-1;i--){
					char2 = inteiro.charAt(i);
					inteiroFormatado = char2 + inteiroFormatado;
					separador++;
					
					if(separador%3 == 0 && i != 0){
						inteiroFormatado = "." + inteiroFormatado;
					}
				}
				
				formatted = inteiroFormatado + "," + centavosFormatado;
				
				return formatted;
			}
			
			private function onChange():void
			{
				if(change != null){
					change();	
				}
				
			}
			
			private function onFocusIn(evento:FocusEvent):void
			{
				var str:String = input.text;
				str = str.replace("R$","");
				str = str.replace(" ","");
				var myPattern:RegExp = /\./g;
				str = str.replace(myPattern,"");
				//str = str.replace(",","");
				input.text = str;
			}
			
			private function onFocusOut(evento:FocusEvent):void
			{
				var str:String = input.text;
				if(str.length == 0){
					input.text = "";
					return;
				}
				if(str != null && str.length > 0){
					str = format(str);
				}
				if(str.indexOf("R$") == -1)
					input.text = "R$ " + str;
			}
			
			
			private function onEnter(keyEvent:KeyboardEvent):void
			{
				if(tabObjectEnabled)
					if(keyEvent.keyCode == 13){
						tabObject.setFocus();
						tabObject.drawFocus(true);
						var str:String = input.text;
						if(str.length == 0){
							input.text = "";
							return;
						}
						if(str != null && str.length > 0){
							str = format(str);
						}
						if(str.indexOf("R$") == -1)
							input.text = "R$ " + str;
					}
			}
			
			public function getValor(str:String=null):Number
			{
				var str:String = input.text;
				str = str.replace("R$","");
				str = str.replace(" ","");
				var myPattern:RegExp = /\./g;
				str = str.replace(myPattern,"");
				str = str.replace(",",".");
				_valor = parseFloat(str);
				return _valor;
			}
			
			public function setValor(num:Number):void
			{
				if(num == 0 || isNaN(num)){
					input.text = "";
					return;
				}
				var str:String = num.toString();
				str = str.replace(".",",");
				input.text = format(str);
				if(input.text.indexOf("R$") == -1)
					input.text = "R$ " + input.text;
			}
			
			public function setValorWithFixed(num:Number):void
			{
				if(num == 0 || isNaN(num)){
					input.text = "";
					return;
				}
				var str:String = num.toFixed(2);
				str = str.replace(".",",");
				input.text = format(str);
				if(input.text.indexOf("R$") == -1)
					input.text = "R$ " + input.text;
			}
			
			[Bindable]
			public function get valor():Number
			{
				var str:String = input.text;
				str = str.replace("R$","");
				str = str.replace(" ","");
				var myPattern:RegExp = /\./g;
				str = str.replace(myPattern,"");
				str = str.replace(",",".");
				_valor = parseFloat(str);
				return _valor;
			}
			
			public function set valor(value:Number):void
			{
				_valor = value;
			}

			[Bindable]
			public function get tabObject():Object
			{
				return _tabObject;
			}

			public function set tabObject(value:Object):void
			{
				_tabObject = value;
			}

			[Bindable]
			public function get tabObjectEnabled():Boolean
			{
				return _tabObjectEnabled;
			}

			public function set tabObjectEnabled(value:Boolean):void
			{
				_tabObjectEnabled = value;
			}
			
			
		]]>
	</fx:Script>
	
	<fx:Binding source="inputText" destination="input.text" twoWay="true"/>
	
	<fx:Declarations>
		<mx:CurrencyFormatter id="CurrencyF" precision="2" 
							  thousandsSeparatorTo="." thousandsSeparatorFrom="." 
							  decimalSeparatorFrom="," decimalSeparatorTo="," useThousandsSeparator="true"/>
		<s:CurrencyFormatter id="DinheiroDisplay2d" fractionalDigits="2" 
							 decimalSeparator="," currencySymbol=""
							 useCurrencySymbol="true" 
							 groupingSeparator="." />
		<mx:StringValidator id="stringValidator"
							required="{required}" 
							source="{input}" 
							property="text" 
							triggerEvent = "{FocusEvent.FOCUS_OUT}"
							requiredFieldError="Campo obrigatÃ³rio"
							/>
		
	</fx:Declarations>
	
	
	<s:Label text="{labelText}" id="lbl"/>
	
	<s:TextInput  id="input" maxChars="{maxLength}"
				  enabled="{habilitado}" focusOut="onFocusOut(event)"
				  width="100%" height="25"  focusIn="onFocusIn(event)"
				  editable="true" restrict="0-9.," 
				  change="onChange()"  />
	
</mx:VBox>
