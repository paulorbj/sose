<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%"  height="100%" paddingBottom="20" paddingLeft="10" paddingRight="10" paddingTop="10"
		 xmlns:components="components.*" horizontalAlign="center"
		 xmlns:grid="components.grid.*" xmlns:combos="components.combos.*"
		 initialize="init()">
	
	<fx:Declarations>
		<mx:RemoteObject id="requisicaoComponenteService" destination="requisicaoComponenteService" endpoint="{resourceManager.getString('ConfigurationResource','amf')}">			
			<mx:method name="listarRequisicao"      
					   fault="onListarRequisicaoFault(event)" 
					   result="onListarRequisicaoResult(event)"
					   />
		</mx:RemoteObject>
		
		<mx:RemoteObject id="estoqueController" destination="estoqueController" endpoint="{resourceManager.getString('ConfigurationResource','amf')}">			
			
			<mx:method name="receberMaterial"      
					   fault="onReceberMaterialFault(event)" 
					   result="onReceberMaterialResult(event)"
					   />
			<mx:method name="cancelarRequisicao"      
					   fault="onCancelarRequisicaoFault(event)" 
					   result="onCancelarRequisicaoResult(event)"
					   />
		</mx:RemoteObject>
		
		<mx:Consumer id="consumidorEstoqueService" destination="EstoqueMessageServicePush" message="onMsgEstoque(event)" />
		
		<mx:Producer id="produtorEstoqueService" destination="EstoqueMessageServicePush" /> 

		<mx:Producer id="produtorReparoService" destination="ReparoMessageServicePush" /> 
		
		<mx:Producer id="produtorOrcamentoService" destination="OrcamentoMessageServicePush" /> 

	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import components.PopupModalController;
			import components.UserRegisterNumberModal;
			import components.events.UserRegisterNumberModalEvent;
			import components.messages.MensagemEvent;
			import components.messages.MessageType;
			
			import entities.GlobalMessage;
			import entities.administrativo.Usuario;
			import entities.orcamentoreparo.Orcamento;
			import entities.orcamentoreparo.Reparo;
			import entities.orcamentoreparo.RequisicaoComponente;
			
			import modules.view.Login;
			
			import mx.collections.ArrayCollection;
			import mx.events.ListEvent;
			import mx.managers.CursorManager;
			import mx.managers.PopUpManager;
			import mx.messaging.events.MessageEvent;
			import mx.messaging.messages.AsyncMessage;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import utils.MensagensAplicacao;
			import utils.Publicador;
			
			[Bindable]
			private var _listaRequisicoes:ArrayCollection;
			
			[Bindable]
			private var _requisicoesSelecionadas:ArrayCollection;
			
			[Bindable]
			private var _requisicoesNaoSelecionadas:ArrayCollection;
			
			[Bindable]
			private var _requisicao:RequisicaoComponente;
			
			[Bindable]
			private var listaComponente:ArrayCollection = new ArrayCollection;
			
			[Bindable]
			private var listaStatus:ArrayCollection = new ArrayCollection;
			
			[Bindable]
			private var listaUsuario:ArrayCollection = new ArrayCollection;
			
			[Bindable]
			private var listaLaboratorio:ArrayCollection = new ArrayCollection;
			
			[Bindable]
			private var totalComponentes:Number = 0;
			
			private function init():void
			{
				requisicaoComponenteService.listarRequisicao();
				consumidorEstoqueService.subscribe();
			}
			
			private function onMsgEstoque(event:MessageEvent):void{ 
				var globalMessage:GlobalMessage = event.message.body as GlobalMessage;	
				
				if (globalMessage.mensagem==MensagensAplicacao.ESTOQUE_REQUISICAO_CRIADA){
					adicionarRequisicao(globalMessage.conteudo as RequisicaoComponente);
				}
				
				if (globalMessage.mensagem==MensagensAplicacao.ESTOQUE_REQUISICAO_ATUALIZAR){
					adicionarRequisicao(globalMessage.conteudo as RequisicaoComponente);
				}
				if (globalMessage.mensagem==MensagensAplicacao.ATUALIZAR_COMPONENTE_VALIDACAO_QTD_ESTOQUE){
					requisicaoComponenteService.listarRequisicaoEstoque();
				}
			} 
			
//			private function publicarRequisicao(req:RequisicaoComponente, msg:String):void   { 								
//				var message:AsyncMessage = new AsyncMessage();
//				var messageGlobal:GlobalMessage=new GlobalMessage();
//				messageGlobal.mensagem=msg;
//				messageGlobal.conteudo = req;				
//				message.body=messageGlobal;
//				produtorEstoqueService.send(message);	
//			}
//			
//			private function publicarReparo(rep:Reparo, msg:String):void   { 								
//				var message:AsyncMessage = new AsyncMessage();
//				var messageGlobal:GlobalMessage=new GlobalMessage();
//				messageGlobal.mensagem=msg;
//				messageGlobal.conteudo = rep;				
//				message.body=messageGlobal;
//				produtorReparoService.send(message);	
//			}
//
//			
//			private function publicarOrcamento(orc:Orcamento, msg:String):void   { 								
//				var message:AsyncMessage = new AsyncMessage();
//				var messageGlobal:GlobalMessage=new GlobalMessage();
//				messageGlobal.mensagem=msg;
//				messageGlobal.conteudo = orc;				
//				message.body=messageGlobal;
//				produtorOrcamentoService.send(message);	
//			}
			
			public function adicionarRequisicao(req:RequisicaoComponente):void
			{
				var reqAux:RequisicaoComponente = null;
				var encontrou:Boolean = false;
				for(var i:int=0; i<_listaRequisicoes.length; i++){
					reqAux = _listaRequisicoes.getItemAt(i) as RequisicaoComponente; 
					if(reqAux.id == req.id){	
						var orcRepSub:Object = _listaRequisicoes.removeItemAt(i);
						_listaRequisicoes.addItemAt(req,i);
						encontrou = true;
						break;
					}
				}
				if(!encontrou){
					_listaRequisicoes.addItem(req);
				}
				popularFiltros();
				atualizaCombos();
			}
			
			private function onListarRequisicaoResult(event:ResultEvent = null):void
			{
				_listaRequisicoes = event.result as ArrayCollection;
				atualizaTotalComponentes(_listaRequisicoes);
				popularFiltros();
				
			}
			
			private function atualizaTotalComponentes(lista:ArrayCollection):void{
				totalComponentes = 0;
				for each (var req:RequisicaoComponente in lista){
					totalComponentes += req.quantidade;
				}
			}
			
			private function onListarRequisicaoFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[onListarOrdemServicoBaixaExpedicaoFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");		
			}
			
			public function receberMaterial(data:Object=null, event:Event=null):void
			{
				if(data==null && event is ListEvent){
					var event2:ListEvent = event as ListEvent						
					data = _listaRequisicoes.getItemAt(event2.rowIndex);				
				}			
				_requisicao = data as RequisicaoComponente;
				PopupModalController.getInstance().showModalAutenticacaoUsuario(receberMaterialAutenticar);
			}
			
			public function receberMaterialAutenticar(event:UserRegisterNumberModalEvent=null):void{
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr.id == _requisicao.requisitante.id){
					_requisicao.recebidoPor = usr;
					estoqueController.receberMaterial(_requisicao,usr);
				}else{
					dispatchEvent(new MensagemEvent("Você não é o técnico responsável por essa requisição", MessageType.WARNING, 3000));
				}	
			}
			
			private function onReceberMaterialResult(event:ResultEvent = null):void
			{
				var i:int = _listaRequisicoes.getItemIndex(_requisicao);
				_listaRequisicoes.removeItemAt(i);
				_requisicao = event.result as RequisicaoComponente;
				_listaRequisicoes.addItemAt(_requisicao,i);
				
				//publicar requisicao
				Publicador.enviarMensagemEstoque(MensagensAplicacao.ESTOQUE_REQUISICAO_ATUALIZAR,_requisicao);
				//publicarRequisicao(_requisicao,MensagensAplicacao.ESTOQUE_REQUISICAO_ATUALIZAR);
				
				//publicar reparo ou orcamento
				if(_requisicao.reparo){
					Publicador.enviarMensagemReparo(MensagensAplicacao.REPARO_EDITADO,_requisicao.reparo);
					//publicarReparo(_requisicao.reparo, MensagensAplicacao.REPARO_EDITADO);
				}
				
				if(_requisicao.orcamento){
					Publicador.enviarMensagemOrcamento(MensagensAplicacao.ORCAMENTO_EDITADO,_requisicao.orcamento);
					//publicarOrcamento(_requisicao.orcamento, MensagensAplicacao.ORCAMENTO_EDITADO);
				}
				
				dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','MATERIAL_RECEBIDO_SUCESSO'), MessageType.SUCCESS, 10000));	
			}
			
			private function onReceberMaterialFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[onCriarNotaFiscalRemessaExpedicaoFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				if(event.fault.faultString.indexOf("java.lang.Exception") != -1){
					var index:Number = event.fault.faultString.lastIndexOf(":");
					var str:String = event.fault.faultString.substr(index+1);
					//str = str + ". ";
					dispatchEvent(new MensagemEvent(str, MessageType.WARNING, 10000));
				}else{
					dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','MATERIAL_RECEBIDO_ERRO'), MessageType.ERROR, 10000));
				}
			}
			
			
			public function cancelarRequisicao(data:Object=null, event:Event=null):void
			{
				if(data==null && event is ListEvent){
					var event2:ListEvent = event as ListEvent						
					data = _listaRequisicoes.getItemAt(event2.rowIndex);				
				}
				_requisicao = data as RequisicaoComponente;
				PopupModalController.getInstance().showModalAutenticacaoUsuario(cancelarRequisicaoAutenticar);
			}
			
			public function cancelarRequisicaoAutenticar(event:UserRegisterNumberModalEvent=null):void{
				var usr:Usuario = Login.usuarioAutenticado;
				
				if(usr.id == _requisicao.requisitante.id){
					_requisicao.canceladoPor = usr;
					estoqueController.cancelarRequisicao(_requisicao,usr);
				}else{
					dispatchEvent(new MensagemEvent("Você não é o técnico responsável por essa requisição", MessageType.WARNING, 3000));
				}	
			}
			
			private function onCancelarRequisicaoResult(event:ResultEvent = null):void
			{
				var i:int = _listaRequisicoes.getItemIndex(_requisicao);
				_listaRequisicoes.removeItemAt(i);
				_requisicao = event.result as RequisicaoComponente;
				_listaRequisicoes.addItemAt(_requisicao,i);

				//publicar requisicao
				Publicador.enviarMensagemEstoque(MensagensAplicacao.ESTOQUE_REQUISICAO_ATUALIZAR,_requisicao);
				//publicarRequisicao(_requisicao,MensagensAplicacao.ESTOQUE_REQUISICAO_ATUALIZAR);
				
				//publicar reparo ou orcamento
				if(_requisicao.reparo){
					Publicador.enviarMensagemReparo(MensagensAplicacao.REPARO_EDITADO,_requisicao.reparo);
					//publicarReparo(_requisicao.reparo, MensagensAplicacao.REPARO_EDITADO);
				}
				
				if(_requisicao.orcamento){
					Publicador.enviarMensagemOrcamento(MensagensAplicacao.ORCAMENTO_EDITADO,_requisicao.orcamento);
					//publicarOrcamento(_requisicao.orcamento, MensagensAplicacao.ORCAMENTO_EDITADO);
				}

				dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','REQUISICAO_COMPONENTE_CANCELADA_SUCESSO'), MessageType.SUCCESS, 10000));	
			}
			
			private function onCancelarRequisicaoFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[onCriarNotaFiscalRemessaExpedicaoFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				if(event.fault.faultString.indexOf("java.lang.Exception") != -1){
					var index:Number = event.fault.faultString.lastIndexOf(":");
					dispatchEvent(new MensagemEvent(event.fault.faultString.substr(index+1), MessageType.WARNING, 10000));
				}else{
					dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','REQUISICAO_COMPONENTE_CANCELADA_ERRO'), MessageType.ERROR, 10000));
				}
			}
			
			private function popularFiltros():void
			{
				listaComponente.removeAll();
				listaStatus.removeAll();
				listaUsuario.removeAll();
				listaLaboratorio.removeAll();
				for each (var req:RequisicaoComponente in _listaRequisicoes){
					if(!listaComponente.contains(req.componente.nome)){
						listaComponente.addItem(req.componente.nome);
					}
					if(!listaStatus.contains(req.statusString)){
						listaStatus.addItem(req.statusString);
					}
					if(req.requisitante != null && !listaUsuario.contains(req.requisitante.usuario)){
						listaUsuario.addItem(req.requisitante.usuario);
					}
					if(req.reparo && req.reparo.ordemServico && req.reparo.ordemServico.unidade && req.reparo.ordemServico.unidade.laboratorio && !listaLaboratorio.contains(req.reparo.ordemServico.unidade.laboratorio.nome)){
						listaLaboratorio.addItem(req.reparo.ordemServico.unidade.laboratorio.nome);
					}else if(req.orcamento && req.orcamento.ordemServico && req.orcamento.ordemServico.unidade && req.orcamento.ordemServico.unidade.laboratorio && !listaLaboratorio.contains(req.orcamento.ordemServico.unidade.laboratorio.nome)){
						listaLaboratorio.addItem(req.orcamento.ordemServico.unidade.laboratorio.nome);
					}
				}
				
				if(listaComponente.length > 0){
					listaComponente.addItemAt("Todos",0);
					cbComponente.enabled = true;
				}else{
					cbComponente.enabled = false;
				}
				cbComponente.dataProvider = listaComponente;
				
				if(listaStatus.length > 0){
					listaStatus.addItemAt("Todos",0);
					cbStatus.enabled = true;
				}else{
					cbStatus.enabled = false;
				}
				cbStatus.dataProvider = listaStatus;
				
				if(listaUsuario.length > 0){
					listaUsuario.addItemAt("Todos",0);
					cbUsuario.enabled = true;
				}else{
					cbUsuario.enabled = false;
				}
				cbUsuario.dataProvider = listaUsuario;
				
				if(listaLaboratorio.length > 0){
					listaLaboratorio.addItemAt("Todos",0);
					cbLaboratorio.enabled = true;
				}else{
					cbLaboratorio.enabled = false;
				}
				cbLaboratorio.dataProvider = listaLaboratorio;
			}
			
			
			
			public function atualizaCombos(event:Event=null):void{
				_listaRequisicoes.filterFunction = function stateFilterFunc(item:Object):Boolean 
				{
					
					
					var bolComponente:Boolean;
					if(cbComponente.selectedItem == null || cbComponente.selectedItem == "" || cbComponente.selectedItem == 'Todos'){
						bolComponente = true;
					}else{
						bolComponente = item.componente.nome.toLowerCase().indexOf(cbComponente.selectedItem.toLowerCase())==0;
					}
					
					var bolStatus:Boolean;
					if(cbStatus.selectedItem == null || cbStatus.selectedItem == "" || cbStatus.selectedItem == 'Todos'){
						bolStatus = true;
					}else{
						bolStatus = item.statusString.toLowerCase().indexOf(cbStatus.selectedItem.toLowerCase())==0;
					}
					
					var bolUsuario:Boolean;
					if(cbUsuario.selectedItem == null || cbUsuario.selectedItem == "" || cbUsuario.selectedItem == 'Todos'){
						bolUsuario = true;
					}else{
						bolUsuario = item.requisitante != null ? item.requisitante.usuario.toLowerCase().indexOf(cbUsuario.selectedItem.toLowerCase())==0 : false;
					}
					
					var bolLaboratorio:Boolean;
					if(cbLaboratorio.selectedItem == null || cbLaboratorio.selectedItem == "" || cbLaboratorio.selectedItem == 'Todos'){
						bolLaboratorio = true;
					}else{
						if(item.reparo){
							bolLaboratorio = item.reparo.ordemServico.unidade.laboratorio.nome.toLowerCase().indexOf(cbLaboratorio.selectedItem.toLowerCase())==0;
						}else if(item.orcamento){
							bolLaboratorio = item.orcamento.ordemServico.unidade.laboratorio.nome.toLowerCase().indexOf(cbLaboratorio.selectedItem.toLowerCase())==0;
						}else{
							bolLaboratorio = false;
						}
					}
					
					return bolComponente && bolStatus && bolUsuario && bolLaboratorio;
					
				};
				
				_listaRequisicoes.refresh();
				atualizaTotalComponentes(_listaRequisicoes);
			}
			
			private function labelFunction(item:Object, column:DataGridColumn):String
			{
				if((item as RequisicaoComponente).reparo  && (item as RequisicaoComponente).reparo.ordemServico && (item as RequisicaoComponente).reparo.ordemServico.unidade && (item as RequisicaoComponente).reparo.ordemServico.unidade.laboratorio){
					return (item as RequisicaoComponente).reparo.ordemServico.unidade.laboratorio.nome;
				}else if((item as RequisicaoComponente).orcamento && (item as RequisicaoComponente).orcamento.ordemServico && (item as RequisicaoComponente).orcamento.ordemServico.unidade && (item as RequisicaoComponente).orcamento.ordemServico.unidade.laboratorio){
					return (item as RequisicaoComponente).orcamento.ordemServico.unidade.laboratorio.nome;
				}else{
					return "";
				}
			}
			
			private function labelFunction2(item:Object, column:DataGridColumn):String
			{
				if((item as RequisicaoComponente).reparo && (item as RequisicaoComponente).reparo.ordemServico){
					return (item as RequisicaoComponente).reparo.ordemServico.numeroOrdemServico;
				}else if((item as RequisicaoComponente).orcamento && (item as RequisicaoComponente).orcamento.ordemServico){
					return (item as RequisicaoComponente).orcamento.ordemServico.numeroOrdemServico;
				}else{
					return "";
				}
			}
		]]>
	</fx:Script>
	
	
	<mx:HBox width="100%" verticalAlign="bottom" horizontalAlign="left">
		<components:ComboBoxInput id="cbStatus" labelText="Status" change="atualizaCombos" />
		<components:ComboBoxInput id="cbComponente" labelText="Componente" change="atualizaCombos" />
		<components:ComboBoxInput id="cbUsuario" labelText="Usuário" change="atualizaCombos" />
		<components:ComboBoxInput id="cbLaboratorio" labelText="Laboratório" change="atualizaCombos" />
	</mx:HBox>
	
	<mx:VBox width="100%" height="100%" verticalGap="0">
		<grid:MantisTable id="requisicoesTable"
						  width="100%"
						  height="100%"
						  draggableColumns="false"
						  dataProvider="{_listaRequisicoes}"
						  doubleClickEnabled="false"
						  >
			<grid:columns>
				
				<mx:DataGridColumn headerText = "{resourceManager.getString('ApplicationResource','ACTION_COLUMN')}"	
								   draggable="false"	width="125"					 
								   editable="false"
								   sortable="false">
					<mx:itemRenderer>
						<fx:Component>
							<mx:HBox horizontalAlign="center"
									 verticalAlign="middle"
									 >
								<mx:Image source="assets/icons/clock.png"
										  click="parentDocument.receberMaterial(data, event)"
										  buttonMode="true"
										  useHandCursor="true"
										  toolTip="{resourceManager.getString('ApplicationResource','RECEBER_MATERIAL')}"
										  />
								<mx:Image source="assets/icons/package_delete.png"
										  click="parentDocument.cancelarRequisicao(data, event)"
										  buttonMode="true"
										  useHandCursor="true"
										  toolTip="{resourceManager.getString('ApplicationResource','CANCELAR_REQUISICAO')}"
										  />
								
							</mx:HBox>
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
				
				<mx:DataGridColumn headerText = ""							   
								   itemRenderer="components.grid.CheckBoxItemRenderer"
								   headerRenderer="components.grid.CheckBoxItemRenderer"
								   width="40" resizable="false" draggable="false" sortable="false"
								   dataField="isSelected"
								   />
				
				<mx:DataGridColumn id="cStatusRequisicao" 
								   headerText = "{resourceManager.getString('ApplicationResource','STATUS_REQUISICAO')}"
								   dataField = "statusString"
								   width="170"
								   />
				
				<mx:DataGridColumn id="cNumeroRequisicao" width="70"
								   headerText = "{resourceManager.getString('ApplicationResource','NUMERO_REQUISICAO')}"
								   textAlign="center"
								   sortable="false"
								   dataField="id"							   
								   />
				<mx:DataGridColumn id="cNumeroOrdemServico" width="70"
								   headerText = "{resourceManager.getString('ApplicationResource','NUMERO_ORDEM_SERVICO')}"
								   textAlign="center"
								   sortable="false"
								   labelFunction="labelFunction2"						   
								   />
				<mx:DataGridColumn id="cComponente"
								   headerText = "{resourceManager.getString('ApplicationResource','COMPONENTE')}"
								   textAlign="center"
								   sortable="false"
								   dataField="componente.nome"							   
								   />
				
				<mx:DataGridColumn id="cTipo"
								   headerText = "Tipo"
								   textAlign="center"
								   sortable="false"
								   dataField="componente.tipo.nome"							   
								   />
				
				<mx:DataGridColumn id="cEncapsulamento"
								   headerText = "Encapsulamento"
								   textAlign="center"
								   sortable="false"
								   dataField="componente.encapsulamento.nome"							   
								   />
				
				<mx:DataGridColumn id="cQuantidade" width="40"
								   headerText = "{resourceManager.getString('ApplicationResource','QUANTIDADE_ABREVIADO')}"
								   textAlign="center"
								   sortable="false"
								   dataField="quantidade"							   
								   />
				
				<mx:DataGridColumn id="cRequisitante" width="80"
								   headerText = "{resourceManager.getString('ApplicationResource','REQUISITANTE')}"
								   dataField = "requisitante.usuario"
								   />
				
				<mx:DataGridColumn id="cLaboratorio" width="110"
								   headerText = "{resourceManager.getString('ApplicationResource','LABORATORIO')}"
								   labelFunction="labelFunction"
								   />
				
				<mx:DataGridColumn id="cDataRequisicao"  width="130"
								   headerText = "{resourceManager.getString('ApplicationResource','DATA_REQUISICAO_CRIACAO')}"
								   textAlign="center"
								   sortable="false"
								   dataField="dataRequisicaoString"							   
								   />
				
			</grid:columns>
		</grid:MantisTable>
		<mx:HBox paddingTop="10">
			<s:Label text="Total de componentes: {totalComponentes}" fontWeight="bold" fontSize="12"  />
		</mx:HBox>
	</mx:VBox>
	
	
	
	
</mx:VBox>
