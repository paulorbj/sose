<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:components="components.*" width="100%" height="100%"
		 paddingBottom="20" paddingLeft="10" paddingRight="10" paddingTop="10"
		 xmlns:grid="components.grid.*" xmlns:combos="components.combos.*" xmlns:texto="components.textInput.*" xmlns:dc="components.grid.filtros.controles.*"
		 initialize="init()">
	
	<fx:Declarations>
		<mx:RemoteObject concurrency="single" showBusyCursor="true" id="notaFiscalRemessaService" destination="notaFiscalRemessaService" endpoint="{resourceManager.getString('ConfigurationResource','amf')}">			
			<mx:method name="listarOrdemServicoBaixaExpedicao"      
					   fault="onListarOrdemServicoBaixaExpedicaoFault(event)" 
					   result="onListarOrdemServicoBaixaExpedicaoResult(event)"
					   />
			<mx:method name="criarNotaFiscalRemessaExpedicao"      
					   fault="onCriarNotaFiscalRemessaExpedicaoFault(event)" 
					   result="onCriarNotaFiscalRemessaExpedicaoResult(event)"
					   />
			
			<mx:method name="criarPreNotaFiscal"      
					   fault="onSalvarNotaFiscalFault(event)" 
					   result="onSalvarNotaFiscalResult(event)"
					   />
			<mx:method name="editarNotaFiscal"      
					   fault="onEditarNotaFiscalFault(event)" 
					   result="onEditarNotaFiscalResult(event)"
					   />
			<mx:method name="deletarNotaFiscal"      
					   fault="onDeletarNotaFiscalFault(event)" 
					   result="onDeletarNotaFiscalResult(event)"
					   />
			
			<mx:method name="excluirOrdemServico"      
					   fault="onExcluirOrdemServicoFault(event)" 
					   result="onExcluirOrdemServicoResult(event)"
					   />
			<mx:method name="adicionarOrdemServico"      
					   fault="onAdicionarOrdemServicoFault(event)" 
					   result="onAdicionarOrdemServicoResult(event)"
					   />
			
			<mx:method name="buscarPorIdBaixaOS"      
					   fault="onBuscarPorIdFault(event)" 
					   result="onBuscarPorIdResult(event)"
					   />			
		</mx:RemoteObject>
		
		<mx:RemoteObject concurrency="single" showBusyCursor="true" id="expedicaoController" destination="expedicaoController" endpoint="{resourceManager.getString('ConfigurationResource','amf')}">			
			<mx:method name="criarNotaFiscal"      
					   fault="onGerarNotaFiscalFault(event)" 
					   result="onGerarNotaFiscalResult(event)"
					   />
		</mx:RemoteObject>
		
		<mx:Consumer id="consumidorExpedicaoService" destination="ExpedicaoMessageServicePush" message="onMsgExpedicao(event)" />
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import components.PopupModalController;
			import components.events.UserRegisterNumberModalEvent;
			import components.messages.MensagemEvent;
			import components.messages.MessageType;
			
			import entities.GlobalMessage;
			import entities.administrativo.Usuario;
			import entities.administrativo.parceiros.Pessoa;
			import entities.expedicao.NotaFiscalRemessa;
			import entities.recebimento.OrdemServico;
			
			import modules.expedicao.eventos.ExpedicaoEvent;
			import modules.view.Login;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.ListEvent;
			import mx.managers.CursorManager;
			import mx.managers.PopUpManager;
			import mx.messaging.events.MessageEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.validators.Validator;
			
			import utils.GeradorRelatorios;
			import utils.MensagensAplicacao;
			import utils.Publicador;
			
			[Bindable]
			private var _listaOrdemServico:ArrayCollection;
			
			[Bindable]
			private var _ordensServicoSelecionadas:ArrayCollection;
			
			[Bindable]
			private var _ordensServicoNaoSelecionadas:ArrayCollection;
			
			[Bindable]
			private var _notaFiscalRemessa: NotaFiscalRemessa;
			
			private var gr:GeradorRelatorios = new GeradorRelatorios();
			
			private var byteArray:ByteArray;
			
			private var clienteSelecionado:Pessoa;
			
			[Embed(source='/assets/icon_synchronize.png')]
			public static var synchronized:Class;
			[Embed(source='/assets/icon_synchronize_green.png')]
			public static var synchronized_verde:Class;
			
			private var _modalObservacao:ObservacaoModal = new ObservacaoModal();
			
			private var app:SoseFlex = FlexGlobals.topLevelApplication as SoseFlex;
					
			private function init():void
			{
				this.addEventListener(ExpedicaoEvent.COMBO_CLIENTE_POPULADO,onPopular);
				btAtualizar.setStyle("icon", synchronized);
				btAtualizar.enabled = false;
				consumidorExpedicaoService.subscribe();
			}
			
			private function onMsgExpedicao(event:MessageEvent):void{ 
				var globalMessage:GlobalMessage = event.message.body as GlobalMessage;	
				
				if (globalMessage.mensagem==MensagensAplicacao.EXPEDICAO_OS_AGUARDANDO_BAIXA){
					btAtualizar.setStyle("icon", synchronized_verde);
					btAtualizar.enabled = true;
				}
				
				if(globalMessage.mensagem==MensagensAplicacao.ATUALIZAR_BAIXA_NOTA_FISCAL_REMESSA){
					notaFiscalRemessaService.listarOrdemServicoBaixaExpedicao();
					clientes.recarregar();
				}
			} 
			
			public function validarCampos():Boolean {	
				var validatorArr:Array = new Array();
				validatorArr.push(nomeNota.stringValidator);
				
				var validatorErrorArray:Array = Validator.validateAll(validatorArr);;
				var isValidForm:Boolean = validatorErrorArray.length == 0;			
				return isValidForm;
			}
			
			public function validarCamposAdicionar():Boolean {	
				var validatorArr:Array = new Array();
				validatorArr.push(cbNotasFiscais.comboBox.comboValidator);
				
				var validatorErrorArray:Array = Validator.validateAll(validatorArr);;
				var isValidForm:Boolean = validatorErrorArray.length == 0;			
				return isValidForm;
			}
			
			public function validarCamposGerar():Boolean {	
				var validatorArr:Array = new Array();
				validatorArr.push(cbNotasFiscais.comboBox.comboValidator);
				
				var validatorErrorArray:Array = Validator.validateAll(validatorArr);;
				var isValidForm:Boolean = validatorErrorArray.length == 0;	
				
				var isListaOrdemServicoCheia:Boolean = false;
				if(_notaFiscalRemessa != null && _notaFiscalRemessa.ordensServico != null && _notaFiscalRemessa.ordensServico.length > 0){
					isListaOrdemServicoCheia = true;
				}
				
				return isValidForm && isListaOrdemServicoCheia;
			}
			
			private function onNotaFiscalChange(event:Event):void
			{
				_notaFiscalRemessa = cbNotasFiscais.notaFiscalSelecionada;
				if(_notaFiscalRemessa){
					notaFiscalRemessaService.buscarPorIdBaixaOS(_notaFiscalRemessa.id);
				}else{
					dispatchEvent(new MensagemEvent("Selecione uma nota fiscal", MessageType.WARNING, 3000));
				}
				
			}
			
			private function onClienteChange(event:Event):void
			{
				notaFiscalRemessaService.listarOrdemServicoBaixaExpedicao(clientes.clienteSelecionado);
			}
			
			
			
			private function atualizar(event:MouseEvent):void
			{
				btAtualizar.setStyle("icon", synchronized);
				btAtualizar.enabled = false;
				clientes.recarregar();
			}
			
			private function salvar(event:MouseEvent):void
			{
				notaFiscalRemessaService.editarNotaFiscal(_notaFiscalRemessa);	
			}
			
			private function criarPreNotaFiscal(event:MouseEvent):void
			{
				this.currentState = "adicionarPreFatura";
				_notaFiscalRemessa = new NotaFiscalRemessa();
			}
			
			private function deletar(event:MouseEvent):void
			{
				if(validarCamposAdicionar()){
					_notaFiscalRemessa = cbNotasFiscais.notaFiscalSelecionada;
					notaFiscalRemessaService.deletarNotaFiscal(_notaFiscalRemessa);
				}else{
					dispatchEvent(new MensagemEvent("Nenhuma nota fiscal selecionada!", MessageType.WARNING, 3000));
				}
			}
			
			private function exportar(event:MouseEvent):void
			{
				if(_notaFiscalRemessa != null && _notaFiscalRemessa.ordensServico != null && _notaFiscalRemessa.ordensServico.length > 0){
					gr.gerarRelatorio(_notaFiscalRemessa,"relatorioRomaneioExpedicao",_notaFiscalRemessa.ordensServico,onCreateFileResult,onCreateFileFault);
				}else{
					dispatchEvent(new MensagemEvent("Nenhuma informação disponível para gerar o relatório!", MessageType.WARNING, 3000));
				}
			}
			
			private function onCreateFileResult(event:ResultEvent):void
			{
				CursorManager.removeAllCursors();
				byteArray = event.result as ByteArray;
				dispatchEvent(new MensagemEvent("Arquivo criado com sucesso", MessageType.INFO, 3000));
				
				Alert.noLabel = "Não";
				Alert.yesLabel = "Sim"
				var alert:Alert = new Alert();
				alert = Alert.show("Deseja salvar o arquivo?","Download completo",3,this,alertClickHandler);
				PopUpManager.centerPopUp(alert);
				var newY:Number = 180;
				alert.move(alert.x, newY);
			}
			
			private function openHandler(event:Event):void
			{
				//dispatchEvent(new MensagemEvent("Texto openHandler", MessageType.INFO, 3000));
			}
			
			private function alertClickHandler(event:CloseEvent):void
			{
				if (event.detail == Alert.YES)
				{
					gr.saveFile(byteArray,"Romaneio");
				}
				else
				{
					dispatchEvent(new MensagemEvent("Exportação foi cancelada", MessageType.INFO, 3000));
				}
			}
			
			private function onCreateFileFault(event:FaultEvent):void
			{
				// Return the cursor to its original state
				CursorManager.removeAllCursors();
				dispatchEvent(new MensagemEvent("Erro ao criar arquivo", MessageType.ERROR, 3000));
				// Debug output
				trace("[OrdersComponent.handleUsersServicefindAllFault] [" 
					+ event.fault.faultCode + "] " 
					+ event.fault.faultString 
					+ " (" + event.fault.faultDetail +
					")");
			}
			
			private function gerarNotaFiscal(event:MouseEvent=null):void
			{
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					if(validarCamposGerar()){
						expedicaoController.criarNotaFiscal(_notaFiscalRemessa,usr);
					}else{
						dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','ERRO_VALIDACAO'), MessageType.WARNING, 3000));
					}
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(gerarNotaFiscalAutenticar);	
				}
			}
			
			public function gerarNotaFiscalAutenticar(event:UserRegisterNumberModalEvent=null):void{
				gerarNotaFiscal();
			}
			
			private function limpar(event:MouseEvent):void
			{
				_notaFiscalRemessa = null;	
				cbNotasFiscais.comboBox.clean();				
				clientes.recarregar();
			}

			
			private function adicionar(event:MouseEvent):void
			{
				if(validarCamposAdicionar()){
					_ordensServicoNaoSelecionadas = new ArrayCollection();
					_ordensServicoSelecionadas = new ArrayCollection();
					if(_notaFiscalRemessa.ordensServico != null && _notaFiscalRemessa.ordensServico.length > 0){
						clienteSelecionado = (_notaFiscalRemessa.ordensServico.getItemAt(0) as OrdemServico).cliente;
					}
					var osPai:OrdemServico = null;
					for each (var os:OrdemServico in _listaOrdemServico){
						if(os.isSelected){
							if(clienteSelecionado == null){
								clienteSelecionado = os.cliente;
							}else{
								if(clienteSelecionado.id != os.cliente.id){
									dispatchEvent(new MensagemEvent("Não é permitido adicionar os's de clientes diferentes", MessageType.WARNING, 3000));
									clienteSelecionado = null;
									return;
								}
							}
							if(os.unidadePai == null){
								osPai = os;
							}
							_ordensServicoSelecionadas.addItem(os);
							
						}else{
							if(os.unidadePai != null && osPai != null && os.unidadePai.id == osPai.id){
								_ordensServicoSelecionadas.addItem(os);
							}else{
								_ordensServicoNaoSelecionadas.addItem(os);
							}
						}
					}
					
					if(_ordensServicoSelecionadas.length == 0){
						dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','NENHUMA_OS_SELECIONADA'), MessageType.WARNING, 3000));
					}else{
						if(_notaFiscalRemessa.ordensServico == null){
							_notaFiscalRemessa.ordensServico = new ArrayCollection();
						}
						_notaFiscalRemessa.ordensServico.addAll(_ordensServicoSelecionadas);
						notaFiscalRemessaService.adicionarOrdemServico(_notaFiscalRemessa);
						
						_listaOrdemServico = _ordensServicoNaoSelecionadas;
					}
				}else{
					dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','ERRO_VALIDACAO'), MessageType.WARNING, 3000));
				}
				
			}
			
			public function excluir(data:Object, event:Event):void
			{
				var osExcluida:OrdemServico = data as OrdemServico;
				notaFiscalRemessaService.excluirOrdemServico(_notaFiscalRemessa,osExcluida);
				
				if(clientes.clienteSelecionado != null && clientes.clienteSelecionado.id == osExcluida.cliente.id){
					if(_listaOrdemServico != null){
						_listaOrdemServico.addItem(osExcluida);
						
						for each (var os:OrdemServico in _notaFiscalRemessa.ordensServico){
							if(os.unidadePai != null && os.unidadePai.id == osExcluida.id){
								_listaOrdemServico.addItem(os);
							}
						}
						ordenarLista(_listaOrdemServico);
					}	
				}
			}
			
			private function salvarNovaPreExpedicao(event:MouseEvent):void
			{
				if(validarCampos()){
					notaFiscalRemessaService.criarPreNotaFiscal(_notaFiscalRemessa);	
				}else{
					dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','ERRO_VALIDACAO'), MessageType.WARNING, 3000));
				}
			}
			
			public function onSalvarNotaFiscalResult(event:ResultEvent):void
			{
				this.currentState = "normal";
				clienteSelecionado = null;
				_notaFiscalRemessa = event.result as NotaFiscalRemessa;
				if(cbNotasFiscais.comboBox.dataProvider == null){
					cbNotasFiscais.comboBox.dataProvider = new ArrayCollection();
				}
				cbNotasFiscais.comboBox.dataProvider.addItem(_notaFiscalRemessa);
				cbNotasFiscais.notaFiscalSelecionada = _notaFiscalRemessa;
				
				dispatchEvent(new MensagemEvent("Pré nota fiscal criada com sucesso", MessageType.SUCCESS, 3000));
			}
			
			public function onSalvarNotaFiscalFault(event:FaultEvent):void
			{
				CursorManager.removeAllCursors();
				trace("[SalvarNotaFiscalFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				dispatchEvent(new MensagemEvent("Erro ao criar pré nota fiscal", MessageType.ERROR, 3000));
				cancelarNovaPreNotaFiscal();
			}	
			
			public function onBuscarPorIdResult(event:ResultEvent):void
			{
				_notaFiscalRemessa = event.result as NotaFiscalRemessa;	
				clienteSelecionado = null;
				ordenarLista(_notaFiscalRemessa.ordensServico);
			}
			
			public function onBuscarPorIdFault(event:FaultEvent):void
			{
				CursorManager.removeAllCursors();
				trace("[EditarNotaFiscalFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				dispatchEvent(new MensagemEvent("Erro ao buscar pré nota fiscal", MessageType.ERROR, 3000));
			}	
			
			public function onEditarNotaFiscalResult(event:ResultEvent):void
			{
				_notaFiscalRemessa = event.result as NotaFiscalRemessa;	
				dispatchEvent(new MensagemEvent("Nota fiscal salva com sucesso", MessageType.SUCCESS, 3000));
			}
			
			public function onEditarNotaFiscalFault(event:FaultEvent):void
			{
				CursorManager.removeAllCursors();
				trace("[EditarNotaFiscalFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				dispatchEvent(new MensagemEvent("Erro ao salvar nota fiscal", MessageType.ERROR, 3000));
			}	
			
			public function onDeletarNotaFiscalResult(event:ResultEvent):void
			{
				cbNotasFiscais.recarregar();
				_notaFiscalRemessa = null;	
				cbNotasFiscais.comboBox.clean();
				dispatchEvent(new MensagemEvent("Pré nota fiscal deletada com sucesso", MessageType.SUCCESS, 3000));
			}
			
			public function onDeletarNotaFiscalFault(event:FaultEvent):void
			{
				CursorManager.removeAllCursors();
				trace("[DeletarNotaFiscalFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				dispatchEvent(new MensagemEvent("Erro ao deletar pré nota fiscal", MessageType.ERROR, 3000));
			}	
			
			public function onGerarNotaFiscalResult(event:ResultEvent):void
			{
				cbNotasFiscais.notaFiscalSelecionada = null;
				cbNotasFiscais.comboBox.clean();
				_notaFiscalRemessa = event.result as NotaFiscalRemessa;
				
				//if(_listaOrdemServico.length == 0){
					clientes.recarregar();
				//}
				Publicador.enviarMensagemExpedicao(MensagensAplicacao.NOTA_FISCAL_REMESSA_CRIADA,_notaFiscalRemessa);
				_notaFiscalRemessa = null;				
				dispatchEvent(new MensagemEvent("Nota fiscal gerada com sucesso", MessageType.SUCCESS, 3000));
			}
			
			public function onGerarNotaFiscalFault(event:FaultEvent):void
			{
				CursorManager.removeAllCursors();
				trace("[GerarNotaFiscalFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				dispatchEvent(new MensagemEvent("Erro ao gerar nota fiscal", MessageType.ERROR, 3000));
			}	
			
			public function onExcluirOrdemServicoResult(event:ResultEvent):void
			{
				_notaFiscalRemessa = event.result as NotaFiscalRemessa;	
				ordenarLista(_notaFiscalRemessa.ordensServico);
				dispatchEvent(new MensagemEvent("OS excluída com sucesso", MessageType.SUCCESS, 3000));
			}
			
			public function onExcluirOrdemServicoFault(event:FaultEvent):void
			{
				CursorManager.removeAllCursors();
				trace("[ExcluirNotaFiscalFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				dispatchEvent(new MensagemEvent("Erro ao excluir ordem de serviço", MessageType.ERROR, 3000));
			}	
			
			public function onAdicionarOrdemServicoResult(event:ResultEvent):void
			{
				_notaFiscalRemessa = event.result as NotaFiscalRemessa;
				ordenarLista(_notaFiscalRemessa.ordensServico);
				dispatchEvent(new MensagemEvent("OS's adicionadas com sucesso", MessageType.SUCCESS, 3000));
			}
			
			public function onAdicionarOrdemServicoFault(event:FaultEvent):void
			{
				CursorManager.removeAllCursors();
				trace("[ExcluirNotaFiscalFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				dispatchEvent(new MensagemEvent("Erro ao adicionar ordem de serviço", MessageType.ERROR, 3000));
			}	
			
			private function cancelarNovaPreNotaFiscal(event:MouseEvent=null):void
			{
				this.currentState = "normal";
			}
			
			private function onPopular(evento:ExpedicaoEvent):void
			{
				if(clientes.comboBox.dataProvider != null && clientes.comboBox.dataProvider.length > 0){
					notaFiscalRemessaService.listarOrdemServicoBaixaExpedicao(clientes.comboBox.dataProvider.getItemAt(0));
					clientes.clienteSelecionado = clientes.comboBox.dataProvider.getItemAt(0) as Pessoa;
				}
			}
			
			private function onListarOrdemServicoBaixaExpedicaoResult(event:ResultEvent = null):void
			{
				_listaOrdemServico = event.result as ArrayCollection;
				ordenarLista(_listaOrdemServico);
				
			}
			
			private function onListarOrdemServicoBaixaExpedicaoFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[onListarOrdemServicoBaixaExpedicaoFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");		
			}
			
			private function onCriarNotaFiscalRemessaExpedicaoResult(event:ResultEvent = null):void
			{
				_notaFiscalRemessa = event.result as NotaFiscalRemessa;
				Publicador.enviarMensagemExpedicao(MensagensAplicacao.NOTA_FISCAL_REMESSA_CRIADA,_notaFiscalRemessa);
				_listaOrdemServico = _ordensServicoNaoSelecionadas;
				_ordensServicoNaoSelecionadas = new ArrayCollection();
				_ordensServicoSelecionadas = new ArrayCollection();
				dispatchEvent(new MensagemEvent("Nota fiscal de saída criada com sucesso", MessageType.SUCCESS, 10000));	
			}
			
			private function onCriarNotaFiscalRemessaExpedicaoFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[onCriarNotaFiscalRemessaExpedicaoFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");		
			}
			
			public function visualizarDetalhe(data:Object, event:Event):void
			{					
				//for double click
				if(data==null && event is ListEvent){
					var event2:ListEvent = event as ListEvent;						
					data = _listaOrdemServico.getItemAt(event2.rowIndex);				
				}	
				
				showModalObservacao(data as OrdemServico);				
			}
			
			public function showModalObservacao(os:OrdemServico):void {
				_modalObservacao = new ObservacaoModal();
				_modalObservacao.ordemServico = os;
				PopUpManager.addPopUp(_modalObservacao, app, true);
				PopUpManager.centerPopUp(_modalObservacao);
				_modalObservacao.listarObservacoes();
			}
			
			private function labelCondicao(item:Object, column:DataGridColumn):String
			{	
				if(item.reparo){
					var str:String = item.reparo.condicao;
					if(str == "Com condição de reparo"){
						return "Reparado";
					}
					if(str == "Sem condição de reparo"){
						return "Irreparável";
					}
					if(str == "Devolução sem reparo"){
						return "Devolução sem reparo";
					}
				}else if(item.orcamento){ 
					var str:String = item.orcamento.condicao;
					if(str == "Com condição de reparo"){
						return "Reparado";
					}
					if(str == "Sem condição de reparo"){
						return "Irreparável";
					}
					if(str == "Devolução sem reparo"){
						return "Devolução sem reparo";
					}
				}
				return "";
			}
			
			private function labelFunction(item:Object, column:DataGridColumn):String {
				var os:OrdemServico = item as OrdemServico;
				if(os.garantia){
					return "SIM";
				}else{
					return "NÃO";
				}
			}
			
			private function ordenarLista(lista:ArrayCollection):void
			{
				if(lista != null){
					var sortA:Sort = new Sort();
					sortA.fields=[new SortField("osPaiOrdenar",false,false,true),new SortField("osFilhaOrdenar",false,false,true)];
					lista.sort=sortA;
					lista.refresh();
				}
			}
			
			
		]]>
	</fx:Script>
	
	<fx:Binding destination="_notaFiscalRemessa.nome" source="nomeNota.inputText" twoWay="true"/>
	
	
	<mx:states>
		<s:State name="normal"/>
		<s:State name="adicionarPreFatura"/>
	</mx:states>
	
	<mx:HBox verticalAlign="bottom" width="100%">
		<combos:ComboClienteExpedicao id="clientes" labelText="{resourceManager.getString('ApplicationResource','CLIENTES')}" width="200" changeFunction="onClienteChange" />
		
		<mx:Button id="btAtualizar"
				   height="25"
				   icon="@Embed(source='/assets/icon_synchronize.png')"
				   click="atualizar(event)"/>
		
		<combos:ComboNFSaida id="cbNotasFiscais" labelText="Selecione uma pré-nota de saída" width="200" includeIn="normal" required="true" changeFunction="onNotaFiscalChange" />
		
		<texto:TextInput id="nomeNota" includeIn="adicionarPreFatura"  labelText="Apelido da nf" width="20%" required="true"  />
		<mx:Button id="btLimpar"
				   height="25" includeIn="normal" toolTip="Limpar"
				   icon="@Embed(source='/assets/icons/clean.png')"
				   click="limpar(event)"/>
		<mx:Button id="btAdicionar"
				   label="Adicionar"
				   height="25" includeIn="normal"
				   icon="@Embed(source='/assets/icons/add.png')"
				   click="adicionar(event)"/>
		<mx:Button id="btSalvarPreFatura"  includeIn="adicionarPreFatura"
				   label="{resourceManager.getString('ApplicationResource','SALVAR_CONTATO_PROPOSTA')}"
				   height="25" width="10%"
				   icon="@Embed(source='/assets/icons/save.png')"
				   click="salvarNovaPreExpedicao(event)"/>
		<mx:Button id="btCancelarPreFatura" includeIn="adicionarPreFatura"
				   label="{resourceManager.getString('ApplicationResource','CANCELAR_CONTATO_PROPOSTA')}"
				   height="25" width="10%"
				   icon="@Embed(source='/assets/icons/cancel.png')"
				   click="cancelarNovaPreNotaFiscal(event)"/>
		<mx:Button id="btNova"
				   label="Criar nova pré-nota fiscal"
				   height="25" includeIn="normal"
				   icon="@Embed(source='/assets/icons/new.png')"
				   click="criarPreNotaFiscal(event)"/>
	</mx:HBox>
	
	<mx:TitleWindow title="Lista de ordens de serviço - Nº de OSs: {_listaOrdemServico.length}" width="100%" height="98%" >
		<grid:MantisTable id="tabelaListaOs" 
						  width="100%"
						  height="98%"
						  draggableColumns="true" editable="false"
						  dataProvider="{_listaOrdemServico}"
						  doubleClickEnabled="false"
						  >
			<grid:columns>
				
				<!-- CHANGE HERE THE ENTITY COLUMNS -->
				
				<!-- EDIT/REMOVE COLUMNS -->
				
				<mx:DataGridColumn headerText = ""	width=".10"						   
								   itemRenderer="components.grid.CheckBoxItemRendererBaixaExpedicao"
								   headerRenderer="components.grid.CheckBoxItemRendererBaixaExpedicao"
								   resizable="false" draggable="false" sortable="false"
								   dataField="isSelected"
								   />
				
				<dc:DataGridColumnFilter filterRenderer="components.grid.filtros.BeginWithFilterRenderer" id="numeroOs" width=".10"	
								   headerText = "{resourceManager.getString('ApplicationResource','NUMERO_ORDEM_SERVICO')}"
								   textAlign="center"
								   sortable="false"
								   dataField="numeroOrdemServico"							   
								   />
				
				<dc:DataGridColumnFilter filterRenderer="components.grid.filtros.BeginWithFilterRenderer" id="numeroOsPai" width=".10"	
								   headerText = "{resourceManager.getString('ApplicationResource','NUMERO_ORDEM_SERVICO_PAI')}"
								   textAlign="center"
								   sortable="false"
								   dataField="unidadePai.numeroOrdemServico"							   
								   />
				
				<dc:DataGridColumnFilter filterRenderer="components.grid.filtros.RelacionalFilterRenderer" id="diasServilogi" 
								   headerText = "Serv."
								   width=".10" sortable="false" dataField = "tempoNaServilogi"
								   />
				
				<dc:DataGridColumnFilter id="analiseTecnica" width=".10"
								   headerText = "{resourceManager.getString('ApplicationResource','ANALISE_TECNICA')}"
								   labelFunction="labelCondicao"
								   />
				
				<dc:DataGridColumnFilter filterRenderer="components.grid.filtros.BeginWithFilterRenderer" id="unidade" width=".20"	
								   headerText = "{resourceManager.getString('ApplicationResource','UNIDADE')}"
								   textAlign="center"
								   sortable="false"
								   dataField="unidade.nome"							   
								   />
				
				<dc:DataGridColumnFilter filterRenderer="components.grid.filtros.BeginWithFilterRenderer" id="nSerieFabricante" 
								   headerText = "{resourceManager.getString('ApplicationResource','NUMERO_SERIE')}"
								   dataField = "serieFabricante"
								   width=".15"	
								   />
				
				<dc:DataGridColumnFilter filterRenderer="components.grid.filtros.BeginWithFilterRenderer" id="nSerieCliente" 
								   headerText = "{resourceManager.getString('ApplicationResource','NUMERO_CLIENTE')}"
								   dataField = "serieCliente"
								   width=".15"	
								   />
				
				<dc:DataGridColumnFilter filterRenderer="components.grid.filtros.BeginWithFilterRenderer" id="nCaseAvaya" 
								   headerText = "Case avaya"
								   dataField = "caseAvaya"
								   width=".15"	
								   />
				
				<dc:DataGridColumnFilter filterRenderer="components.grid.filtros.BeginWithFilterRenderer" id="nClienteAvaya" 
								   headerText = "Ciente avaya"
								   dataField = "clienteAvaya"
								   width=".15"	
								   />
				
				<dc:DataGridColumnFilter filterRenderer="components.grid.filtros.BeginWithFilterRenderer" id="numeroNF" width=".10"	
								   headerText = "{resourceManager.getString('ApplicationResource','NUMERO_NOTA_FISCAL')}"
								   textAlign="center"
								   sortable="false"
								   dataField="notaFiscal.numero"							   
								   />
				
				<dc:DataGridColumnFilter id="garantia" width=".10"	
								   headerText = "Em garantia"
								   textAlign="center"
								   sortable="false"
								   labelFunction="labelFunction"						   
								   />
				
				<mx:DataGridColumn headerText = "{resourceManager.getString('ApplicationResource','ACTION_COLUMN')}"	
								   draggable="false" width=".10"							 
								   editable="false"
								   sortable="false">
					<mx:itemRenderer>
						<fx:Component>
							<mx:HBox horizontalAlign="center"
									 verticalAlign="middle"
									 >
								
								<mx:Image source="@Embed(source='/assets/icons/edit.png')"
										  click="parentDocument.visualizarDetalhe(data, event)"
										  buttonMode="true"
										  useHandCursor="true"
										  toolTip="Adicionar observação"
										  />						
							</mx:HBox>
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
			</grid:columns>
		</grid:MantisTable>
	</mx:TitleWindow>
	
	
	<mx:TitleWindow title="Pré nota fiscal - Nº de OSs: {_notaFiscalRemessa.ordensServico.length} Frete total proposta: R${_notaFiscalRemessa.totalFreteProposta}" width="100%" height="98%" >
		<grid:MantisTable id="tabelaListaOsPreNotaFiscal"
						  width="100%"
						  height="98%"
						  draggableColumns="true" editable="false"
						  dataProvider="{_notaFiscalRemessa.ordensServico}"
						  doubleClickEnabled="false"
						  >
			<grid:columns>
				
				<dc:DataGridColumnFilter filterRenderer="components.grid.filtros.BeginWithFilterRenderer" id="numeroOs1" width=".10"
								   headerText = "{resourceManager.getString('ApplicationResource','NUMERO_ORDEM_SERVICO')}"
								   textAlign="center"
								   sortable="false"
								   dataField="numeroOrdemServico"							   
								   />
				
				<dc:DataGridColumnFilter filterRenderer="components.grid.filtros.BeginWithFilterRenderer" id="numeroOsPai1" width=".10"
								   headerText = "{resourceManager.getString('ApplicationResource','NUMERO_ORDEM_SERVICO_PAI')}"
								   textAlign="center"
								   sortable="false"
								   dataField="unidadePai.numeroOrdemServico"							   
								   />
				
				<dc:DataGridColumnFilter filterRenderer="components.grid.filtros.RelacionalFilterRenderer" id="diasServilogi1" 
								   headerText = "Serv."
								   width=".10" sortable="false" dataField = "tempoNaServilogi"
								   />
				
				<dc:DataGridColumnFilter id="analiseTecnica1" width=".10"
								   headerText = "{resourceManager.getString('ApplicationResource','ANALISE_TECNICA')}"
								   labelFunction="labelCondicao"
								   />
				
				<dc:DataGridColumnFilter filterRenderer="components.grid.filtros.BeginWithFilterRenderer" id="unidade1" width=".10"
								   headerText = "{resourceManager.getString('ApplicationResource','UNIDADE')}"
								   textAlign="center"
								   sortable="false"
								   dataField="unidade.nome"							   
								   />
				
				<dc:DataGridColumnFilter filterRenderer="components.grid.filtros.BeginWithFilterRenderer" id="nSerieFabricante1" 
								   headerText = "{resourceManager.getString('ApplicationResource','NUMERO_SERIE')}"
								   dataField = "serieFabricante"
								   width=".10"
								   />
				
				<dc:DataGridColumnFilter filterRenderer="components.grid.filtros.BeginWithFilterRenderer" id="nSerieCliente1" 
								   headerText = "{resourceManager.getString('ApplicationResource','NUMERO_CLIENTE')}"
								   dataField = "serieCliente"
								   width=".10"
								   />
				
				<dc:DataGridColumnFilter filterRenderer="components.grid.filtros.BeginWithFilterRenderer" id="nCaseAvaya1" 
								   headerText = "Case avaya"
								   dataField = "caseAvaya"
								   width=".15"	
								   />
				
				<dc:DataGridColumnFilter filterRenderer="components.grid.filtros.BeginWithFilterRenderer" id="nClienteAvaya1" 
								   headerText = "Ciente avaya"
								   dataField = "clienteAvaya"
								   width=".15"	
								   />
				
				<dc:DataGridColumnFilter filterRenderer="components.grid.filtros.BeginWithFilterRenderer" id="numeroNF1" width=".10"
								   headerText = "{resourceManager.getString('ApplicationResource','NUMERO_NOTA_FISCAL')}"
								   textAlign="center"
								   sortable="false"
								   dataField="notaFiscal.numero"							   
								   />
				
				<dc:DataGridColumnFilter id="cGarantia" width=".10"	
								   headerText = "Em garantia"
								   textAlign="center"
								   sortable="false"
								   labelFunction="labelFunction"						   
								   />
				
				<mx:DataGridColumn headerText = "{resourceManager.getString('ApplicationResource','ACTION_COLUMN')}"	
								   draggable="false" width=".10"							 
								   editable="false"
								   sortable="false">
					<mx:itemRenderer>
						<fx:Component>
							<mx:HBox horizontalAlign="center"
									 verticalAlign="middle"
									 >
								
								<mx:Image source="@Embed(source='/assets/icons/delete.png')"
										  click="parentDocument.excluir(data, event)"
										  buttonMode="true" visible="{data.unidadePai == null}"
										  useHandCursor="true"
										  toolTip="Excluir os da nota fiscal"
										  />						
							</mx:HBox>
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
			</grid:columns>
		</grid:MantisTable>
	</mx:TitleWindow>
	<mx:HBox verticalAlign="bottom" width="100%">
		<mx:Button id="btSalvar"
				   label="Salvar"
				   height="25"
				   icon="@Embed(source='/assets/icons/user.png')"
				   click="salvar(event)"/>
		<mx:Button id="btExportar"
				   label="Exportar"
				   height="25"
				   icon="@Embed(source='/assets/icons/user.png')"
				   click="exportar(event)"/>
		<s:Spacer width="50" />
		<mx:Button id="btDeletar"
				   label="Deletar"
				   height="25"
				   icon="@Embed(source='/assets/icons/user.png')"
				   click="deletar(event)"/>
		<s:Spacer width="50" />
		<mx:Button id="btGerarNotaFiscal"
				   label="Gerar Nota fiscal"
				   height="25"
				   icon="@Embed(source='/assets/icons/user.png')"
				   click="gerarNotaFiscal(event)"/>
	</mx:HBox>
	
	
</mx:VBox>
