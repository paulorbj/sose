<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark"  xmlns:dc="components.grid.filtros.controles.*"
		 xmlns:mx="library://ns.adobe.com/flex/mx" initialize="initializeListagem()"
		 xmlns:components="components.*" width="100%" height="100%"
		 xmlns:grid="components.grid.*">
	
	<fx:Declarations>
		
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import components.ConfirmarExclusaoModal;
			import components.RemoveModalEvent;
			
			import entities.administrativo.Defeito;
			
			import modules.administrativo.defeito.eventos.DefeitoEvent;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.events.ListEvent;
			import mx.managers.CursorManager;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			[Bindable]
			private var listaDefeito:ArrayCollection = new ArrayCollection;
			
			private var defeito:Defeito;
			
			[Bindable]
			private var listaDefeitoCompleta:ArrayCollection = new ArrayCollection;
			
			[Bindable]
			private var listaFiltroDefeito:ArrayCollection = new ArrayCollection;
			
			[Bindable]
			private var defeitoSelecionada:String;
			
			private var sortDefeito:mx.collections.Sort;
			
			private function initializeListagem():void
			{
				sortDefeito = new Sort();
				sortDefeito.fields=[new SortField("nome",true,false,false)];
			}
			
			private function sortListaDefeito(lista:ArrayCollection):void
			{
				lista.sort = sortDefeito;
				lista.refresh();
			}
			
			public function setListaDefeito(lista:ArrayCollection):void
			{
				if(lista){
					sortListaDefeito(lista);
					listaDefeito = lista;
					listaDefeitoCompleta = new ArrayCollection();
					listaDefeitoCompleta.addAll(listaDefeito);
				}
			}
			
			public function adicionarDefeito(defeito:Defeito):void
			{
				var defeitoAux:Defeito = null;
				var encontrou:Boolean = false;
				for(var i:int=0; i<listaDefeito.length; i++){
					defeitoAux = listaDefeito.getItemAt(i) as Defeito; 
					if(defeitoAux.id == defeito.id){	
						var orcRepSub:Object = listaDefeito.removeItemAt(i);
						listaDefeito.addItemAt(defeito,i);
						encontrou = true;
						break;
					}
				}
				if(!encontrou){
					listaDefeito.addItem(defeito);
				}
				
				for(var i:int=0; i<listaDefeitoCompleta.length; i++){
					defeitoAux = listaDefeitoCompleta.getItemAt(i) as Defeito; 
					if(defeitoAux.id == defeito.id){	
						var defeitoSub:Object = listaDefeitoCompleta.removeItemAt(i);
						listaDefeitoCompleta.addItemAt(defeito,i);
						encontrou = true;
						break;
					}
				}
				if(!encontrou){
					listaDefeitoCompleta.addItem(defeito);
				}
				
				sortListaDefeito(listaDefeito);
				sortListaDefeito(listaDefeitoCompleta);
			}
			
			public function editItem(data:Object, event:Event, edit:Boolean):void
			{					
				//for double click
				if(data==null && event is ListEvent){
					var event2:ListEvent = event as ListEvent						
					data = listaDefeito.getItemAt(event2.rowIndex);				
				}
				
				dispatchEvent(new DefeitoEvent(DefeitoEvent.EDITAR_DEFEITO, data as Defeito));
			}
			
			public function excluirItem(data:Object, event:Event, edit:Boolean):void
			{			
				defeito = data as Defeito;
				var modal:ConfirmarExclusaoModal=ConfirmarExclusaoModal(PopUpManager.createPopUp( this, ConfirmarExclusaoModal , true));
				modal.addEventListener(RemoveModalEvent.REMOVE_MODAL, excluir);
				PopUpManager.centerPopUp(modal);
				
			}
			
			private function excluir(event:RemoveModalEvent):void
			{
				dispatchEvent(new DefeitoEvent(DefeitoEvent.EXCLUIR_DEFEITO,defeito));
				defeito = null;
			}
			
		]]>
	</fx:Script>	
	
	<grid:MantisTable id="viewTable"
					  width="100%" height="100%"
					  draggableColumns="true"
					  dataProvider="{listaDefeito}"
					  itemDoubleClick="editItem(data, event,false)"	>
		<grid:columns>
			
			<!-- CHANGE HERE THE ENTITY COLUMNS -->
			<dc:DataGridColumnFilter filterRenderer="components.grid.filtros.BeginWithFilterRenderer" id="nome" width=".40"
							   headerText = "{resourceManager.getString('ApplicationResource','NOME_DEFEITO')}"
							   textAlign="center"
							   sortable="false"
							   dataField="nome"							   
							   />
			
			<dc:DataGridColumnFilter filterRenderer="components.grid.filtros.BeginWithFilterRenderer" id="descricao" width=".50" textAlign="center"
							   headerText = "{resourceManager.getString('ApplicationResource','DESCRICAO')}"
							   dataField = "descricao"
							   />
			
			<!-- EDIT/REMOVE COLUMNS -->
			
			<mx:DataGridColumn headerText = "{resourceManager.getString('ApplicationResource','ACTION_COLUMN')}"	
							   draggable="false" width=".10" textAlign="center"							 
							   editable="false"
							   sortable="false">
				<mx:itemRenderer>
					<fx:Component>
						<mx:HBox horizontalAlign="center"
								 verticalAlign="middle"
								 >
							
							<mx:Image source="@Embed(source='/assets/icons/edit.png')"
									  click="parentDocument.editItem(data, event, true)"
									  buttonMode="true"
									  useHandCursor="true"
									  toolTip="{resourceManager.getString('ApplicationResource','EDIT')}"
									  />
							
							<mx:Image source="@Embed(source='/assets/icons/delete.png')"
									  click="parentDocument.excluirItem(data, event, true)"
									  buttonMode="true"
									  useHandCursor="true"
									  toolTip="{resourceManager.getString('ApplicationResource','EXCLUIR')}"
									  />
							
						</mx:HBox>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
		</grid:columns>
	</grid:MantisTable>
	
</mx:VBox>
