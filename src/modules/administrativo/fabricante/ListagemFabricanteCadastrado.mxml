<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" initialize="initializeListagem()"
		 xmlns:mx="library://ns.adobe.com/flex/mx"  width="100%" height="100%"
		 xmlns:components="components.*" 
		 xmlns:grid="components.grid.*">
	
	<fx:Declarations>
		
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import components.ConfirmarExclusaoModal;
			import components.RemoveModalEvent;
			
			import entities.administrativo.Fabricante;
			
			import modules.administrativo.fabricante.eventos.FabricanteEvent;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.events.ListEvent;
			import mx.managers.CursorManager;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			[Bindable]
			private var listaFabricante:ArrayCollection = new ArrayCollection;
			
			private var fabricante:Fabricante;
			
			[Bindable]
			private var listaFabricanteCompleta:ArrayCollection = new ArrayCollection;
			
			[Bindable]
			private var listaFiltroFabricante:ArrayCollection = new ArrayCollection;
			
			[Bindable]
			private var fabricanteSelecionada:String;
			
			private var sortFabricante:mx.collections.Sort;
			
			private function initializeListagem():void
			{
				sortFabricante = new Sort();
				sortFabricante.fields=[new SortField("nome",true,false,false)];
			}
			
			private function sortListaFabricante(lista:ArrayCollection):void
			{
				lista.sort = sortFabricante;
				lista.refresh();
			}
			
			public function setListaFabricante(lista:ArrayCollection):void
			{
				sortListaFabricante(lista);
				listaFabricante = lista;
				listaFabricanteCompleta = new ArrayCollection();
				listaFabricanteCompleta.addAll(listaFabricante);
				popularFiltros();
				atualizaCombos();
			}
			
			public function adicionarFabricante(fabricante:Fabricante):void
			{
				var fabricanteAux:Fabricante = null;
				var encontrou:Boolean = false;
				for(var i:int=0; i<listaFabricante.length; i++){
					fabricanteAux = listaFabricante.getItemAt(i) as Fabricante; 
					if(fabricanteAux.id == fabricante.id){	
						var orcRepSub:Object = listaFabricante.removeItemAt(i);
						listaFabricante.addItemAt(fabricante,i);
						encontrou = true;
						break;
					}
				}
				if(!encontrou){
					listaFabricante.addItem(fabricante);
				}
				
				for(var i:int=0; i<listaFabricanteCompleta.length; i++){
					fabricanteAux = listaFabricanteCompleta.getItemAt(i) as Fabricante; 
					if(fabricanteAux.id == fabricante.id){	
						var fabricanteSub:Object = listaFabricanteCompleta.removeItemAt(i);
						listaFabricanteCompleta.addItemAt(fabricante,i);
						encontrou = true;
						break;
					}
				}
				if(!encontrou){
					listaFabricanteCompleta.addItem(fabricante);
				}
				
				sortListaFabricante(listaFabricante);
				sortListaFabricante(listaFabricanteCompleta);
				
				popularFiltros();
				atualizaCombos();
			}
			
			public function editItem(data:Object, event:Event, edit:Boolean):void
			{					
				//for double click
				if(data==null && event is ListEvent){
					var event2:ListEvent = event as ListEvent						
					data = listaFabricante.getItemAt(event2.rowIndex);				
				}
				
				dispatchEvent(new FabricanteEvent(FabricanteEvent.EDITAR_FABRICANTE, data as Fabricante));
			}
			
			public function excluirItem(data:Object, event:Event, edit:Boolean):void
			{			
				fabricante = data as Fabricante;
				var modal:ConfirmarExclusaoModal=ConfirmarExclusaoModal(PopUpManager.createPopUp( this, ConfirmarExclusaoModal , true));
				modal.addEventListener(RemoveModalEvent.REMOVE_MODAL, excluir);
				PopUpManager.centerPopUp(modal);
				
			}
			
			private function excluir(event:RemoveModalEvent):void
			{
				dispatchEvent(new FabricanteEvent(FabricanteEvent.EXCLUIR_FABRICANTE,fabricante));
				fabricante = null;
			}
			
			
			public function atualizaCombos(event:Event=null):void{
				configurarFiltroLista();
			}
			
			private function configurarFiltroLista():void
			{
				listaFabricante.filterFunction = function stateFilterFunc(item:Object):Boolean 
				{
					var bolFabricante:Boolean;
					if(cbFabricante.selectedItem == null || cbFabricante.selectedItem == "" || cbFabricante.selectedItem == 'Todos'){
						bolFabricante = true;
					}else{
						bolFabricante = item.nome.toLowerCase() == cbFabricante.selectedItem.toLowerCase();
					}
					
					return bolFabricante;
					
				};		
				listaFabricante.refresh();
			}
			
			private function popularFiltros():void
			{
				fabricanteSelecionada = cbFabricante.selectedItem as String;
				listaFiltroFabricante = new ArrayCollection();
				
				for each (var fabricante:Fabricante in listaFabricante){
					listaFiltroFabricante.addItem(fabricante.nome);
				}
				
				
				//Filtro status
				var sortA:Sort = new Sort();
				sortA.fields=[new SortField(null,true,false,false)];
				listaFiltroFabricante.sort=sortA;
				listaFiltroFabricante.refresh();
				listaFiltroFabricante.sort = null;
				listaFiltroFabricante.addItemAt("Todos",0);
				
				cbFabricante.enabled = true;
				cbFabricante.dataProvider = listaFiltroFabricante;
				
				if(listaFiltroFabricante.length > 0){
					if(fabricanteSelecionada){
						cbFabricante.selectedItem = fabricanteSelecionada;
					}
				}
				
				
			}
			
			
		]]>
	</fx:Script>		
	
	<mx:HBox verticalAlign="bottom" width="100%">
		<components:DropBoxInput id="cbFabricante" labelText="Nome" change="atualizaCombos" width="13%" requireSelectionFlag="true" />
	</mx:HBox>	
	
	<grid:MantisTable id="viewTable"
					  width="100%" height="100%"
					  draggableColumns="true"
					  dataProvider="{listaFabricante}"
					  itemDoubleClick="editItem(data, event,false)"	>
		<grid:columns>
			
			<!-- CHANGE HERE THE ENTITY COLUMNS -->
			<mx:DataGridColumn id="nome"
							   headerText = "{resourceManager.getString('ApplicationResource','NOME_FABRICANTE')}"
							   width=".40" textAlign="center"
							   sortable="false"
							   dataField="nome"							   
							   />
			
			<mx:DataGridColumn id="descricao" width=".50" textAlign="center"
							   headerText = "{resourceManager.getString('ApplicationResource','DESCRICAO')}"
							   dataField = "descricao"
							   
							   />
			
			<!-- EDIT/REMOVE COLUMNS -->
			
			<mx:DataGridColumn headerText = "{resourceManager.getString('ApplicationResource','ACTION_COLUMN')}"	
							   draggable="false" width=".10" textAlign="center"						 
							   editable="false"
							   sortable="false">
				<mx:itemRenderer>
					<fx:Component>
						<mx:HBox horizontalAlign="center"
								 verticalAlign="middle"
								 >
							
							<mx:Image source="@Embed(source='/assets/icons/edit.png')"
									  click="parentDocument.editItem(data, event, true)"
									  buttonMode="true"
									  useHandCursor="true"
									  toolTip="{resourceManager.getString('ApplicationResource','EDIT')}"
									  />
							
							<mx:Image source="@Embed(source='/assets/icons/delete.png')"
									  click="parentDocument.excluirItem(data, event, true)"
									  buttonMode="true"
									  useHandCursor="true"
									  toolTip="{resourceManager.getString('ApplicationResource','EXCLUIR')}"
									  />
							
						</mx:HBox>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
		</grid:columns>
	</grid:MantisTable>
	
</mx:VBox>
