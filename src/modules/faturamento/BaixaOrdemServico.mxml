<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" xmlns:dc="components.grid.filtros.controles.*" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%"  height="100%" paddingBottom="20" paddingLeft="10" paddingRight="10" paddingTop="10"
		 xmlns:components="components.*" horizontalAlign="center"
		 xmlns:grid="components.grid.*" xmlns:combos="components.combos.*" xmlns:texto="components.textInput.*"
		 initialize="init()">
	
	<fx:Declarations>
		<mx:RemoteObject id="ordemServicoService" destination="ordemServicoService" requestTimeout="-1" endpoint="{resourceManager.getString('ConfigurationResource','amf')}">			
			<mx:method name="listarOrdemServicoAFaturar"      
					   fault="onListarOrdemServicoAFaturarFault(event)" 
					   result="onListarOrdemServicoAFaturarResult(event)"
					   />
		</mx:RemoteObject>
		
		<mx:RemoteObject id="relatorioService" destination="relatorioService" requestTimeout="600" endpoint="{resourceManager.getString('ConfigurationResource','amf')}">			
			<mx:method name="gerarRelatorio"      
					   fault="onCreateFileFault(event)" 
					   result="onCreateFileResult(event)"
					   />
		</mx:RemoteObject>
		
		<mx:RemoteObject id="faturamentoController" destination="faturamentoController" endpoint="{resourceManager.getString('ConfigurationResource','amf')}">			
			<mx:method name="criarFatura"      
					   fault="onGerarFaturaFault(event)" 
					   result="onGerarFaturaResult(event)"
					   />
		</mx:RemoteObject>
		
		<mx:RemoteObject id="faturamentoService" destination="faturamentoService" requestTimeout="-1" endpoint="{resourceManager.getString('ConfigurationResource','amf')}">			
			<mx:method name="salvarFaturamento"      
					   fault="onSalvarFaturaFault(event)" 
					   result="onSalvarFaturaResult(event)"
					   />
			<mx:method name="criarPreFatura"      
					   fault="onSalvarFaturaFault(event)" 
					   result="onSalvarFaturaResult(event)"
					   />
			<mx:method name="editarFaturamento"      
					   fault="onEditarFaturaFault(event)" 
					   result="onEditarFaturaResult(event)"
					   />
			<mx:method name="deletarFaturamento"      
					   fault="onDeletarFaturaFault(event)" 
					   result="onDeletarFaturaResult(event)"
					   />
			<mx:method name="gerarFaturamento"      
					   fault="onGerarFaturaFault(event)" 
					   result="onGerarFaturaResult(event)"
					   />
			<mx:method name="excluirOrdemServico"      
					   fault="onExcluirOrdemServicoFault(event)" 
					   result="onExcluirOrdemServicoResult(event)"
					   />
			
			<mx:method name="adicionarOrdemServico"      
					   fault="onAdicionarOrdemServicoFault(event)" 
					   result="onAdicionarOrdemServicoResult(event)"
					   />
			
			<mx:method name="faturamentoOrdemServico"      
					   fault="onExcluirOrdemServicoFault(event)" 
					   result="onExcluirOrdemServicoResult(event)"
					   />
			<mx:method name="buscarPorId"      
					   fault="onBuscarPorIdFault(event)" 
					   result="onBuscarPorIdResult(event)"
					   />
		</mx:RemoteObject>
		
		<mx:Consumer id="consumidorFaturamentoService" destination="FaturamentoMessageServicePush" message="onMsgFaturamento(event)" />
		
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import components.messages.MensagemEvent;
			import components.messages.MessageType;
			
			import entities.GlobalMessage;
			import entities.administrativo.parceiros.Pessoa;
			import entities.faturamento.Faturamento;
			import entities.proposta.Proposta;
			import entities.recebimento.OrdemServico;
			
			import modules.proposta.eventos.PropostaEvent;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.ListEvent;
			import mx.formatters.DateFormatter;
			import mx.managers.CursorManager;
			import mx.managers.PopUpManager;
			import mx.messaging.events.MessageEvent;
			import mx.messaging.messages.AsyncMessage;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.validators.Validator;
			
			import utils.Formatador;
			import utils.GeradorRelatorios;
			import utils.MensagensAplicacao;
			import utils.Publicador;
			
			[Bindable]
			private var _listaOrdemServico:ArrayCollection;
			
			[Bindable]
			private var _ordensServicoSelecionadas:ArrayCollection;
			
			[Bindable]
			private var _ordensServicoNaoSelecionadas:ArrayCollection;
			
			[Bindable]
			private var _faturamento:Faturamento;
			
			[Bindable]
			private var _ordemServico:OrdemServico;
			
			private var byteArray:ByteArray;
			
			private var fileRef:FileReference;
			
			private var sortListagem:Sort;
			
			private function initializeListagem():void
			{
				sortListagem = new Sort();
				sortListagem.fields=[new SortField("nomeCliente",false,false,false),new SortField("numeroOrdemServico",false,false,true)];
			}			
			
			private function init():void
			{
				fileRef = new FileReference();
				fileRef.addEventListener(Event.OPEN, openHandler);
				initializeListagem();
			}
			
			
			private function onMsgFaturamento(event:MessageEvent):void{ 
				//				var globalMessage:GlobalMessage = event.message.body as GlobalMessage;	
				//				
				//				if (globalMessage.mensagem==MensagensAplicacao.EXPEDICAO_OS_AGUARDANDO_BAIXA){
				//					btAtualizar.setStyle("icon", synchronized_verde);
				//					btAtualizar.enabled = true;
				//				}
			} 
			
			public function validarCampos():Boolean {	
				var validatorArr:Array = new Array();
				validatorArr.push(nomeFatura.stringValidator);
				
				var validatorErrorArray:Array = Validator.validateAll(validatorArr);;
				var isValidForm:Boolean = validatorErrorArray.length == 0;			
				return isValidForm;
			}
			
			public function validarCamposAdicionar():Boolean {	
				var validatorArr:Array = new Array();
				validatorArr.push(cbFaturas.comboBox.comboValidator);
				
				var validatorErrorArray:Array = Validator.validateAll(validatorArr);;
				var isValidForm:Boolean = validatorErrorArray.length == 0;			
				return isValidForm;
			}
			
			public function validarCamposGerar():Boolean {	
				var validatorArr:Array = new Array();
				validatorArr.push(cbFaturas.comboBox.comboValidator);
				
				var validatorErrorArray:Array = Validator.validateAll(validatorArr);;
				var isValidForm:Boolean = validatorErrorArray.length == 0;	
				
				var isListaOrdemServicoCheia:Boolean = false;
				if(_faturamento != null && _faturamento.listaOrdemServico != null && _faturamento.listaOrdemServico.length > 0){
					isListaOrdemServicoCheia = true;
				}
				
				return isValidForm && isListaOrdemServicoCheia;
			}
			
			public function validarCamposPesquisa():Boolean {	
				var validatorArr:Array = new Array();
				validatorArr.push(cbCliente.comboBox.comboValidator);
				validatorArr.push(dataDe.stringValidator);
				validatorArr.push(dataAte.stringValidator);
				
				var validatorErrorArray:Array = Validator.validateAll(validatorArr);;
				var isValidForm:Boolean = validatorErrorArray.length == 0;			
				return isValidForm;
			}
			
			private function onListarOrdemServicoAFaturarResult(event:ResultEvent = null):void
			{
				_listaOrdemServico = event.result as ArrayCollection;
				_listaOrdemServico.sort = sortListagem;
				_listaOrdemServico.refresh();
			}
			
			private function onListarOrdemServicoAFaturarFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[onListarOrdemServicoBaixaExpedicaoFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");		
			}
			
			
			public function visualizarDetalhe(data:Object, event:Event):void
			{					
				//for double click
				if(data==null && event is ListEvent){
					var event2:ListEvent = event as ListEvent;						
					data = _listaOrdemServico.getItemAt(event2.rowIndex);				
				}	
				
			}
			
			private function onFaturaChange(event:Event):void
			{
				_faturamento = cbFaturas.faturaSelecionada;
				faturamentoService.channelSet = parentApplication.channelSet;
				faturamentoService.showBusyCursor = true;
				faturamentoService.buscarPorId(_faturamento.id);
			}
			
			private function atualizar(event:MouseEvent):void
			{
				
			}
			
			private function pesquisar(event:MouseEvent):void
			{
				if(validarCamposPesquisa()){
					ordemServicoService.showBusyCursor = true;
					ordemServicoService.channelSet = parentApplication.channelSet;
					ordemServicoService.listarOrdemServicoAFaturar(cbCliente.clienteSelecionado,dataDe.inputDate,dataAte.inputDate);
				}else{
					dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','ERRO_VALIDACAO'), MessageType.WARNING, 3000));
				}
			}
			
			private function salvar(event:MouseEvent):void
			{
				faturamentoService.channelSet = parentApplication.channelSet;
				faturamentoService.showBusyCursor = true;
				faturamentoService.editarFaturamento(_faturamento);	
			}
			
			private function criarPreFatura(event:MouseEvent):void
			{
				this.currentState = "adicionarPreFatura";
				_faturamento = new Faturamento();
			}
			
			private function deletar(event:MouseEvent):void
			{
				if(validarCamposAdicionar()){
					//					_faturamento = cbFaturas.faturaSelecionada;
					faturamentoService.channelSet = parentApplication.channelSet;
					faturamentoService.showBusyCursor = true;
					faturamentoService.deletarFaturamento(_faturamento);
				}else{
					dispatchEvent(new MensagemEvent("Nenhuma fatura selecionada!", MessageType.WARNING, 3000));
				}
			}
			
			private function exportar(event:MouseEvent):void
			{
				if(_faturamento != null && _faturamento.listaOrdemServico != null && _faturamento.listaOrdemServico.length > 0){
					relatorioService.channelSet = parentApplication.channelSet;
					relatorioService.showBusyCursor = true;
					relatorioService.gerarRelatorio(_faturamento, "relatorioConferenciaFaturamento",_faturamento.listaOrdemServico);
				}else{
					dispatchEvent(new MensagemEvent("Nenhuma informação disponível para gerar o relatório!", MessageType.WARNING, 3000));
				}
			}
			
			private function onCreateFileResult(event:ResultEvent):void
			{
				CursorManager.removeAllCursors();
				byteArray = event.result as ByteArray;
				dispatchEvent(new MensagemEvent("Arquivo criado com sucesso", MessageType.INFO, 3000));
				
				Alert.noLabel = "Não";
				Alert.yesLabel = "Sim"
				var alert:Alert = new Alert();
				alert = Alert.show("Deseja salvar o arquivo?","Download completo",3,this,alertClickHandler);
				PopUpManager.centerPopUp(alert);
				var newY:Number = 180;
				alert.move(alert.x, newY);
			}
			
			private function openHandler(event:Event):void
			{
				//dispatchEvent(new MensagemEvent("Texto openHandler", MessageType.INFO, 3000));
			}
			
			public static function getFormattedDateToWriteFile(date:Date):String
			{
				var date:Date = date;
				var dateF:DateFormatter = new DateFormatter();
				dateF.formatString = "DDMMYYYY - LLNNSS";
				return dateF.format(date);
			}
			
			private function alertClickHandler(event:CloseEvent):void
			{
				if (event.detail == Alert.YES)
				{
					fileRef.save(byteArray, "Relatório faturamento " + getFormattedDateToWriteFile(new Date()) +".xls");
					
				}
				else
				{
					dispatchEvent(new MensagemEvent("Exportação foi cancelada", MessageType.INFO, 3000));
				}
			}
			
			private function onCreateFileFault(event:FaultEvent):void
			{
				// Return the cursor to its original state
				CursorManager.removeAllCursors();
				dispatchEvent(new MensagemEvent("Texto onCreateFileFault", MessageType.INFO, 3000));
				// Debug output
				trace("[OrdersComponent.handleUsersServicefindAllFault] [" 
					+ event.fault.faultCode + "] " 
					+ event.fault.faultString 
					+ " (" + event.fault.faultDetail +
					")");
			}
			
			private function gerarFatura(event:MouseEvent):void
			{
				if(validarCamposGerar()){
					faturamentoController.criarFatura(_faturamento,null);
				}else{
					dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','ERRO_VALIDACAO'), MessageType.WARNING, 3000));
				}
				
			}
			
			private function adicionar(event:MouseEvent):void
			{
				if(validarCamposAdicionar()){
					_ordensServicoNaoSelecionadas = new ArrayCollection();
					_ordensServicoSelecionadas = new ArrayCollection();
					for each (var os:OrdemServico in _listaOrdemServico){
						if(os.isSelected){
							_ordensServicoSelecionadas.addItem(os);
						}else{
							_ordensServicoNaoSelecionadas.addItem(os);
						}
					}
					
					
					if(_ordensServicoSelecionadas.length == 0){
						dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','NENHUMA_OS_SELECIONADA'), MessageType.WARNING, 3000));
					}else{
						_ordensServicoSelecionadas.sort = sortListagem;
						_ordensServicoSelecionadas.refresh();
						_faturamento.listaOrdemServico.addAll(_ordensServicoSelecionadas);
						faturamentoService.channelSet = parentApplication.channelSet;
						faturamentoService.showBusyCursor = true;
						faturamentoService.adicionarOrdemServico(_faturamento);
						_listaOrdemServico = _ordensServicoNaoSelecionadas;
					}
				}else{
					dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','ERRO_VALIDACAO'), MessageType.WARNING, 3000));
				}
				
			}
			
			public function excluir(data:Object, event:Event):void
			{
				var osExcluida:OrdemServico = data as OrdemServico;
				faturamentoService.channelSet = parentApplication.channelSet;
				faturamentoService.showBusyCursor = true;
				faturamentoService.excluirOrdemServico(_faturamento,osExcluida);
				
				if(cbCliente.clienteSelecionado != null && cbCliente.clienteSelecionado.id == osExcluida.cliente.id){
					if(_listaOrdemServico != null)
						_listaOrdemServico.addItem(osExcluida);
				}
			}
			
			private function salvarNovaPreFatura(event:MouseEvent):void
			{
				if(validarCampos()){
					faturamentoService.channelSet = parentApplication.channelSet;
					faturamentoService.showBusyCursor = true;
					_faturamento.cliente = cbCliente.clienteSelecionado;
					faturamentoService.criarPreFatura(_faturamento);	
				}else{
					dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','ERRO_VALIDACAO'), MessageType.WARNING, 3000));
				}
			}
			
			public function onSalvarFaturaResult(event:ResultEvent):void
			{
				this.currentState = "normal";
				
				_faturamento = event.result as Faturamento;
				cbFaturas.comboBox.dataProvider.addItem(_faturamento);
				cbFaturas.faturaSelecionada = _faturamento;
				
				dispatchEvent(new MensagemEvent("Pré-fatura criada com sucesso", MessageType.SUCCESS, 3000));
			}
			
			public function onSalvarFaturaFault(event:FaultEvent):void
			{
				CursorManager.removeAllCursors();
				trace("[SalvarFaturaFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				dispatchEvent(new MensagemEvent("Erro ao criar pré-fatura", MessageType.ERROR, 3000));
				cancelarNovaPreFatura();
			}	
			
			public function onBuscarPorIdResult(event:ResultEvent):void
			{
				_faturamento = event.result as Faturamento;	
				if(_faturamento.listaOrdemServico != null && _faturamento.listaOrdemServico.length > 0){
					_faturamento.listaOrdemServico.sort = sortListagem;
					_faturamento.listaOrdemServico.refresh();
				}
			}
			
			public function onBuscarPorIdFault(event:FaultEvent):void
			{
				CursorManager.removeAllCursors();
				trace("[EditarFaturaFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				dispatchEvent(new MensagemEvent("Erro ao carregar pré-fatura", MessageType.ERROR, 3000));
			}	
			
			public function onEditarFaturaResult(event:ResultEvent):void
			{
				_faturamento = event.result as Faturamento;	
				if(_faturamento.listaOrdemServico != null && _faturamento.listaOrdemServico.length > 0){
					_faturamento.listaOrdemServico.sort = sortListagem;
					_faturamento.listaOrdemServico.refresh();
				}
				dispatchEvent(new MensagemEvent("Pré-fatura salva com sucesso", MessageType.SUCCESS, 3000));
			}
			
			public function onEditarFaturaFault(event:FaultEvent):void
			{
				CursorManager.removeAllCursors();
				trace("[EditarFaturaFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				dispatchEvent(new MensagemEvent("Erro ao salvar pré-fatura", MessageType.ERROR, 3000));
			}	
			
			public function onDeletarFaturaResult(event:ResultEvent):void
			{
				cbFaturas.limpar();
				cbFaturas.recarregar();
				_faturamento = event.result as Faturamento;
				if(cbCliente.clienteSelecionado && cbCliente.clienteSelecionado.id == _faturamento.cliente.id){
					if(_faturamento.listaOrdemServico != null && _faturamento.listaOrdemServico.length > 0)
						_listaOrdemServico.addAll(_faturamento.listaOrdemServico);
				}
				_faturamento = null;	
				dispatchEvent(new MensagemEvent("Pré-fatura deletada com sucesso", MessageType.SUCCESS, 3000));
			}
			
			public function onDeletarFaturaFault(event:FaultEvent):void
			{
				CursorManager.removeAllCursors();
				trace("[DeletarFaturaFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				dispatchEvent(new MensagemEvent("Erro ao deletar pré-fatura", MessageType.ERROR, 3000));
			}	
			
			public function onGerarFaturaResult(event:ResultEvent):void
			{
				cbFaturas.limpar();
				cbFaturas.recarregar();				
				_faturamento = event.result as Faturamento;
				Publicador.enviarMensagemFaturamento(MensagensAplicacao.FATURA_CRIADA, _faturamento);
				_faturamento = null;	
				//Publicar a fatura gerada para a listagem de fatura
				dispatchEvent(new MensagemEvent("Fatura gerada com sucesso", MessageType.SUCCESS, 3000));
			}
			
			public function onGerarFaturaFault(event:FaultEvent):void
			{
				CursorManager.removeAllCursors();
				trace("[DeletarFaturaFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				dispatchEvent(new MensagemEvent("Erro ao gerar fatura", MessageType.ERROR, 3000));
			}	
			
			public function onAdicionarOrdemServicoResult(event:ResultEvent):void
			{
				_faturamento = event.result as Faturamento;	
				dispatchEvent(new MensagemEvent("OS's adicionadas com sucesso", MessageType.SUCCESS, 3000));
			}
			
			public function onAdicionarOrdemServicoFault(event:FaultEvent):void
			{
				CursorManager.removeAllCursors();
				trace("[DeletarFaturaFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				dispatchEvent(new MensagemEvent("Erro ao adicionar ordem de serviço", MessageType.ERROR, 3000));
			}	
			
			public function onExcluirOrdemServicoResult(event:ResultEvent):void
			{
				_faturamento = event.result as Faturamento;	
				dispatchEvent(new MensagemEvent("OS excluída com sucesso", MessageType.SUCCESS, 3000));
			}
			
			public function onExcluirOrdemServicoFault(event:FaultEvent):void
			{
				CursorManager.removeAllCursors();
				trace("[DeletarFaturaFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				dispatchEvent(new MensagemEvent("Erro ao excluir ordem de serviço", MessageType.ERROR, 3000));
			}	
			
			private function cancelarNovaPreFatura(event:MouseEvent=null):void
			{
				this.currentState = "normal";
			}
			
			private function labelCondicao(item:Object, column:DataGridColumn):String
			{	
				if(item.reparo){
					var str:String = item.reparo.condicao;
					if(str == "Com condição de reparo"){
						return "Reparado";
					}
					if(str == "Sem condição de reparo"){
						return "Irreparável";
					}
					if(str == "Devolução sem reparo"){
						return "Devolução sem reparo";
					}
				}else if(item.orcamento){	
					var str:String = item.orcamento.condicao;
					if(str == "Com condição de reparo"){
						return "Reparado";
					}
					if(str == "Sem condição de reparo"){
						return "Irreparável";
					}
					if(str == "Devolução sem reparo"){
						return "Devolução sem reparo";
					}
				}
				return "";
			}
			
			private function labelFunctionSistema(item:Object, column:DataGridColumn):String {
				var os:OrdemServico = item as OrdemServico;
				return Formatador.formatarValorNumber(os.valorSistema);
			}
			
			private function valorFreteFunction(item:Object, column:DataGridColumn):String {
				var os:OrdemServico = item as OrdemServico;
				if(os.freteUnitarioExpedicao > os.freteUnitarioProposta){
					return Formatador.formatarValorNumber(os.freteUnitarioExpedicao);
				}else{
					return Formatador.formatarValorNumber(os.freteUnitarioProposta);
				}
				
			}
			
			private function labelFunctionFaturado(item:Object, column:DataGridColumn):String {
				var os:OrdemServico = item as OrdemServico;
				return Formatador.formatarValorNumber(os.valorFaturado);
			}
			
			
			
		]]>
	</fx:Script>
	
	<fx:Binding destination="_faturamento.nome" source="nomeFatura.inputText" twoWay="true"/>
	
	
	<mx:states>
		<s:State name="normal"/>
		<s:State name="adicionarPreFatura"/>
	</mx:states>
	
	<mx:HBox verticalAlign="bottom" width="100%">
		<combos:ComboCliente id="cbCliente" labelText="Cliente" width="200" required="true"  />
		<components:DataInput id="dataDe" required="true" labelText="{resourceManager.getString('ApplicationResource','DATA_DE')}" width="10%" inputHeight="20" />
		<components:DataInput id="dataAte" required="true" labelText="{resourceManager.getString('ApplicationResource','DATA_ATE')}" width="10%" inputHeight="20" />
		<mx:Button id="btPesquisar"
				   label="Pesquisar"
				   height="25"
				   icon="@Embed(source='/assets/icons/user.png')"
				   click="pesquisar(event)"/>
		
		<combos:ComboPreFatura id="cbFaturas" labelText="Selecione uma pré-fatura" width="200" includeIn="normal" required="true" changeFunction="onFaturaChange" />
		
		<texto:TextInput id="nomeFatura" includeIn="adicionarPreFatura"  labelText="Apelido da fatura" width="20%" required="true"  />
		
		<mx:Button id="btAdicionar"
				   label="Adicionar"
				   height="25" includeIn="normal"
				   icon="@Embed(source='/assets/icons/user.png')"
				   click="adicionar(event)"/>
		<mx:Button id="btSalvarPreFatura"  includeIn="adicionarPreFatura"
				   label="{resourceManager.getString('ApplicationResource','SALVAR_CONTATO_PROPOSTA')}"
				   height="25" width="10%"
				   icon="@Embed(source='/assets/icons/save.png')"
				   click="salvarNovaPreFatura(event)"/>
		<mx:Button id="btCancelarPreFatura" includeIn="adicionarPreFatura"
				   label="{resourceManager.getString('ApplicationResource','CANCELAR_CONTATO_PROPOSTA')}"
				   height="25" width="10%"
				   icon="@Embed(source='/assets/icons/cancel.png')"
				   click="cancelarNovaPreFatura(event)"/>
		<mx:Button id="btNova"
				   label="Criar nova pré-fatura"
				   height="25" includeIn="normal"
				   icon="@Embed(source='/assets/icons/user.png')"
				   click="criarPreFatura(event)"/>
	</mx:HBox>
	
	<mx:TitleWindow title="Lista de ordens de serviço - Nº de OSs: {_listaOrdemServico.length}" width="100%" height="98%" >
		<grid:MantisTable id="tabelaListaOs"
						  width="100%"
						  height="98%"
						  draggableColumns="true" editable="false"
						  dataProvider="{_listaOrdemServico}"
						  doubleClickEnabled="false"
						  >
			<grid:columns>
				
				<!-- CHANGE HERE THE ENTITY COLUMNS -->
				
				<!-- EDIT/REMOVE COLUMNS -->
				
				<mx:DataGridColumn headerText = ""	width=".05"						   
								   itemRenderer="components.grid.CheckBoxItemRenderer"
								   headerRenderer="components.grid.CheckBoxItemRenderer"
								   resizable="false" draggable="false" sortable="false"
								   dataField="isSelected"
								   />
				
				
				<dc:DataGridColumnFilter filterRenderer="components.grid.filtros.BeginWithFilterRenderer" id="numeroNF" width=".10"
								   headerText = "{resourceManager.getString('ApplicationResource','NUMERO_NOTA_FISCAL')}"
								   textAlign="center"
								   sortable="false"
								   dataField="notaFiscal.numero"							   
								   />
				
				<dc:DataGridColumnFilter filterRenderer="components.grid.filtros.BeginWithFilterRenderer" id="cCliente" width=".10"
								   headerText = "Cliente"
								   textAlign="center"
								   sortable="false"
								   dataField="cliente.nomeSistema"							   
								   />
				
				<dc:DataGridColumnFilter filterRenderer="components.grid.filtros.BeginWithFilterRenderer" id="numeroOs" width=".10"
								   headerText = "{resourceManager.getString('ApplicationResource','NUMERO_ORDEM_SERVICO')}"
								   textAlign="center"
								   sortable="false"
								   dataField="numeroOrdemServico"							   
								   />
				
				<dc:DataGridColumnFilter filterRenderer="components.grid.filtros.BeginWithFilterRenderer" id="numeroNFSaida" width=".10"
								   headerText = "Nº NF Saída"
								   textAlign="center"
								   sortable="false"
								   dataField="notaFiscalSaida.numero"							   
								   />
				
				<dc:DataGridColumnFilter filterRenderer="components.grid.filtros.BeginWithFilterRenderer" id="unidade" width=".10"
								   headerText = "{resourceManager.getString('ApplicationResource','UNIDADE')}"
								   textAlign="center"
								   sortable="false"
								   dataField="unidade.nome"							   
								   />
				
				<dc:DataGridColumnFilter  id="analiseTecnica" width=".10"
								   headerText = "{resourceManager.getString('ApplicationResource','ANALISE_TECNICA')}"
								   labelFunction="labelCondicao"
								   />
				
				<dc:DataGridColumnFilter  id="origemFaturamento" width=".10" textAlign="center"
								   headerText = "Origem"
								   dataField = "origemFaturamento"
								   />
				
				<mx:DataGridColumn id="valorSistema" width=".10" textAlign="center"
								   headerText = "Valor Sistema"
								   labelFunction="labelFunctionSistema"
								   />
				
				<mx:DataGridColumn id="valorFaturado" width=".10" textAlign="center"
								   headerText = "Valor Faturado" 
								   labelFunction="labelFunctionFaturado"
								   />

				<mx:DataGridColumn headerText = "{resourceManager.getString('ApplicationResource','ACTION_COLUMN')}"	
								   draggable="false" width=".05"							 
								   editable="false"
								   sortable="false">
					<mx:itemRenderer>
						<fx:Component>
							<mx:HBox horizontalAlign="center"
									 verticalAlign="middle"
									 >
								
								<mx:Image source="@Embed(source='/assets/icons/edit.png')"
										  click="parentDocument.visualizarDetalhe(data, event)"
										  buttonMode="true"
										  useHandCursor="true"
										  toolTip="{resourceManager.getString('ApplicationResource','EDIT')}"
										  />						
							</mx:HBox>
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
			</grid:columns>
		</grid:MantisTable>
	</mx:TitleWindow>
	
	
	<mx:TitleWindow title="Pré faturamento - Nº de OSs: {_faturamento.listaOrdemServico.length} Total frete: R${_faturamento.totalFrete.toFixed(2)}" width="100%" height="98%" >
		<grid:MantisTable id="tabelaListaOsPreFatura"
						  width="100%"
						  height="98%" 
						  draggableColumns="true" editable="true"
						  dataProvider="{_faturamento.listaOrdemServico}"
						  doubleClickEnabled="false"
						  >
			<grid:columns>
				
				<dc:DataGridColumnFilter filterRenderer="components.grid.filtros.BeginWithFilterRenderer" id="numeroNF1" width=".10"
								   headerText = "{resourceManager.getString('ApplicationResource','NUMERO_NOTA_FISCAL')}"
								   textAlign="center" editable="false"
								   sortable="false"
								   dataField="notaFiscal.numero"							   
								   />
				
				<dc:DataGridColumnFilter filterRenderer="components.grid.filtros.BeginWithFilterRenderer" id="cCliente1" width=".10"
								   headerText = "Cliente" editable="false"
								   textAlign="center"
								   sortable="false"
								   dataField="cliente.nomeSistema"							   
								   />
				
				<dc:DataGridColumnFilter filterRenderer="components.grid.filtros.BeginWithFilterRenderer" id="numeroOs1" width=".10"
								   headerText = "{resourceManager.getString('ApplicationResource','NUMERO_ORDEM_SERVICO')}"
								   textAlign="center" editable="false"
								   sortable="false"
								   dataField="numeroOrdemServico"							   
								   />
				
				<dc:DataGridColumnFilter filterRenderer="components.grid.filtros.BeginWithFilterRenderer" id="numeroNFSaida1" width=".10"
								   headerText = "Nº NF Saída"
								   textAlign="center" editable="false"
								   sortable="false"
								   dataField="notaFiscalSaida.numero"							   
								   />
				
				<dc:DataGridColumnFilter filterRenderer="components.grid.filtros.BeginWithFilterRenderer" id="unidade1" width=".10"
								   headerText = "{resourceManager.getString('ApplicationResource','UNIDADE')}"
								   textAlign="center" editable="false"
								   sortable="false"
								   dataField="unidade.nome"							   
								   />
				
				<dc:DataGridColumnFilter id="analiseTecnica1" width=".10" editable="false"
								   headerText = "{resourceManager.getString('ApplicationResource','ANALISE_TECNICA')}"
								   labelFunction="labelCondicao"
								   />
				
				<dc:DataGridColumnFilter id="origemFaturamento1" width=".10" textAlign="center"
								   headerText = "Origem" editable="false"
								   dataField = "origemFaturamento"
								   />
				
				<mx:DataGridColumn id="valorSistema1" width=".10" textAlign="center"
								   headerText = "Valor Sistema" editable="false"
								   labelFunction="labelFunctionSistema"
								   />
				
				<mx:DataGridColumn id="valorFaturado1" width=".10" textAlign="center"
								   headerText = "Valor Faturado" dataField="valorFaturado"
								   editable="true"
								   />
				
				<mx:DataGridColumn id="valorFrete1" width=".10" textAlign="center"
								   headerText = "Frete Sistema" editable="false"
								   labelFunction="valorFreteFunction"
								   />
				
				<mx:DataGridColumn headerText = "{resourceManager.getString('ApplicationResource','ACTION_COLUMN')}"	
								   draggable="false" width=".05"							 
								   editable="false"
								   sortable="false">
					<mx:itemRenderer>
						<fx:Component>
							<mx:HBox horizontalAlign="center"
									 verticalAlign="middle"
									 >
								
								<mx:Image source="@Embed(source='/assets/icons/delete.png')"
										  click="parentDocument.excluir(data, event)"
										  buttonMode="true"
										  useHandCursor="true"
										  toolTip="Excluir os da fatura"
										  />						
							</mx:HBox>
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
			</grid:columns>
		</grid:MantisTable>
		<mx:HBox verticalAlign="bottom" width="100%">
			<mx:Button id="btSalvar"
					   label="Salvar"
					   height="25"
					   icon="@Embed(source='/assets/icons/user.png')"
					   click="salvar(event)"/>
			<mx:Button id="btExportar"
					   label="Exportar"
					   height="25"
					   icon="@Embed(source='/assets/icons/user.png')"
					   click="exportar(event)"/>
			<s:Spacer width="100" />
			<mx:Button id="btDeletar"
					   label="Deletar"
					   height="25"
					   icon="@Embed(source='/assets/icons/user.png')"
					   click="deletar(event)"/>
			<s:Spacer width="100" />
			<mx:Button id="btGerarFatura"
					   label="Gerar fatura"
					   height="25"
					   icon="@Embed(source='/assets/icons/user.png')"
					   click="gerarFatura(event)"/>
		</mx:HBox>
	</mx:TitleWindow>
	
</mx:VBox>
