<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:dc="components.grid.filtros.controles.*"
		 xmlns:components="components.*" width="100%" height="100%" horizontalAlign="center"
		 paddingBottom="20" paddingLeft="10" paddingRight="10" paddingTop="10"
		 xmlns:grid="components.grid.*" xmlns:combos="components.combos.*"
		 initialize="init()" xmlns:faturamento="modules.faturamento.*">
	
	<fx:Declarations>
		
		<mx:RemoteObject id="faturamentoService" destination="faturamentoService" endpoint="{resourceManager.getString('ConfigurationResource','amf')}">			
			<mx:method name="listarFaturas"      
					   fault="onListarFaturasFault(event)" 
					   result="onListarFaturasResult(event)"
					   />
			<mx:method name="buscarPorId"      
					   fault="onBuscarFaturaFault(event)" 
					   result="onBuscarFaturaResult(event)"
					   />
		</mx:RemoteObject>
		<mx:RemoteObject id="faturamentoController" destination="faturamentoController" endpoint="{resourceManager.getString('ConfigurationResource','amf')}">			
			<mx:method name="iniciarFatura"      
					   fault="onIniciarFaturaFault(event)" 
					   result="onIniciarFaturaResult(event)"
					   />
			<mx:method name="salvarFatura"      
					   fault="onSalvarFaturaFault(event)" 
					   result="onSalvarFaturaResult(event)"
					   />
			<mx:method name="emitirFatura"      
					   fault="onEmitirFaturaFault(event)" 
					   result="onEmitirFaturaResult(event)"
					   />
			<mx:method name="finalizarFatura"      
					   fault="onFinalizarFaturaFault(event)" 
					   result="onFinalizarFaturaResult(event)"
					   />
		</mx:RemoteObject>
		
		<mx:RemoteObject id="relatorioService" destination="relatorioService" requestTimeout="600" endpoint="{resourceManager.getString('ConfigurationResource','amf')}">			
			<mx:method name="gerarRelatorio"      
					   fault="onCreateFileFault(event)" 
					   result="onCreateFileResult(event)"
					   />
		</mx:RemoteObject>
		
		<mx:Consumer id="consumidorFaturamentoService" destination="FaturamentoMessageServicePush" message="onMsgFaturamento(event)" />
		
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import components.PopupModalController;
			import components.events.UserRegisterNumberModalEvent;
			import components.messages.MensagemEvent;
			import components.messages.MessageType;
			
			import entities.GlobalMessage;
			import entities.administrativo.Usuario;
			import entities.faturamento.Faturamento;
			
			import modules.view.Login;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.ListEvent;
			import mx.formatters.DateFormatter;
			import mx.managers.CursorManager;
			import mx.managers.PopUpManager;
			import mx.messaging.events.MessageEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import utils.MensagensAplicacao;
			import utils.Publicador;
			
			[Bindable]
			private var _listaFatura:ArrayCollection;
			
			[Bindable]
			public var _fatura:Faturamento;
			
			[Bindable]
			private var listaApelido:ArrayCollection = new ArrayCollection;
			[Bindable]
			private var apelidoSelecionado:String;
			
			[Bindable]
			private var listaCliente:ArrayCollection = new ArrayCollection;
			[Bindable]
			private var clienteSelecionado:String;
			
			[Bindable]
			private var listaStatus:ArrayCollection = new ArrayCollection;
			[Bindable]
			private var statusSelecionado:String;
			
			private var byteArray:ByteArray;
			
			private var fileRef:FileReference;
			
			private var _cancelarModal:CancelarModal;
			
			private var _modoEdicao:Boolean = false;
			
			private function init():void
			{
				faturamentoService.listarFaturas();	
				consumidorFaturamentoService.subscribe();
				fileRef = new FileReference();
				fileRef.addEventListener(Event.OPEN, openHandler);
			}
			
			private function onMsgFaturamento(event:MessageEvent):void{ 
				var globalMessage:GlobalMessage = event.message.body as GlobalMessage;	
				
				if (globalMessage.mensagem==MensagensAplicacao.FATURA_CRIADA){
					//adicionarFatura(globalMessage.conteudo as Faturamento);
					faturamentoService.listarFaturas();	
				}
				if (globalMessage.mensagem==MensagensAplicacao.ATUALIZAR_FATURA){
					//adicionarFatura(globalMessage.conteudo as Faturamento);
					faturamentoService.listarFaturas();	
				}
			} 
			
			public function adicionarFatura(fatura:Faturamento):void
			{
				var faturaAux:Faturamento = null;
				var encontrou:Boolean = false;
				for(var i:int=0; i<_listaFatura.length; i++){
					faturaAux = _listaFatura.getItemAt(i) as Faturamento; 
					if(faturaAux.id == fatura.id){
						var orcRepSub:Object = _listaFatura.removeItemAt(i);
						_listaFatura.addItemAt(fatura,i);
						encontrou = true;
						break;
					}
				}
				if(!encontrou){
					_listaFatura.addItem(fatura);
				}				
			}
			
			private function onListarFaturasResult(event:ResultEvent = null):void
			{
				_listaFatura = event.result as ArrayCollection;
			}
			
			private function onListarFaturasFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[Inicializao do combo cliente] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				dispatchEvent(new MensagemEvent("Erro ao listar faturas", MessageType.ERROR, 5000));
				
			}
			
			private function onIniciarFaturaResult(event:ResultEvent = null):void
			{
				_fatura = event.result as Faturamento;
				detalhamentoFatura.fatura = _fatura;
				Publicador.enviarMensagemFaturamento(MensagensAplicacao.ATUALIZAR_FATURA,_fatura);
				dispatchEvent(new MensagemEvent("Fatura iniciada com sucesso", MessageType.SUCCESS, 5000));
			}
			
			private function onIniciarFaturaFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[Inicializao do combo cliente] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				dispatchEvent(new MensagemEvent("Erro ao iniciar fatura", MessageType.ERROR, 5000));
				
			}
			
			private function onSalvarFaturaResult(event:ResultEvent = null):void
			{
				_fatura = event.result as Faturamento;
				detalhamentoFatura.fatura = _fatura;
				Publicador.enviarMensagemFaturamento(MensagensAplicacao.ATUALIZAR_FATURA,_fatura);
				dispatchEvent(new MensagemEvent("Fatura salva com sucesso", MessageType.SUCCESS, 5000));
			}
			
			private function onSalvarFaturaFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[Inicializao do combo cliente] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				dispatchEvent(new MensagemEvent("Erro ao salvar fatura", MessageType.ERROR, 5000));
				
			}
			
			private function onEmitirFaturaResult(event:ResultEvent = null):void
			{
				_fatura = event.result as Faturamento;
				detalhamentoFatura.fatura = _fatura;
				Publicador.enviarMensagemFaturamento(MensagensAplicacao.ATUALIZAR_FATURA,_fatura);
				dispatchEvent(new MensagemEvent("Fatura emitida com sucesso", MessageType.SUCCESS, 5000));
			}
			
			private function onEmitirFaturaFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[Inicializao do combo cliente] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				dispatchEvent(new MensagemEvent("Erro ao emitir fatura", MessageType.ERROR, 5000));
				
			}
			
			private function onFinalizarFaturaResult(event:ResultEvent = null):void
			{
				_fatura = event.result as Faturamento;
				detalhamentoFatura.fatura = _fatura;
				Publicador.enviarMensagemFaturamento(MensagensAplicacao.ATUALIZAR_FATURA,_fatura);
				dispatchEvent(new MensagemEvent("Fatura finalizada com sucesso", MessageType.SUCCESS, 5000));
			}
			
			private function onFinalizarFaturaFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[Inicializao do combo cliente] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				dispatchEvent(new MensagemEvent("Erro ao finalizar fatura", MessageType.ERROR, 5000));
			}
			
			
			
			public function visualizarDetalhe(data:Object=null, event:Event=null):void
			{	
				
				//for double click
				if(data==null && event is ListEvent){
					var event2:ListEvent = event as ListEvent;						
					data = _listaFatura.getItemAt(event2.rowIndex);				
				}
				
				if(data)
					_fatura = data as Faturamento;
				
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					faturamentoService.buscarPorId(_fatura.id);
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(visualizarFaturaAutenticar);	
				}
			}
			
			public function visualizarFaturaAutenticar(event:UserRegisterNumberModalEvent=null):void{
				visualizarDetalhe();
			}
			
			private function onBuscarFaturaResult(event:ResultEvent = null):void
			{
				this.currentState = "edicao";
				_fatura = event.result as Faturamento;
				detalhamentoFatura.fatura = _fatura;	
				
			}
			
			private function onBuscarFaturaFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[onBuscarNotaFiscalRemessaFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				dispatchEvent(new MensagemEvent("Erro ao buscar fatura", MessageType.ERROR, 5000));
			}
			
			private function iniciarFatura(event:MouseEvent=null):void
			{
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					_fatura = detalhamentoFatura.fatura;
					faturamentoController.iniciarFatura(_fatura,usr);
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(iniciarFaturaAutenticar);	
				}
				
			}
			
			public function iniciarFaturaAutenticar(event:UserRegisterNumberModalEvent=null):void{
				iniciarFatura();
			}
			
			private function salvarFatura(event:MouseEvent=null):void
			{
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					_fatura = detalhamentoFatura.fatura;
					faturamentoController.salvarFatura(_fatura,usr);
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(salvarFaturaAutenticar);	
				}
				
			}
			
			public function salvarFaturaAutenticar(event:UserRegisterNumberModalEvent=null):void{
				salvarFatura();
			}
			
			private function emitirFatura(event:MouseEvent=null):void
			{
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					if(detalhamentoFatura.validarCamposEmissao()){
						_fatura = detalhamentoFatura.fatura;
						faturamentoController.emitirFatura(_fatura,usr);
					}else{
						dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','ERRO_VALIDACAO'), MessageType.WARNING, 3000));
					}
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(emitirFaturaAutenticar);	
				}
			}
			
			public function emitirFaturaAutenticar(event:UserRegisterNumberModalEvent=null):void{
				emitirFatura();
			}			
			
			private function finalizarFatura(event:MouseEvent=null):void
			{
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					if(detalhamentoFatura.validarFinalizacao()){
						_fatura = detalhamentoFatura.fatura;
						faturamentoController.finalizarFatura(_fatura,usr);
					}else{
						dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','ERRO_VALIDACAO'), MessageType.WARNING, 3000));
					}
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(finalizarFaturaAutenticar);	
				}
			}
			
			public function finalizarFaturaAutenticar(event:UserRegisterNumberModalEvent=null):void{
				finalizarFatura();
			}
			
			private function cancelarFatura(event:MouseEvent=null):void
			{
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					_fatura = detalhamentoFatura.fatura;
					showModalCancelar(event);
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(cancelarFaturaAutenticar);	
				}
			}
			
			public function cancelarFaturaAutenticar(event:UserRegisterNumberModalEvent=null):void{
				cancelarFatura();
			}
			
			private function voltar(event:MouseEvent):void
			{
				detalhamentoFatura.limpar();
				this.currentState = "listagem";
			}
			
			private function editarFatura(event:MouseEvent=null):void
			{
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					detalhamentoFatura.nFatura.habilitado = true;
					detalhamentoFatura.dataEmissao.enabled = true;
					detalhamentoFatura.dataPagamento.enabled = true;
					detalhamentoFatura.dataVencimento.enabled = true;
					btEditar.enabled = false;
					btSalvar.enabled = true;
					_modoEdicao = true;
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(editarFaturaAutenticar);	
				}
			}
			
			public function editarFaturaAutenticar(event:UserRegisterNumberModalEvent=null):void{
				editarFatura();
			}
			
			private function exportar(event:MouseEvent):void
			{
				if(_fatura != null && _fatura.listaOrdemServico != null && _fatura.listaOrdemServico.length > 0){
					relatorioService.channelSet = parentApplication.channelSet;
					relatorioService.showBusyCursor = true;
					relatorioService.gerarRelatorio(_fatura, "relatorioConferenciaFaturamento",_fatura.listaOrdemServico);
				}else{
					dispatchEvent(new MensagemEvent("Nenhuma informação disponível para gerar o relatório!", MessageType.WARNING, 3000));
				}
			}
			
			private function onCreateFileResult(event:ResultEvent):void
			{
				CursorManager.removeAllCursors();
				byteArray = event.result as ByteArray;
				dispatchEvent(new MensagemEvent("Arquivo criado com sucesso", MessageType.INFO, 3000));
				
				Alert.noLabel = "Não";
				Alert.yesLabel = "Sim"
				var alert:Alert = new Alert();
				alert = Alert.show("Deseja salvar o arquivo?","Download completo",3,this,alertClickHandler);
				PopUpManager.centerPopUp(alert);
				var newY:Number = 180;
				alert.move(alert.x, newY);
			}
			
			private function openHandler(event:Event):void
			{
				//dispatchEvent(new MensagemEvent("Texto openHandler", MessageType.INFO, 3000));
			}
			
			public static function getFormattedDateToWriteFile(date:Date):String
			{
				var date:Date = date;
				var dateF:DateFormatter = new DateFormatter();
				dateF.formatString = "DDMMYYYY - LLNNSS";
				return dateF.format(date);
			}
			
			private function alertClickHandler(event:CloseEvent):void
			{
				if (event.detail == Alert.YES)
				{
					fileRef.save(byteArray, "Relatório faturamento " + getFormattedDateToWriteFile(new Date()) +".xls");
					
				}
				else
				{
					dispatchEvent(new MensagemEvent("Exportação foi cancelada", MessageType.INFO, 3000));
				}
			}
			
			private function onCreateFileFault(event:FaultEvent):void
			{
				// Return the cursor to its original state
				CursorManager.removeAllCursors();
				dispatchEvent(new MensagemEvent("Texto onCreateFileFault", MessageType.INFO, 3000));
				// Debug output
				trace("[OrdersComponent.handleUsersServicefindAllFault] [" 
					+ event.fault.faultCode + "] " 
					+ event.fault.faultString 
					+ " (" + event.fault.faultDetail +
					")");
			}
			
			public function showModalCancelar(event:MouseEvent):void {
				_cancelarModal = CancelarModal(PopUpManager.createPopUp( this, CancelarModal , true));
				_cancelarModal.fatura = _fatura;
				_cancelarModal["myParentObject"] = this;
				PopUpManager.centerPopUp(_cancelarModal);
			}
			
			public function hideModalCancelar():void {
				PopUpManager.removePopUp(_cancelarModal);
			}
			
		]]>
	</fx:Script>
	
	<mx:states>
		<s:State name="listagem"/>
		<s:State name="edicao"/>
	</mx:states>
	
	<grid:MantisTable id="viewTable"
					  width="100%"
					  height="100%"
					  includeIn="listagem"
					  draggableColumns="true"
					  dataProvider="{_listaFatura}"
					  doubleClickEnabled="false"
					  >
		<grid:columns>
			
			<!-- CHANGE HERE THE ENTITY COLUMNS -->
			
			<!-- EDIT/REMOVE COLUMNS -->
			
			<mx:DataGridColumn headerText = "{resourceManager.getString('ApplicationResource','ACTION_COLUMN')}"	
							   draggable="false"							 
							   editable="false"
							   sortable="false">
				<mx:itemRenderer>
					<fx:Component>
						<mx:HBox horizontalAlign="center"
								 verticalAlign="middle"
								 >
							
							<mx:Image source="@Embed(source='/assets/icons/edit.png')"
									  click="parentDocument.visualizarDetalhe(data, event)"
									  buttonMode="true"
									  useHandCursor="true"
									  toolTip="{resourceManager.getString('ApplicationResource','EDIT')}"
									  />						
						</mx:HBox>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			
			<dc:DataGridColumnFilter id="nome"
							   headerText = "Apelido da fatura"
							   textAlign="center"
							   sortable="false"
							   dataField="nome"							   
							   />
			
			<dc:DataGridColumnFilter filterRenderer="components.grid.filtros.BeginWithFilterRenderer" id="cliente"
							   headerText = "{resourceManager.getString('ApplicationResource','CLIENTE')}"
							   textAlign="center"
							   sortable="false"
							   dataField="cliente.nomeSistema"							   
							   />
			
			<dc:DataGridColumnFilter filterRenderer="components.grid.filtros.BeginWithFilterRenderer" id="dataCriacao"
							   headerText = "Nº Fatura"
							   textAlign="center"
							   sortable="false"
							   dataField="numeroFatura"							   
							   />
			
			<dc:DataGridColumnFilter id="status" 
							   headerText = "{resourceManager.getString('ApplicationResource','STATUS')}"
							   dataField = "statusString"
							   width="80"
							   />
			
			<dc:DataGridColumnFilter filterRenderer="components.grid.filtros.DateFilterRenderer" id="dataEmissaoFatura"
							   headerText = "Data emissão"
							   textAlign="center"
							   sortable="false"
							   dataField="dataEmissaoFaturaString"							   
							   />
			
			<dc:DataGridColumnFilter filterRenderer="components.grid.filtros.DateFilterRenderer" id="dataVencimentoFatura"
							   headerText = "Data vencimento"
							   textAlign="center"
							   sortable="false"
							   dataField="dataVencimentoFaturaString"							   
							   />
			
			<dc:DataGridColumnFilter filterRenderer="components.grid.filtros.DateFilterRenderer" id="dataPagamentoFatura"
							   headerText = "Data pagamento"
							   textAlign="center"
							   sortable="false"
							   dataField="dataPagamentoFaturaString"							   
							   />
			
		</grid:columns>
	</grid:MantisTable>
	
	<faturamento:DetalhamentoFatura id="detalhamentoFatura" excludeFrom="listagem" />
	
	<mx:HBox excludeFrom="listagem" width="100%" horizontalAlign="left">
		<mx:Button id="btIniciar"
				   label="{resourceManager.getString('ApplicationResource','INICIAR_NF_SAIDA')}"
				   height="25"
				   icon="@Embed(source='/assets/icons/save.png')"
				   click="iniciarFatura(event)"
				   enabled="{_fatura.statusString == 'Não iniciado'}"
				   />
		
		<mx:Button id="btSalvar"
				   label="{resourceManager.getString('ApplicationResource','SALVAR_NF_SAIDA')}"
				   height="25"
				   icon="@Embed(source='/assets/icons/save.png')"
				   click="salvarFatura(event)"
				   enabled="{_fatura.statusString == 'Iniciada'}"
				   />
		<s:Spacer width="40" />
		
		<mx:Button id="btEmitir" 
				   label="{resourceManager.getString('ApplicationResource','EMITIR_NF_SAIDA')}"
				   height="25"
				   icon="@Embed(source='/assets/icons/page_gear.png')"
				   click="emitirFatura(event)"
				   enabled="{_fatura.statusString == 'Iniciada'}"
				   />
		<s:Spacer width="40" />
		
		<mx:Button id="btFinalizar"
				   label="{resourceManager.getString('ApplicationResource','FINALIZAR_NF_SAIDA')}"
				   height="25"
				   icon="@Embed(source='/assets/icons/page_gear.png')"
				   click="finalizarFatura(event)"
				   enabled="{_fatura.statusString == 'Emitida'}"
				   />
		
		<mx:Button id="btEditar" 
				   label="Editar"
				   height="25"
				   icon="@Embed(source='/assets/icons/edit.png')"
				   click="editarFatura(event)"
				   enabled="{_fatura.statusString != 'Iniciada' &amp;&amp; _fatura.statusString != 'Finalizada'}"
				   />
		
		<mx:Button id="btExportar"
				   label="Exportar"
				   height="25"
				   icon="@Embed(source='/assets/icons/user.png')"
				   click="exportar(event)"/>
		
		<mx:Button id="btCancelar"
				   label="Cancelar"
				   height="25"
				   icon="@Embed(source='/assets/icons/user.png')"
				   click="cancelarFatura(event)"/>
		
		<mx:Button id="btVoltar" 
				   label="{resourceManager.getString('ApplicationResource','VOLTAR')}"
				   height="25"
				   icon="@Embed(source='/assets/icons/back.png')"
				   click="voltar(event)"
				   />
	</mx:HBox>
	
</mx:VBox>
