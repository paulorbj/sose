<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%"  height="100%" paddingBottom="20" paddingLeft="10" paddingRight="10" paddingTop="10"
		 xmlns:components="components.*" horizontalAlign="center"
		 xmlns:grid="components.grid.*" xmlns:combos="components.combos.*"  xmlns:dc="components.grid.filtros.controles.*"
		 initialize="init()">
	
	<fx:Declarations>
		<mx:RemoteObject concurrency="single" showBusyCursor="true" id="requisicaoComponenteService" destination="requisicaoComponenteService" endpoint="{resourceManager.getString('ConfigurationResource','amf')}">			
			<mx:method name="listarRequisicaoEstoque"      
					   fault="onListarRequisicaoFault(event)" 
					   result="onListarRequisicaoResult(event)"
					   />
			
			<mx:method name="atenderRequisicao"      
					   fault="onAtenderRequisicaoFault(event)" 
					   result="onAtenderRequisicaoResult(event)"
					   />
			<mx:method name="atenderRequisicoes"      
					   fault="onAtenderRequisicoesFault(event)" 
					   result="onAtenderRequisicoesResult(event)"
					   />
		</mx:RemoteObject>
		<mx:RemoteObject concurrency="single" showBusyCursor="true" id="estoqueController" destination="estoqueController" endpoint="{resourceManager.getString('ConfigurationResource','amf')}">			
			<mx:method name="atenderRequisicao"      
					   fault="onAtenderRequisicaoFault(event)" 
					   result="onAtenderRequisicaoResult(event)"
					   />
			<mx:method name="finalizarColeta"      
					   fault="onFinalizarColetaFault(event)" 
					   result="onFinalizarColetaResult(event)"
					   />
			<mx:method name="entregarMaterial"      
					   fault="onEntregarMaterialFault(event)" 
					   result="onEntregarMaterialResult(event)"
					   />
			<mx:method name="retirarMaterial"      
					   fault="onRetirarMaterialFault(event)" 
					   result="onRetirarMaterialResult(event)"
					   />
			<mx:method name="cancelarRequisicao"      
					   fault="onCancelarRequisicaoFault(event)" 
					   result="onCancelarRequisicaoResult(event)"
					   />
		</mx:RemoteObject>
		
		<mx:Producer id="produtorEstoqueService" destination="EstoqueMessageServicePush" /> 
		
		<mx:Consumer id="consumidorEstoqueService" destination="EstoqueMessageServicePush" message="onMsgEstoque(event)" />
		
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import components.PopupModalController;
			import components.UserRegisterNumberModal;
			import components.events.UserRegisterNumberModalEvent;
			import components.messages.MensagemEvent;
			import components.messages.MessageType;
			
			import entities.GlobalMessage;
			import entities.administrativo.Usuario;
			import entities.orcamentoreparo.RequisicaoComponente;
			
			import modules.reparoOrcamento.eventos.OrcamentoEvent;
			import modules.reparoOrcamento.eventos.ReparoEvent;
			import modules.view.Login;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.events.ListEvent;
			import mx.managers.CursorManager;
			import mx.managers.PopUpManager;
			import mx.messaging.events.MessageEvent;
			import mx.messaging.messages.AsyncMessage;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import utils.MensagensAplicacao;
			import utils.Publicador;
			
			[Bindable]
			private var _listaRequisicoes:ArrayCollection;
			
			[Bindable]
			private var _requisicoesSelecionadas:ArrayCollection;
			
			[Bindable]
			private var _requisicoesNaoSelecionadas:ArrayCollection;
			
			[Bindable]
			private var _requisicao:RequisicaoComponente;
			
			[Bindable]
			private var _listaRequisicoesCompleta:ArrayCollection = new ArrayCollection;
			
			[Bindable]
			private var listaStatus:ArrayCollection = new ArrayCollection;
			
			[Bindable]
			private var statusSelecionado:String;
			
			[Bindable]
			private var listaComponente:ArrayCollection = new ArrayCollection;
			
			[Bindable]
			private var componenteSelecionado:String;
			
			[Bindable]
			private var listaUsuario:ArrayCollection = new ArrayCollection;
			
			[Bindable]
			private var usuarioSelecionado:String;
			
			[Bindable]
			private var listaLaboratorio:ArrayCollection = new ArrayCollection;
			
			[Bindable]
			private var laboratorioSelecionado:String;
			
			[Bindable]
			private var totalComponentes:Number = 0;
			
			[Embed(source='/assets/icon_synchronize.png')]
			public static var synchronized:Class;
			[Embed(source='/assets/icon_synchronize_green.png')]
			public static var synchronized_verde:Class;
			
			private function init():void
			{
				requisicaoComponenteService.listarRequisicaoEstoque();
				btAtualizar.setStyle("icon", synchronized);
				consumidorEstoqueService.subscribe();
			}
			
			
			private function onMsgEstoque(event:MessageEvent):void{ 
				var globalMessage:GlobalMessage = event.message.body as GlobalMessage;	
				
				if (globalMessage.mensagem==MensagensAplicacao.ESTOQUE_REQUISICAO_RELOAD){
					//adicionarRequisicao(globalMessage.conteudo as RequisicaoComponente);
					btAtualizar.setStyle("icon", synchronized_verde);
				}
				if (globalMessage.mensagem==MensagensAplicacao.ESTOQUE_REQUISICAO_ATUALIZAR){
					adicionarRequisicao(globalMessage.conteudo as RequisicaoComponente);
				}
				if (globalMessage.mensagem==MensagensAplicacao.ATUALIZAR_COMPONENTE_VALIDACAO_QTD_ESTOQUE){
					//requisicaoComponenteService.listarRequisicaoEstoque();
					btAtualizar.setStyle("icon", synchronized_verde);
				}
				if (globalMessage.mensagem==MensagensAplicacao.COMPONENTE_NAO_ENCONTRADO){
					//requisicaoComponenteService.listarRequisicaoEstoque();
					btAtualizar.setStyle("icon", synchronized_verde);
				}
				if (globalMessage.mensagem==MensagensAplicacao.ATUALIZAR_LISTA_REQUISICAO){
					//requisicaoComponenteService.listarRequisicaoEstoque();
					btAtualizar.setStyle("icon", synchronized_verde);
				}
			} 
			
			private function atualizar(event:MouseEvent):void
			{
				btAtualizar.setStyle("icon", synchronized);
				requisicaoComponenteService.listarRequisicaoEstoque();
			}
			
			private function publicarRequisicao(req:RequisicaoComponente, msg:String):void   { 								
				var message:AsyncMessage = new AsyncMessage();
				var messageGlobal:GlobalMessage=new GlobalMessage();
				messageGlobal.mensagem=msg;
				messageGlobal.conteudo = req;				
				message.body=messageGlobal;
				produtorEstoqueService.send(message);	
			}
			
			public function adicionarRequisicao(requisicao:RequisicaoComponente):void
			{
				var requisicaoAux:RequisicaoComponente = null;
				var encontrou:Boolean = false;
				for(var i:int=0; i<_listaRequisicoes.length; i++){
					requisicaoAux = _listaRequisicoes.getItemAt(i) as RequisicaoComponente; 
					if(requisicaoAux.id == requisicao.id){	
						var orcRepSub:Object = _listaRequisicoes.removeItemAt(i);
						_listaRequisicoes.addItemAt(requisicao,i);
						encontrou = true;
						break;
					}
				}
				if(!encontrou){
					_listaRequisicoes.addItem(requisicao);
				}
				
				for(var i:int=0; i<_listaRequisicoesCompleta.length; i++){
					requisicaoAux = _listaRequisicoesCompleta.getItemAt(i) as RequisicaoComponente; 
					if(requisicaoAux.id == requisicao.id){	
						var requisicaoSub:Object = _listaRequisicoesCompleta.removeItemAt(i);
						_listaRequisicoesCompleta.addItemAt(requisicao,i);
						encontrou = true;
						break;
					}
				}
				if(!encontrou){
					_listaRequisicoesCompleta.addItem(requisicao);
				}
			}
			
			private function onListarRequisicaoResult(event:ResultEvent = null):void
			{
				_listaRequisicoes = event.result as ArrayCollection;
				atualizaTotalComponentes(_listaRequisicoes);
				_listaRequisicoesCompleta = new ArrayCollection();
				_listaRequisicoesCompleta.addAll(_listaRequisicoes);
			}
			
			private function atualizaTotalComponentes(lista:ArrayCollection):void{
				totalComponentes = 0;
				for each (var req:RequisicaoComponente in lista){
					totalComponentes += req.quantidade;
				}
			}
			
			private function onListarRequisicaoFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[onListarOrdemServicoBaixaExpedicaoFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");		
			}
			
			private function atenderRequisicoes(event:MouseEvent=null):void
			{
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					_requisicoesSelecionadas = new ArrayCollection();
					_requisicoesNaoSelecionadas = new ArrayCollection();
					
					for each (var rc:RequisicaoComponente in _listaRequisicoes){
						
						if(rc.isSelected){
							rc.atendidoPor = usr;
							_requisicoesSelecionadas.addItem(rc);
						}else{
							_requisicoesNaoSelecionadas.addItem(rc);
						}
					}
					
					estoqueController.atenderRequisicoes(_requisicoesSelecionadas,usr);
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(atenderRequisicoesAutenticar);
				}
			}
			
			public function atenderRequisicoesAutenticar(event:UserRegisterNumberModalEvent=null):void{
				atenderRequisicoes();
			}
			
			private function onAtenderRequisicoesResult(event:ResultEvent = null):void
			{
				var requisicoes:ArrayCollection = event.result as ArrayCollection;
				dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','REQUISICOES_ATENDIDAS_SUCESSO'), MessageType.SUCCESS, 10000));
				
			}
			
			private function onAtenderRequisicoesFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','REQUISICOES_ATENDIDAS_ERRO'), MessageType.ERROR, 10000));
				trace("[onCriarNotaFiscalRemessaExpedicaoFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");		
			}
			
			public function atenderRequisicao(data:Object=null, event:Event=null):void
			{					
				//for double click
				if(data==null && event is ListEvent){
					var event2:ListEvent = event as ListEvent						
					data = _listaRequisicoes.getItemAt(event2.rowIndex);				
				}
				
				if(data != null){
					_requisicao = data as RequisicaoComponente;
				}
				
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					_requisicao.atendidoPor = usr;
					estoqueController.atenderRequisicao(_requisicao,usr);
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(atenderRequisicaoAutenticar);
				}
			}
			
			public function atenderRequisicaoAutenticar(event:UserRegisterNumberModalEvent=null):void{
				atenderRequisicao();
			}
			
			private function onAtenderRequisicaoResult(event:ResultEvent = null):void
			{
				var i:int = _listaRequisicoes.getItemIndex(_requisicao);
				_listaRequisicoes.removeItemAt(i);
				_requisicao = event.result as RequisicaoComponente;
				Publicador.enviarMensagemEstoque(MensagensAplicacao.ESTOQUE_REQUISICAO_ATUALIZAR,_requisicao);
				publicarRequisicao(_requisicao, MensagensAplicacao.ESTOQUE_REQUISICAO_ATUALIZAR);
				_listaRequisicoes.addItemAt(_requisicao,i);
				
				dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','REQUISICAO_ATENDIDA_SUCESSO'), MessageType.SUCCESS, 10000));	
			}
			
			private function onAtenderRequisicaoFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[onCriarNotaFiscalRemessaExpedicaoFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				if(event.fault.faultString.indexOf("java.lang.Exception") != -1){
					var index:Number = event.fault.faultString.lastIndexOf(":");
					dispatchEvent(new MensagemEvent(event.fault.faultString.substr(index+1), MessageType.WARNING, 10000));
				}else{
					dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','REQUISICAO_ATENDIDA_ERRO'), MessageType.ERROR, 10000));
				}
			}
			
			public function finalizarColeta(data:Object=null, event:Event=null):void
			{
				//for double click
				if(data==null && event is ListEvent){
					var event2:ListEvent = event as ListEvent						
					data = _listaRequisicoes.getItemAt(event2.rowIndex);				
				}
				
				if(data != null){
					_requisicao = data as RequisicaoComponente;
				}
				
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					_requisicao.coletadoPor = usr;
					estoqueController.finalizarColeta(_requisicao,usr);
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(finalizarColetaAutenticar);
				}
			}
			
			public function finalizarColetaAutenticar(event:UserRegisterNumberModalEvent=null):void{
				finalizarColeta();
			}
			
			private function onFinalizarColetaResult(event:ResultEvent = null):void
			{
				var i:int = _listaRequisicoes.getItemIndex(_requisicao);
				_listaRequisicoes.removeItemAt(i);
				_requisicao = event.result as RequisicaoComponente;
				publicarRequisicao(_requisicao, MensagensAplicacao.ESTOQUE_REQUISICAO_ATUALIZAR);
				_listaRequisicoes.addItemAt(_requisicao,i);
				
				dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','REQUISICAO_MATERIAL_COLETADO_SUCESSO'), MessageType.SUCCESS, 10000));	
			}
			
			private function onFinalizarColetaFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[onCriarNotaFiscalRemessaExpedicaoFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				if(event.fault.faultString.indexOf("java.lang.Exception") != -1){
					var index:Number = event.fault.faultString.lastIndexOf(":");
					dispatchEvent(new MensagemEvent(event.fault.faultString.substr(index+1), MessageType.WARNING, 10000));
				}else{
					dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','REQUISICAO_MATERIAL_COLETADO_ERRO'), MessageType.ERROR, 10000));
				}
			}
			
			public function entregarMaterial(data:Object=null, event:Event=null):void
			{
				//for double click
				if(data==null && event is ListEvent){
					var event2:ListEvent = event as ListEvent						
					data = _listaRequisicoes.getItemAt(event2.rowIndex);				
				}
				
				if(data != null){
					_requisicao = data as RequisicaoComponente;
				}
				
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					_requisicao.entreguePor = usr;
					estoqueController.entregarMaterial(_requisicao,usr);
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(entregarMaterialAutenticar);
				}
			}
			
			public function entregarMaterialAutenticar(event:UserRegisterNumberModalEvent=null):void{
				entregarMaterial();
			}
			
			private function onEntregarMaterialResult(event:ResultEvent = null):void
			{
				var i:int = _listaRequisicoes.getItemIndex(_requisicao);
				_listaRequisicoes.removeItemAt(i);
				_requisicao = event.result as RequisicaoComponente;
				publicarRequisicao(_requisicao, MensagensAplicacao.ESTOQUE_REQUISICAO_ATUALIZAR);
				_listaRequisicoes.addItemAt(_requisicao,i);
				
				dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','REQUISICAO_ENTREGUE_SUCESSO'), MessageType.SUCCESS, 10000));	
			}
			
			private function onEntregarMaterialFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[onCriarNotaFiscalRemessaExpedicaoFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				if(event.fault.faultString.indexOf("java.lang.Exception") != -1){
					var index:Number = event.fault.faultString.lastIndexOf(":");
					dispatchEvent(new MensagemEvent(event.fault.faultString.substr(index+1), MessageType.WARNING, 10000));
				}else{
					dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','REQUISICAO_ENTREGUE_ERRO'), MessageType.ERROR, 10000));
				}
			}
			
			public function retirarMaterial(data:Object=null, event:Event=null):void
			{
				//for double click
				if(data==null && event is ListEvent){
					var event2:ListEvent = event as ListEvent						
					data = _listaRequisicoes.getItemAt(event2.rowIndex);				
				}
				
				if(data != null){
					_requisicao = data as RequisicaoComponente;
				}
				
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					_requisicao.retiradoPor = usr;
					estoqueController.retirarMaterial(_requisicao,usr);
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(retirarMaterialAutenticar);
				}
			}
			
			public function retirarMaterialAutenticar(event:UserRegisterNumberModalEvent=null):void{
				retirarMaterial();
			}
			
			private function onRetirarMaterialResult(event:ResultEvent = null):void
			{
				var i:int = _listaRequisicoes.getItemIndex(_requisicao);
				_listaRequisicoes.removeItemAt(i);
				_requisicao = event.result as RequisicaoComponente;
				publicarRequisicao(_requisicao, MensagensAplicacao.ESTOQUE_REQUISICAO_ATUALIZAR);
				_listaRequisicoes.addItemAt(_requisicao,i);
				
				dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','REQUISICAO_RETIRADA_SUCESSO'), MessageType.SUCCESS, 10000));	
			}
			
			private function onRetirarMaterialFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[onCriarNotaFiscalRemessaExpedicaoFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				if(event.fault.faultString.indexOf("java.lang.Exception") != -1){
					var index:Number = event.fault.faultString.lastIndexOf(":");
					dispatchEvent(new MensagemEvent(event.fault.faultString.substr(index+1), MessageType.WARNING, 10000));
				}else{
					dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','REQUISICAO_RETIRADA_ERRO'), MessageType.ERROR, 10000));
				}
			}
			
			public function cancelarRequisicao(data:Object=null, event:Event=null):void
			{
				//for double click
				if(data==null && event is ListEvent){
					var event2:ListEvent = event as ListEvent						
					data = _listaRequisicoes.getItemAt(event2.rowIndex);				
				}
				
				if(data != null){
					_requisicao = data as RequisicaoComponente;
				}
				
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					_requisicao.canceladoPor = usr;
					estoqueController.cancelarRequisicao(_requisicao,usr);
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(cancelarRequisicaoAutenticar);
				}
			}
			
			public function cancelarRequisicaoAutenticar(event:UserRegisterNumberModalEvent=null):void{
				cancelarRequisicao();
			}
			
			private function onCancelarRequisicaoResult(event:ResultEvent = null):void
			{
				var i:int = _listaRequisicoes.getItemIndex(_requisicao);
				_listaRequisicoes.removeItemAt(i);
				_requisicao = event.result as RequisicaoComponente;
				publicarRequisicao(_requisicao, MensagensAplicacao.ESTOQUE_REQUISICAO_ATUALIZAR);
				if(_requisicao.orcamento != null){
					Publicador.enviarMensagemOrcamento(OrcamentoEvent.ATUALIZAR_ORCAMENTO,_requisicao.orcamento);
				}
				if(_requisicao.reparo != null){
					Publicador.enviarMensagemReparo(ReparoEvent.ATUALIZAR_REPARO,_requisicao.reparo)
				}
				_listaRequisicoes.addItemAt(_requisicao,i);
				
				dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','REQUISICAO_COMPONENTE_CANCELADA_SUCESSO'), MessageType.SUCCESS, 3000));	
			}
			
			private function onCancelarRequisicaoFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[onCriarNotaFiscalRemessaExpedicaoFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");		
				if(event.fault.faultString.indexOf("java.lang.Exception") != -1){
					var index:Number = event.fault.faultString.lastIndexOf(":");
					dispatchEvent(new MensagemEvent(event.fault.faultString.substr(index+1), MessageType.WARNING, 10000));
				}else{
					dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','REQUISICAO_COMPONENTE_CANCELADA_ERRO'), MessageType.ERROR, 10000));
				}
			}
			
			private function labelFunction(item:Object, column:DataGridColumn):String
			{
				if((item as RequisicaoComponente).reparo  && (item as RequisicaoComponente).reparo.ordemServico && (item as RequisicaoComponente).reparo.ordemServico.unidade && (item as RequisicaoComponente).reparo.ordemServico.unidade.laboratorio){
					return (item as RequisicaoComponente).reparo.ordemServico.unidade.laboratorio.nome;
				}else if((item as RequisicaoComponente).orcamento && (item as RequisicaoComponente).orcamento.ordemServico && (item as RequisicaoComponente).orcamento.ordemServico.unidade && (item as RequisicaoComponente).orcamento.ordemServico.unidade.laboratorio){
					return (item as RequisicaoComponente).orcamento.ordemServico.unidade.laboratorio.nome;
				}else{
					return "";
				}
			}
			
			private function labelFunction2(item:Object, column:DataGridColumn):String
			{
				if((item as RequisicaoComponente).reparo){
					return (item as RequisicaoComponente).reparo.ordemServico.numeroOrdemServico;
				}else if((item as RequisicaoComponente).orcamento){
					return (item as RequisicaoComponente).orcamento.ordemServico.numeroOrdemServico;
				}else{
					return "";
				}
			}
			
			
		
			
			private function getRowColor(item:Object,
										 rowIndex:int,
										 dataIndex:int,
										 color:uint):uint
			{
				//branco
				var colorReturn:uint = 0xFDFFFF;
				if(item.statusString == 'Sendo entregue'){
					//azul claro
					return colorReturn = 0x81E2FF;
				}
				
				if(item.statusString == 'Separando material'){
					//laranja
					return colorReturn = 0xFCD67F;
				}
				
				if(item.statusString == 'Componente em falta'){
					//vermelho claro
					return colorReturn = 0xFF8181;
				}
				
				if(item.statusString == 'Aguardando atendimento'){
					//amarelo claro
					return colorReturn = 0xFFFF81;
				}
				
				if(item.statusString == 'Material disponível'){
					//verde claro
					return colorReturn = 0x81FF8E;
				}
				
				return colorReturn;
			}
			
			public function acaoRequisicao(data:Object=null, event:Event=null):void
			{					
				//for double click
				if(data==null && event is ListEvent){
					var event2:ListEvent = event as ListEvent						
					data = _listaRequisicoes.getItemAt(event2.rowIndex);				
				}
				
				if(data != null){
					_requisicao = data as RequisicaoComponente;
				}
				
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					_requisicao.atendidoPor = usr;
					if(_requisicao.statusString == 'Aguardando atendimento'){
						atenderRequisicao(_requisicao);
					}else if(_requisicao.statusString == 'Separando material'){
						finalizarColeta(_requisicao);
					}else if(_requisicao.statusString == 'Material disponível'){
						entregarMaterial(_requisicao);
					}else{
						dispatchEvent(new MensagemEvent('Nenhuma ação programada para esse status', MessageType.WARNING, 10000));
					}
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(acaoRequisicaoAutenticar);
				}
			}
			
			public function acaoRequisicaoAutenticar(event:UserRegisterNumberModalEvent=null):void{
				acaoRequisicao();
			}
			
			public function selecionarToolTipAcao(data:Object=null):String
			{
				if(data != null){
					if((data as RequisicaoComponente).statusString == 'Aguardando atendimento'){
						return 'Atender requisição';
					}else if((data as RequisicaoComponente).statusString == 'Separando material'){
						return 'Finalizar coleta';
					}else if((data as RequisicaoComponente).statusString == 'Material disponível'){
						return 'Entregar material';
					}else{
						return 'Nenhuma ação programada';
					}
				}else{
					return 'Nenhuma ação programada';
				}
			}
			
		]]>
	</fx:Script>
	
	<mx:VBox width="100%" height="100%" verticalGap="0">
		<mx:Button id="btAtualizar"
				   height="25"
				   icon="@Embed(source='/assets/icon_synchronize.png')"
				   click="atualizar(event)"/>
		<grid:MantisTable id="requisicoesTable"
						  width="100%"
						  height="100%"
						  draggableColumns="false"
						  rowColorFunction="getRowColor"
						  dataProvider="{_listaRequisicoes}"
						  doubleClickEnabled="false"
						  >
			<grid:columns>
				
				<mx:DataGridColumn headerText = "{resourceManager.getString('ApplicationResource','ACTION_COLUMN')}"	
								   draggable="false"	width="30"					 
								   editable="false"
								   sortable="false">
					<mx:itemRenderer>
						<fx:Component>
							<mx:HBox horizontalAlign="center"
									 verticalAlign="middle"
									 >
								
								<mx:Image source="assets/icons/package_add.png"
										  click="parentDocument.acaoRequisicao(data, event)"
										  buttonMode="true"
										  useHandCursor="true"
										  toolTip="{parentDocument.selecionarToolTipAcao(data)}"
										  />								
							</mx:HBox>
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
				
				<mx:DataGridColumn headerText = ""							   
								   itemRenderer="components.grid.CheckBoxItemRenderer"
								   headerRenderer="components.grid.CheckBoxItemRenderer"
								   width="25" resizable="false" draggable="false" sortable="false"
								   dataField="isSelected"
								   />
								
				<dc:DataGridColumnFilter filterRenderer="components.grid.filtros.BeginWithFilterRenderer" id="cNumeroRequisicao" width="70"
								   headerText = "{resourceManager.getString('ApplicationResource','NUMERO_REQUISICAO')}"
								   textAlign="center"
								   sortable="false"
								   dataField="id"							   
								   />
				<dc:DataGridColumnFilter filterRenderer="components.grid.filtros.BeginWithFilterRenderer" width="70"
								   headerText = "{resourceManager.getString('ApplicationResource','NUMERO_ORDEM_SERVICO')}"
								   textAlign="center" 
								   sortable="false"
								   labelFunction="labelFunction2"						   
								   />
				<dc:DataGridColumnFilter filterRenderer="components.grid.filtros.BeginWithFilterRenderer" id="cComponente"
								   headerText = "{resourceManager.getString('ApplicationResource','COMPONENTE')}"
								   textAlign="center" width="400"
								   sortable="false"
								   dataField="componente.nome"							   
								   />
				
				<dc:DataGridColumnFilter id="cTipo"
								   headerText = "Tipo"
								   textAlign="center" width="100"
								   sortable="false"
								   dataField="componente.tipo.nome"							   
								   />
				
				<dc:DataGridColumnFilter  id="cEncapsulamento"
								   headerText = "Encapsulamento"
								   textAlign="center"
								   sortable="false" width="150"
								   dataField="componente.encapsulamento.nome"							   
								   />
				
				<dc:DataGridColumnFilter filterRenderer="components.grid.filtros.BeginWithFilterRenderer" id="cPosicaoEstoque"
								   headerText = "{resourceManager.getString('ApplicationResource','COMPONENTE_POSICAO')}"
								   textAlign="center" width="100"
								   sortable="false"
								   dataField="componente.posicaoEstoque"							   
								   />
				
				<dc:DataGridColumnFilter filterRenderer="components.grid.filtros.RelacionalFilterRenderer" id="cQuantidade" 
								   headerText = "{resourceManager.getString('ApplicationResource','QUANTIDADE_ABREVIADO')}"
								   textAlign="center"
								   sortable="false" width="50"
								   dataField="quantidade"							   
								   />
				
				<dc:DataGridColumnFilter  id="cRequisitante" width="80"
								   headerText = "{resourceManager.getString('ApplicationResource','REQUISITANTE')}"
								   dataField = "requisitante.usuario"
								   />
				
				<dc:DataGridColumnFilter  id="cLaboratorio" width="110"
								   headerText = "{resourceManager.getString('ApplicationResource','LABORATORIO')}"
								   labelFunction="labelFunction"
								   />
				
			</grid:columns>
		</grid:MantisTable>
		<mx:HBox paddingTop="10">
			<s:Label text="Total de componentes: {totalComponentes}" fontWeight="bold" fontSize="12"  />
		</mx:HBox>
	</mx:VBox>
	
	
	
	
</mx:VBox>
