<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" xmlns:dc="components.grid.filtros.controles.*"
		 xmlns:mx="library://ns.adobe.com/flex/mx"  horizontalAlign="center"
		 xmlns:components="components.*" width="100%"  height="100%" paddingBottom="20" paddingLeft="10" paddingRight="10" paddingTop="10"
		 xmlns:grid="components.grid.*" xmlns:combos="components.combos.*"
		 initialize="init()" xmlns:expedicao="modules.expedicao.*" xmlns:proposta="modules.proposta.*">
	
	<fx:Declarations>
		<mx:RemoteObject concurrency="single" showBusyCursor="true" id="propostaService" destination="propostaService" endpoint="{resourceManager.getString('ConfigurationResource','amf')}">			
			<mx:method name="listarPropostas"      
					   fault="onListarPropostasFault(event)" 
					   result="onListarPropostasResult(event)"
					   />
			<mx:method name="criarPropostaOrcamento"      
					   fault="onCriarPropostaFault(event)" 
					   result="onCriarPropostaResult(event)"
					   />
			<mx:method name="buscarPorId"      
					   fault="onBuscarPropostaFault(event)" 
					   result="onBuscarPropostaResult(event)"
					   />
		</mx:RemoteObject>
		
		<mx:RemoteObject concurrency="single" showBusyCursor="true" id="propostaController" destination="propostaController" endpoint="{resourceManager.getString('ConfigurationResource','amf')}">			
			<mx:method name="iniciarProposta"      
					   fault="onIniciarPropostaFault(event)" 
					   result="onIniciarPropostaResult(event)"
					   />
			<mx:method name="salvarProposta"      
					   fault="onSalvarPropostaFault(event)" 
					   result="onSalvarPropostaResult(event)"
					   />
			<mx:method name="finalizarProposta"      
					   fault="onFinalizarPropostaFault(event)" 
					   result="onFinalizarPropostaResult(event)"
					   />
			<mx:method name="cancelarProposta"      
					   fault="onCancelarPropostaFault(event)" 
					   result="onCancelarPropostaResult(event)"
					   />
			<mx:method name="arquivarProposta"      
					   fault="onArquivarPropostaFault(event)" 
					   result="onArquivarPropostaResult(event)"
					   />
			<mx:method name="enviarAoCliente"      
					   fault="onEnviarAoClienteFault(event)" 
					   result="onEnviarAoClienteResult(event)"
					   />
			<mx:method name="liberarItens"      
					   fault="onLiberarItensFault(event)" 
					   result="onLiberarItensResult(event)"
					   />
		</mx:RemoteObject>
		
		<mx:Consumer id="consumidorPropostaService" destination="PropostaMessageServicePush" message="onMsgProposta(event)" />
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import components.PopupModalController;
			import components.events.UserRegisterNumberModalEvent;
			import components.messages.MensagemEvent;
			import components.messages.MessageType;
			
			import entities.GlobalMessage;
			import entities.administrativo.Usuario;
			import entities.proposta.ItemProposta;
			import entities.proposta.Proposta;
			
			import modules.view.Login;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.controls.Alert;
			import mx.events.ListEvent;
			import mx.managers.CursorManager;
			import mx.managers.PopUpManager;
			import mx.messaging.events.MessageEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import utils.MensagensAplicacao;
			
			[Bindable]
			private var _listaProposta:ArrayCollection;
			
			[Bindable]
			private var _proposta:Proposta;
			
			public var criarProposta:Boolean = false;
			
			[Bindable]
			public var existeItemALiberar:Boolean = false;
			
			private var point1:Point = new Point();
			
			[Bindable]
			private var listaProposta:ArrayCollection = new ArrayCollection;
			[Bindable]
			private var propostaSelecionada:String;
			
			[Bindable]
			private var listaCliente:ArrayCollection = new ArrayCollection;
			[Bindable]
			private var clienteSelecionado:String;
			
			[Bindable]
			private var listaStatus:ArrayCollection = new ArrayCollection;
			[Bindable]
			private var statusSelecionado:String;
			
			[Bindable]
			private var listaTipoProposta:ArrayCollection = new ArrayCollection;
			[Bindable]
			private var tipoPropostaSelecionnada:String;
			
			private function init():void
			{
				propostaService.listarPropostas();		
				consumidorPropostaService.subscribe();
				
			}
			
			private function habilitarBotaoLiberacao():void
			{
				var existeItemPendenteDeLiberacao:Boolean = false;
				for each (var item:ItemProposta in _proposta.itensProposta)
				{
					if(item.proposta.tipo == "Orçamento"){
						if((item.ordemServico.orcamento.condicao == "Sem condição de reparo" || item.ordemServico.orcamento.condicao == "Devolução sem reparo") && item.dataLiberacao == null){
							existeItemPendenteDeLiberacao = true;
							break;
						}		
					}else {
						if((item.ordemServico.reparo.condicao == "Sem condição de reparo" || item.ordemServico.reparo.condicao == "Devolução sem reparo")  && item.dataLiberacao == null){
							existeItemPendenteDeLiberacao = true;
							break;
						}
					}
					if(item.dataAprovacao != null && item.dataLiberacao == null){
						existeItemPendenteDeLiberacao = true;
						break;
					}
				}
				existeItemALiberar = existeItemPendenteDeLiberacao;
			}
			
			private function onMsgProposta(event:MessageEvent):void{ 
				var globalMessage:GlobalMessage = event.message.body as GlobalMessage;	
				
				if (globalMessage.mensagem==MensagensAplicacao.PROPOSTA_CRIADA){
					//adicionar(globalMessage.conteudo as Proposta);
					propostaService.listarPropostas();
				}
			} 
			
			public function adicionarProposta(proposta:Proposta):void
			{
				var propostaAux:Proposta = null;
				var encontrou:Boolean = false;
				for(var i:int=0; i<_listaProposta.length; i++){
					propostaAux = _listaProposta.getItemAt(i) as Proposta; 
					if(propostaAux.id == proposta.id){
						var orcRepSub:Object = _listaProposta.removeItemAt(i);
						_listaProposta.addItemAt(proposta,i);
						encontrou = true;
						break;
					}
				}
				if(!encontrou){
					_listaProposta.addItem(proposta);
				}
			}
			
			public function adicionar(proposta:Proposta):void
			{
				if(_listaProposta){
					_listaProposta.addItemAt(proposta,0);
				}else{
					_listaProposta = new ArrayCollection();
					_listaProposta.addItemAt(proposta,0);
				}
			}
			
			private function onListarPropostasResult(event:ResultEvent = null):void
			{
				_listaProposta = event.result as ArrayCollection;
				if(_listaProposta == null){
					_listaProposta = new ArrayCollection();
				}
			}
			
			private function onListarPropostasFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[Inicializao do combo cliente] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");		
			}
			
			public function visualizarDetalhe(data:Object=null, event:Event=null):void
			{					
				//for double click
				if(data==null && event is ListEvent){
					var event2:ListEvent = event as ListEvent;						
					data = _listaProposta.getItemAt(event2.rowIndex);				
				}
				
				if(data)
					_proposta = data as Proposta;
				
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					propostaService.buscarPorId(_proposta.id);
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(visualizarPropostaAutenticar);	
				}			
			}
			
			public function visualizarPropostaAutenticar(event:UserRegisterNumberModalEvent=null):void{
				visualizarDetalhe();
			}
			
			private function onBuscarPropostaResult(event:ResultEvent = null):void
			{
				this.currentState = "edicao";
				_proposta = event.result as Proposta;
				detalhamentoProposta.proposta = _proposta;	
				
				habilitarBotaoLiberacao();
			}
			
			private function onBuscarPropostaFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[onBuscarPropostaFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				dispatchEvent(new MensagemEvent("Erro ao buscar proposta", MessageType.ERROR, 10000));
			}
			
			private function showWindow():void {
				var login:ModalConfirmacao=ModalConfirmacao(PopUpManager.createPopUp( this, ModalConfirmacao , true));
				PopUpManager.centerPopUp(login);
				login.listPr = this;
			}
			
			private function iniciarProposta(event:MouseEvent=null):void
			{
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					_proposta = detalhamentoProposta.proposta;
					propostaController.iniciarProposta(_proposta,usr);
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(iniciarPropostaAutenticar);
				}
			}
			
			public function iniciarPropostaAutenticar(event:UserRegisterNumberModalEvent=null):void{
				iniciarProposta();
			}
			
			private function onIniciarPropostaResult(event:ResultEvent = null):void
			{
				_proposta = event.result as Proposta;
				detalhamentoProposta.proposta = _proposta;
				adicionarProposta(_proposta);
				dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','PROPOSTA_INICIADA_SUCESSO'), MessageType.SUCCESS, 10000));
			}
			
			private function onIniciarPropostaFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[Inicializao do combo cliente] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','PROPOSTA_INICIADA_ERRO'), MessageType.ERROR, 10000));
			}
			
			private function salvarProposta(event:MouseEvent=null):void
			{
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					_proposta = detalhamentoProposta.proposta;
					propostaController.salvarProposta(_proposta,usr);
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(salvarPropostaAutenticar);
				}
			}
			
			public function salvarPropostaAutenticar(event:UserRegisterNumberModalEvent=null):void{
				salvarProposta();
			}
			
			private function onSalvarPropostaResult(event:ResultEvent = null):void
			{
				_proposta = event.result as Proposta;
				detalhamentoProposta.proposta = _proposta;
				adicionarProposta(_proposta);
				dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','PROPOSTA_SALVA_SUCESSO'), MessageType.SUCCESS, 10000));
			}
			
			private function onSalvarPropostaFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[Inicializao do combo cliente] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','PROPOSTA_SALVA_ERRO'), MessageType.ERROR, 10000));
			}
			
			
			public function finalizarPropostaModal():void
			{
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					_proposta = detalhamentoProposta.proposta;
					propostaController.finalizarProposta(_proposta,usr);
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(finalizarPropostaModalAutenticar);
				}
			}
			
			public function finalizarPropostaModalAutenticar(event:UserRegisterNumberModalEvent=null):void{
				finalizarPropostaModal();
			}
			
			private function finalizarProposta(event:MouseEvent=null):void
			{
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					var listaOS:ArrayCollection = new ArrayCollection();
					var listaItensProposta:ArrayCollection = detalhamentoProposta.getItensProposta();
					for each (var item:ItemProposta in listaItensProposta)
					{
						if(item.dataAprovacao == null && item.ordemServico.unidadePai==null){
							listaOS.addItem(item.ordemServico);
						}
					}
					if(listaOS.length > 0){
						showWindow();
					}else{
						_proposta = detalhamentoProposta.proposta;
						_proposta.itensProposta = detalhamentoProposta.getItensProposta();
						propostaController.finalizarProposta(_proposta,usr);
					}	
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(finalizarPropostaAutenticar);
				}
			}
			
			public function finalizarPropostaAutenticar(event:UserRegisterNumberModalEvent=null):void{
				finalizarProposta();
			}
			
			private function onFinalizarPropostaResult(event:ResultEvent = null):void
			{
				dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','PROPOSTA_FINALIZADA_SUCESSO'), MessageType.SUCCESS, 10000));	
				
				if(criarProposta){
					criarNovaProposta();
				}else{
					_proposta = event.result as Proposta;
					detalhamentoProposta.proposta = _proposta;
					adicionarProposta(_proposta);
				}
				
			}
			
			private function onFinalizarPropostaFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[Inicializao do combo cliente] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','PROPOSTA_FINALIZADA_ERRO'), MessageType.ERROR, 10000));
			}
			
			private function totalizarProposta(lista:ArrayCollection):Number{
				var totalValoresItem:Number = 0;
				for each (var ip:ItemProposta in lista){
					totalValoresItem += ip.valorSemDesconto;
				}
				return totalValoresItem;
			}
			
			private function validarEnviarParaCliente():Boolean
			{
				var total:Number = totalizarProposta(detalhamentoProposta.getItensProposta());
				var totalDiferenteZero:Boolean = false;
				var existeSemCondicaoDevolucaoSemReparo:Boolean = false;
				var existeComCondicao:Boolean = false;
				for each (var item:ItemProposta in detalhamentoProposta.getItensProposta()){
					if(_proposta.tipo == "Orçamento"){
						if(item.ordemServico.orcamento.condicao == "Com condição de reparo"){
							existeComCondicao = true;
							if(total != 0){
								totalDiferenteZero = true;
							}
						}else{
							existeSemCondicaoDevolucaoSemReparo = true;
						}
					}else{
						if(item.ordemServico.reparo.condicao == "Com condição de reparo"){
							existeComCondicao = true;
							if(total != 0){
								totalDiferenteZero = true;
							}
						}else{
							existeSemCondicaoDevolucaoSemReparo = true;
						}
					}	
				}
				if(existeComCondicao && totalDiferenteZero){
					return true;
				}else if(!existeComCondicao && existeSemCondicaoDevolucaoSemReparo){
					return true;
				}else{
					return false;
				}
			}
			
			private function enviarParaCliente(event:MouseEvent=null):void
			{
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					if(validarEnviarParaCliente()){
						if(detalhamentoProposta.validateContato()){
							_proposta = detalhamentoProposta.proposta;
							propostaController.enviarAoCliente(_proposta,usr);
						}else{
							dispatchEvent(new MensagemEvent("O contato não foi informado", MessageType.WARNING, 3000));
						}
					}else{
						dispatchEvent(new MensagemEvent("Alguns valores não foram informados", MessageType.WARNING, 3000));
					}
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(enviarParaClienteAutenticar);
				}
			}
			
			public function enviarParaClienteAutenticar(event:UserRegisterNumberModalEvent=null):void{
				enviarParaCliente();
			}
			
			private function onEnviarAoClienteResult(event:ResultEvent = null):void
			{
				_proposta = event.result as Proposta;
				detalhamentoProposta.proposta = _proposta;
				adicionarProposta(_proposta);
				dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','PROPOSTA_ENVIADA_AO_CLIENTE_SUCESSO'), MessageType.SUCCESS, 10000));
			}
			
			private function onEnviarAoClienteFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[Inicializao do combo cliente] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','PROPOSTA_ENVIADA_AO_CLIENTE_ERRO'), MessageType.ERROR, 10000));
			}
			
			private function arquivarProposta(event:MouseEvent=null):void
			{
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					propostaController.arquivarProposta(_proposta,usr);
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(arquivarPropostaAutenticar);
				}
			}
			
			public function arquivarPropostaAutenticar(event:UserRegisterNumberModalEvent=null):void{
				arquivarProposta();
			}
			
			private function onArquivarPropostaResult(event:ResultEvent = null):void
			{
				_proposta = event.result as Proposta;
				detalhamentoProposta.proposta = _proposta;
				adicionarProposta(_proposta);
			}
			
			private function onArquivarPropostaFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[Inicializao do combo cliente] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");		
			}
			
			
			private function cancelarProposta(event:MouseEvent=null):void
			{
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					propostaController.cancelarProposta(_proposta,usr);
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(cancelarPropostaAutenticar);
				}
			}
			
			public function cancelarPropostaAutenticar(event:UserRegisterNumberModalEvent=null):void{
				cancelarProposta();
			}
			
			private function onCancelarPropostaResult(event:ResultEvent = null):void
			{
				_proposta = event.result as Proposta;
				detalhamentoProposta.proposta = _proposta;
				
			}
			
			private function onCancelarPropostaFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[Inicializao do combo cliente] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");		
			}
			
			private function liberarAprovados(event:MouseEvent=null):void
			{
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					if(_proposta.statusString != "Aguardando aprovação do cliente"){
						dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','ACAO_INVALIDA_NESSE_STATUS'), MessageType.WARNING, 10000));
						return;
					}
					
					var existeItemPendenteDeLiberacao:Boolean = false;
					for each (var item:ItemProposta in detalhamentoProposta.getItensProposta())
					{
						if((item.dataAprovacao != null && item.dataLiberacao == null) || (_proposta.tipo == "Orçamento" ? item.ordemServico.orcamento.condicao != "Com condição de reparo" : item.ordemServico.reparo.condicao != "Com codição de reparo")){
							existeItemPendenteDeLiberacao = true;
							break;
						}
					}
					
					if(existeItemPendenteDeLiberacao){
						var listaItem:ArrayCollection = new ArrayCollection();
						var listaItensProposta:ArrayCollection = detalhamentoProposta.getItensProposta();
						for each (var item1:ItemProposta in listaItensProposta)
						{
							if((item1.dataAprovacao != null && item1.dataLiberacao == null) || (_proposta.tipo == "Orçamento" ? item1.ordemServico.orcamento.condicao != "Com condição de reparo" : item1.ordemServico.reparo.condicao != "Com codição de reparo")){
								listaItem.addItem(item1);
							}
						}
						propostaController.liberarItens(detalhamentoProposta.proposta,listaItem,usr);
					}else{
						dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','NENHUM_ITEM_PENDENTE_DE_LIBERACAO'), MessageType.WARNING, 10000));
					}
					
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(liberarAprovadosAutenticar);
				}
			}
			
			public function liberarAprovadosAutenticar(event:UserRegisterNumberModalEvent=null):void{
				liberarAprovados();
			}
			
			private function onLiberarItensResult(event:ResultEvent = null):void
			{
				_proposta = event.result as Proposta;
				detalhamentoProposta.proposta = _proposta;
				dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','ITENS_LIBERADOS_SUCESSO'), MessageType.SUCCESS, 10000));
				adicionarProposta(_proposta);
				habilitarBotaoLiberacao();
			}
			
			private function onLiberarItensFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[Inicializao do combo cliente] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");		
			}
			
			public function aprovarProposta(event:MouseEvent=null):void
			{
				Alert.show("Funcionou","Chamou",4,this);
			}
			
			private function reprovarProposta(event:MouseEvent):void
			{
				
			}
			private function voltar(event:MouseEvent):void
			{
				if(detalhamentoProposta.currentState == "editarItemProposta"){
					detalhamentoProposta.atualizarValores();
					detalhamentoProposta.voltar();
				}else{
					this.currentState = "listagem";
				}
				
			}
			
			public function criarNovaProposta():void
			{
				var listaOS:ArrayCollection = new ArrayCollection();
				var listaItensProposta:ArrayCollection = detalhamentoProposta.getItensProposta();
				for each (var item:ItemProposta in listaItensProposta)
				{
					if(item.dataAprovacao == null){
						listaOS.addItem(item.ordemServico);
					}
				}
				
				propostaService.criarPropostaOrcamento(listaOS);
				criarProposta = false
			}
			
			private function voltarNormal(event:MouseEvent=null):void
			{
				detalhamentoProposta.voltarNormal();
				this.currentState = "edicao";
			}
			
			private function onCriarPropostaResult(event:ResultEvent = null):void
			{
				_proposta = event.result as Proposta;
				detalhamentoProposta.proposta = _proposta;
				_listaProposta.addItem(_proposta);
				dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','PROPOSTA_CRIADA_SUCESSO'), MessageType.SUCCESS, 10000));
			}
			
			private function onCriarPropostaFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[onCriarNotaFiscalRemessaExpedicaoFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");		
			}
			
		]]>
	</fx:Script>
	
	<mx:states>
		<s:State name="listagem"/>
		<s:State name="edicao"/>
	</mx:states>
	
	<grid:MantisTable id="viewTable"
					  width="100%"
					  height="98%"
					  includeIn="listagem"
					  draggableColumns="true"
					  dataProvider="{_listaProposta}"
					  doubleClickEnabled="false"
					  >
		<grid:columns>
			
			<!-- CHANGE HERE THE ENTITY COLUMNS -->
			
			<!-- EDIT/REMOVE COLUMNS -->
			
			<mx:DataGridColumn headerText = "{resourceManager.getString('ApplicationResource','ACTION_COLUMN')}"	
							   draggable="false" width=".05"						 
							   editable="false"
							   sortable="false">
				<mx:itemRenderer>
					<fx:Component>
						<mx:HBox horizontalAlign="center"
								 verticalAlign="middle"
								 >
							
							<mx:Image source="@Embed(source='/assets/icons/edit.png')"
									  click="parentDocument.visualizarDetalhe(data, event)"
									  buttonMode="true"
									  useHandCursor="true"
									  toolTip="{resourceManager.getString('ApplicationResource','EDIT')}"
									  />						
						</mx:HBox>
					</fx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
			
			<dc:DataGridColumnFilter filterRenderer="components.grid.filtros.BeginWithFilterRenderer" id="nProposta" width=".15"
							   headerText = "{resourceManager.getString('ApplicationResource','NUMERO_PROPOSTA')}"
							   textAlign="center"
							   sortable="false" resizable="true"
							   dataField="numero"							   
							   />
			
			<dc:DataGridColumnFilter filterRenderer="components.grid.filtros.BeginWithFilterRenderer" id="cliente" width=".25"
							   headerText = "{resourceManager.getString('ApplicationResource','CLIENTE')}"
							   textAlign="center"
							   sortable="false" resizable="true"
							   dataField="nomeCliente"							   
							   />
			
			
			<dc:DataGridColumnFilter filterRenderer="components.grid.filtros.BeginWithFilterRenderer" id="notaFiscais" width=".15"
							   headerText = "NFs"
							   textAlign="center"
							   sortable="false" resizable="true"
							   dataField="nNFs"							   
							   />
			<dc:DataGridColumnFilter id="status" 
							   headerText = "{resourceManager.getString('ApplicationResource','STATUS')}"
							   dataField = "statusString" textAlign="center" sortable="false" resizable="true"
							   width=".20"
							   />
			
			<mx:DataGridColumn id="dataCriacao" width=".10"
							   headerText = "{resourceManager.getString('ApplicationResource','DATA_CRIACAO')}"
							   textAlign="center"
							   sortable="false" resizable="true"
							   dataField="dataCriacaoString"							   
							   />
			
			
			<dc:DataGridColumnFilter id="cTipo" width=".10"
							   headerText = "{resourceManager.getString('ApplicationResource','TIPO')}"
							   textAlign="center"
							   sortable="false" resizable="true"
							   dataField="tipo"							   
							   />
			
			
		</grid:columns>
	</grid:MantisTable>
	
	<proposta:DetalhamentoProposta id="detalhamentoProposta" excludeFrom="listagem" />
	
	<mx:HBox excludeFrom="listagem" width="100%" horizontalAlign="left">
		<mx:Button id="btIniciar"
				   label="{resourceManager.getString('ApplicationResource','INICIAR_PROPOSTA')}"
				   height="25"
				   icon="@Embed(source='/assets/icons/save.png')"
				   click="iniciarProposta(event)"
				   enabled="{_proposta.statusString == 'Nova'}"
				   />
		
		<mx:Button id="btSalvar"
				   label="{resourceManager.getString('ApplicationResource','SALVAR_PROPOSTA')}"
				   height="25"
				   icon="@Embed(source='/assets/icons/save.png')"
				   click="salvarProposta(event)"
				   enabled="{_proposta.statusString == 'Em elaboração' || _proposta.statusString == 'Aguardando aprovação do cliente'}"
				   />
		<mx:Button id="btEnviar" 
				   label="{resourceManager.getString('ApplicationResource','ENVIAR_PARA_CLIENTE')}"
				   height="25"
				   icon="@Embed(source='/assets/icons/page_gear.png')"
				   click="enviarParaCliente(event)"
				   enabled="{_proposta.statusString == 'Em elaboração'}"
				   />
		<mx:Button id="btLiberar" 
				   label="{resourceManager.getString('ApplicationResource','LIBERAR_ITENS')}"
				   height="25"
				   icon="@Embed(source='/assets/icons/page_gear.png')"
				   click="liberarAprovados(event)"
				   enabled="{_proposta.statusString == 'Aguardando aprovação do cliente' &amp;&amp; existeItemALiberar}"
				   />
		<mx:Button id="btFinalizar" 
				   label="Finalizar"
				   height="25"
				   icon="@Embed(source='/assets/icons/page_gear.png')"
				   click="finalizarProposta(event)"
				   enabled="{_proposta.statusString == 'Em elaboração' || _proposta.statusString == 'Aguardando aprovação do cliente'}"
				   />
		<mx:Button id="btVoltar" includeIn="edicao"
				   label="{resourceManager.getString('ApplicationResource','VOLTAR')}"
				   height="25"
				   icon="@Embed(source='/assets/icons/page_gear.png')"
				   click="voltar(event)"
				   />

	</mx:HBox>
</mx:VBox>
