<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:layout="layout.*"
			   xmlns:login="modules.login.*"
			   xmlns:messages="components.messages.*"
			   xmlns:tab="components.tab.*" 
			   xmlns:components="components.*" 
			   xmlns:table="components.datagrid.*"
			   xmlns:teste="modules.recebimento.notaFiscal.componentesInformacoesNotaFiscal.*"
			   xmlns:pessoa="modules.administrativo.parceiros.pessoa.*"
			   xmlns:view="modules.view.*" preinitialize="preInit()" initialize="init()" creationComplete="onCreation()"
			   minWidth="955" minHeight="600">


	<fx:Style source="Sose.css"/>
	
	<fx:Declarations>
		<!-- for global async messages 	-->
		
		<s:ChannelSet id="channelSet">	
			<s:AMFChannel url="{resourceManager.getString('ConfigurationResource','amf')}"/>
			<s:StreamingAMFChannel url="{resourceManager.getString('ConfigurationResource','streamingamf')}"/>     
		</s:ChannelSet>
		
		<mx:Consumer id="consumidorRecebimentoMessageService" destination="RecebimentoMessageServicePush" message="onMsgAreaTecnica(event)" />
		
		<mx:RemoteObject concurrency="single" id="timeUtils" destination="timeUtils" channelSet="{channelSet}"
						 endpoint="{resourceManager.getString('ConfigurationResource','amf')}">				
			<mx:method name="dataAtual"      
					   fault="onDataAtualFault(event)" 
					   result="onDataAtualResult(event)"
					   />
		</mx:RemoteObject>
	</fx:Declarations>
	
	<!-- Action Scripts -->
	<fx:Script>
		<![CDATA[		
			import components.messages.MensagemEvent;
			import components.messages.MessageType;
			
			import entities.GlobalMessage;
			import entities.administrativo.Usuario;
			
			import modules.view.MainPanel;
			import modules.view.eventos.LoginEvent;
			
			import mx.effects.Resize;
			import mx.effects.easing.Circular;
			import mx.events.EffectEvent;
			import mx.logging.ILogger;
			import mx.logging.Log;
			import mx.logging.LogEventLevel;
			import mx.managers.CursorManager;
			import mx.messaging.FlexClient;
			import mx.messaging.events.MessageEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import utils.ConfigurationUtil;
			import utils.ConfigureI18N;
			import utils.RemoteTarget;
			
			public var usuarioLogado:Usuario;
			
			public static const LOG:ILogger = Log.getLogger("RemoteLogging");

			private var mainPainel:MainPanel;
			
			public var dataAtual:Date;
			
			/**
			 * Configurations made before any component creation
			 */
			private function preInit():void
			{
				trace("Loading I18N strings...");
				ConfigureI18N.loadLocale();
				ConfigurationUtil.loadLocale();
				var target:utils.RemoteTarget = new RemoteTarget();
				//target.url = "http://127.0.0.1:8080/SoseWeb/logger";
				target.url = "http://192.168.1.3:8080/SoseWeb/logger";
				target.level = LogEventLevel.INFO;
				Log.addTarget(target);
			}
			
			private function init():void
			{
				consumidorRecebimentoMessageService.subscribe();
			}
			
			private function onCreation():void
			{
				timeUtils.dataAtual();
			}
			
			private function onDataAtualResult(event:ResultEvent = null):void
			{
				dataAtual = event.result as Date;
			}
			
			private function onDataAtualFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[Inicializao do combo cliente] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");		
			}
			
			private function onMsgAreaTecnica(event:MessageEvent):void{ 
				var globalMessage:GlobalMessage = event.message.body as GlobalMessage;	
				
				if (globalMessage.mensagem=="logout" && FlexClient.getInstance().id == globalMessage.conteudo){
					appContainer.removeChild(mainPainel);	
					appContainer.addChild(telaLogin);

				}
			} 
			
			private function completeHandler():void
			{
	
				
			}
			
			private function openDatabaseSuccess():void
			{
				try{
					appContainer.removeChild(telaLogin);	
				}catch(e:*)				{
					trace(e)
				}
				
				var effect:Resize = new Resize(this);
				effect.duration = 500;
//				effect.widthTo = 1100;				
//				effect.heightTo = 750;
				effect.easingFunction = Circular.easeOut;
				effect.addEventListener(EffectEvent.EFFECT_END,
					function(event:EffectEvent):void
					{
						mainPainel = new MainPanel();
						appContainer.addChild(mainPainel);
					});
				effect.play();
				
			}
			
			
			public function verificarUsuarioAutenticado():Boolean
			{
				if(Login.usuarioAutenticado== null){
					dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','REPARO_ERRO_USUARIO_AUTENTICACAO'), MessageType.ERROR, 10000));
					return false;
				}
				if(Login.usuarioAutenticado.bloqueado){
					dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','USUARIO_BLOQUEADO'), MessageType.ERROR, 10000));
					return false;
				}
				return true;
			}
			
			private function invalidaUsuarioAutenticado(event:Event):void
			{
				Login.usuarioAutenticado = null;
				dispatchEvent(new LoginEvent(LoginEvent.INVALIDAR_USUARIO_AUTENTICADO));
				
			}
			
			
		]]>
	</fx:Script>
	
	<mx:Canvas id="appContainer" width="100%" height="100%" styleName="appContainer" 
			   verticalScrollPolicy="off" horizontalScrollPolicy="off">
		<mx:Image source="assets/icons/sb32.png" top="12" left="14"/>
		<mx:Label text="Salesbuilder" styleName="appTitle" left="50" top="16"/>
		<mx:Canvas id="draggableHeader" left="-4" right="4" height="50" y="-4"/>
		<view:Login id="telaLogin" top="62" left="14" right="14" bottom="28" 
					success="openDatabaseSuccess()"/>
	</mx:Canvas>
</s:Application>
