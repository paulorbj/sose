<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:dc="components.grid.filtros.controles.*"
		 xmlns:components="components.*" width="100%" height="100%" horizontalAlign="center"
		 paddingBottom="20" paddingLeft="10" paddingRight="10" paddingTop="10"
		 xmlns:grid="components.grid.*" xmlns:combos="components.combos.*" verticalScrollPolicy="off"
		 initialize="init()" xmlns:expedicao="modules.expedicao.*">
	
	<fx:Declarations>
		
		<mx:RemoteObject concurrency="single" showBusyCursor="true" id="notaFiscalRemessaService" destination="notaFiscalRemessaService" endpoint="{resourceManager.getString('ConfigurationResource','amf')}">			
			<mx:method name="listarNotaFiscalSaida"      
					   fault="onListarNotaFiscalRemessasFault(event)" 
					   result="onListarNotaFiscalRemessasResult(event)"
					   />
			<mx:method name="buscarPorIdListagemNotaFiscalSaida"      
					   fault="onBuscarNotaFiscalRemessaFault(event)" 
					   result="onBuscarNotaFiscalRemessaResult(event)"
					   />
			
			<mx:method name="retornarOsParaBaixa"      
					   fault="onRetornarOsParaBaixaFault(event)" 
					   result="onRetornarOsParaBaixaResult(event)"
					   />
		</mx:RemoteObject>
		<mx:RemoteObject concurrency="single" showBusyCursor="true" id="expedicaoController" destination="expedicaoController" endpoint="{resourceManager.getString('ConfigurationResource','amf')}">			
			<mx:method name="iniciarNotaFiscalSaida"      
					   fault="onIniciarNotaFiscalSaidaFault(event)" 
					   result="onIniciarNotaFiscalSaidaResult(event)"
					   />
			<mx:method name="salvarNotaFiscalSaida"      
					   fault="onSalvarNotaFiscalSaidaFault(event)" 
					   result="onSalvarNotaFiscalSaidaResult(event)"
					   />
			<mx:method name="emitirNotaFiscalSaida"      
					   fault="onEmitirNotaFiscalSaidaFault(event)" 
					   result="onEmitirNotaFiscalSaidaResult(event)"
					   />
			<mx:method name="registrarDataSaidaNotaFiscalSaida"      
					   fault="onRegistrarDataSaidaNotaFiscalFault(event)" 
					   result="onRegistrarDataSaidaNotaFiscalResult(event)"
					   />
			<mx:method name="imprimirNotaFiscalSaida"      
					   fault="onImprimirNotaFiscalSaidaFault(event)" 
					   result="onImprimirNotaFiscalSaidaResult(event)"
					   />
			<mx:method name="solicitarNotaFiscalSaida"      
					   fault="onSolicitarNotaFiscalSaidaFault(event)" 
					   result="onSolicitarNotaFiscalSaidaResult(event)"
					   />
			<mx:method name="editarNotaFiscalSaida"      
					   fault="onEditarNotaFiscalSaidaFault(event)" 
					   result="onEditarNotaFiscalSaidaResult(event)"
					   />
			<mx:method name="finalizarNotaFiscalSaida"      
					   fault="onFinalizarNotaFiscalSaidaFault(event)" 
					   result="onFinalizarNotaFiscalSaidaResult(event)"
					   />
		</mx:RemoteObject>
		
		<mx:Consumer id="consumidorExpedicaoService" destination="ExpedicaoMessageServicePush" message="onMsgExpedicao(event)" />
		
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import components.PopupModalController;
			import components.events.UserRegisterNumberModalEvent;
			import components.messages.MensagemEvent;
			import components.messages.MessageType;
			
			import entities.GlobalMessage;
			import entities.administrativo.Usuario;
			import entities.administrativo.parceiros.Pessoa;
			import entities.expedicao.NotaFiscalRemessa;
			
			import modules.expedicao.eventos.ExpedicaoEvent;
			import modules.view.Login;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.ListEvent;
			import mx.managers.CursorManager;
			import mx.managers.PopUpManager;
			import mx.messaging.events.MessageEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import utils.GeradorRelatorios;
			import utils.MensagensAplicacao;
			import utils.Publicador;
			
			[Bindable]
			private var _listaNotaFiscalRemessa:ArrayCollection;
			
			[Bindable]
			private var _notaFiscalSaida:NotaFiscalRemessa;
			
			[Bindable]
			private var listaNumeroNotaFiscal:ArrayCollection = new ArrayCollection;
			[Bindable]
			private var notaFiscalSelecionada:String;
			
			[Bindable]
			private var listaCliente:ArrayCollection = new ArrayCollection;
			[Bindable]
			private var clienteSelecionado:String;			
			[Bindable]
			private var listaStatus:ArrayCollection = new ArrayCollection;
			[Bindable]
			private var statusSelecionado:String;
			private var gr:GeradorRelatorios = new GeradorRelatorios();
			
			private var byteArray:ByteArray;
			
			private function init():void
			{
				notaFiscalRemessaService.listarNotaFiscalSaida();	
				consumidorExpedicaoService.subscribe();
			}
			
			private function onMsgExpedicao(event:MessageEvent):void{ 
				var globalMessage:GlobalMessage = event.message.body as GlobalMessage;	
				
				if (globalMessage.mensagem==MensagensAplicacao.NOTA_FISCAL_REMESSA_CRIADA){
					//adicionarNotaFiscal(globalMessage.conteudo as NotaFiscalRemessa);
					notaFiscalRemessaService.listarNotaFiscalSaida();
				}
				if (globalMessage.mensagem==MensagensAplicacao.ATUALIZAR_NOTA_FISCAL_REMESSA){
					//adicionarNotaFiscal(globalMessage.conteudo as NotaFiscalRemessa);
					notaFiscalRemessaService.listarNotaFiscalSaida();
				}
			} 
			
			public function adicionarNotaFiscal(notaFiscal:NotaFiscalRemessa):void
			{
				var notaFiscalAux:NotaFiscalRemessa = null;
				var encontrou:Boolean = false;
				for(var i:int=0; i<_listaNotaFiscalRemessa.length; i++){
					notaFiscalAux = _listaNotaFiscalRemessa.getItemAt(i) as NotaFiscalRemessa; 
					if(notaFiscalAux.id == notaFiscal.id){
						var orcRepSub:Object = _listaNotaFiscalRemessa.removeItemAt(i);
						_listaNotaFiscalRemessa.addItemAt(notaFiscal,i);
						encontrou = true;
						break;
					}
				}
				if(!encontrou){
					_listaNotaFiscalRemessa.addItem(notaFiscal);
				}
			}
			
			private function onListarNotaFiscalRemessasResult(event:ResultEvent = null):void
			{
				_listaNotaFiscalRemessa = event.result as ArrayCollection;	
			}
			
			private function onListarNotaFiscalRemessasFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[Inicializao do combo cliente] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");		
			}
			
			private function onIniciarNotaFiscalSaidaResult(event:ResultEvent = null):void
			{
				_notaFiscalSaida = event.result as NotaFiscalRemessa;
				detalhamentoNotaFiscalSaida.notaFiscalSaida = _notaFiscalSaida;
				Publicador.enviarMensagemExpedicao(MensagensAplicacao.ATUALIZAR_NOTA_FISCAL_REMESSA,_notaFiscalSaida);
				dispatchEvent(new MensagemEvent("Nota fiscal iniciada com sucesso", MessageType.SUCCESS, 3000));
			}
			
			private function onIniciarNotaFiscalSaidaFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[Inicializao do combo cliente] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");	
				dispatchEvent(new MensagemEvent("Erro ao iniciar nota fiscal", MessageType.ERROR, 3000));
			}
			
			private function onSalvarNotaFiscalSaidaResult(event:ResultEvent = null):void
			{
				_notaFiscalSaida = event.result as NotaFiscalRemessa;
				detalhamentoNotaFiscalSaida.notaFiscalSaida = _notaFiscalSaida;
				Publicador.enviarMensagemExpedicao(MensagensAplicacao.ATUALIZAR_NOTA_FISCAL_REMESSA,_notaFiscalSaida);
				dispatchEvent(new MensagemEvent("Nota fiscal salva com sucesso", MessageType.SUCCESS, 3000));
			}
			
			private function onSalvarNotaFiscalSaidaFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[Inicializao do combo cliente] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");		
				dispatchEvent(new MensagemEvent("Erro ao salvar nota fiscal", MessageType.ERROR, 3000));
			}
			
			private function onEmitirNotaFiscalSaidaResult(event:ResultEvent = null):void
			{
				_notaFiscalSaida = event.result as NotaFiscalRemessa;
				detalhamentoNotaFiscalSaida.notaFiscalSaida = _notaFiscalSaida;
				Publicador.enviarMensagemExpedicao(MensagensAplicacao.ATUALIZAR_NOTA_FISCAL_REMESSA,_notaFiscalSaida);
				dispatchEvent(new MensagemEvent("Nota fiscal emitida com sucesso", MessageType.SUCCESS, 3000));
			}
			
			private function onEmitirNotaFiscalSaidaFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[Inicializao do combo cliente] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				var str:String = event.fault.faultString.substr(0,22);
				var i:Number;
				if(str == "br.com.sose.exceptions"){
					i = event.fault.faultString.indexOf(":");
					dispatchEvent(new MensagemEvent(event.fault.faultString.substring(i+1), MessageType.ERROR, 3000));
				}else{
					dispatchEvent(new MensagemEvent("Erro ao emitir nota fiscal", MessageType.ERROR, 3000));	
				}	
				
			}
			
			private function onRegistrarDataSaidaNotaFiscalResult(event:ResultEvent = null):void
			{
				_notaFiscalSaida = event.result as NotaFiscalRemessa;
				detalhamentoNotaFiscalSaida.notaFiscalSaida = _notaFiscalSaida;
				Publicador.enviarMensagemExpedicao(MensagensAplicacao.ATUALIZAR_NOTA_FISCAL_REMESSA,_notaFiscalSaida);
				dispatchEvent(new MensagemEvent("SaÃ­da de material registrada com sucesso", MessageType.SUCCESS, 3000));
			}
			
			private function onRegistrarDataSaidaNotaFiscalFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[Inicializao do combo cliente] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");	
				dispatchEvent(new MensagemEvent("Erro ao registrar saÃ­da de material", MessageType.ERROR, 3000));
			}
			
			private function onSolicitarNotaFiscalSaidaResult(event:ResultEvent = null):void
			{
				_notaFiscalSaida = event.result as NotaFiscalRemessa;
				detalhamentoNotaFiscalSaida.notaFiscalSaida = _notaFiscalSaida;
				Publicador.enviarMensagemExpedicao(MensagensAplicacao.ATUALIZAR_NOTA_FISCAL_REMESSA,_notaFiscalSaida);
				dispatchEvent(new MensagemEvent("Nota fiscal solicitada com sucesso", MessageType.SUCCESS, 3000));
			}
			
			private function onSolicitarNotaFiscalSaidaFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[Inicializao do combo cliente] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				dispatchEvent(new MensagemEvent("Erro ao solicitar nota fiscal", MessageType.ERROR, 3000));
			}
			
			private function onImprimirNotaFiscalSaidaResult(event:ResultEvent = null):void
			{
				_notaFiscalSaida = event.result as NotaFiscalRemessa;
				detalhamentoNotaFiscalSaida.notaFiscalSaida = _notaFiscalSaida;
			}
			
			private function onImprimirNotaFiscalSaidaFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[Inicializao do combo cliente] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");		
			}
			
			private function onEditarNotaFiscalSaidaResult(event:ResultEvent = null):void
			{
				_notaFiscalSaida = event.result as NotaFiscalRemessa;
				detalhamentoNotaFiscalSaida.notaFiscalSaida = _notaFiscalSaida;
				dispatchEvent(new MensagemEvent("Nota fiscal editada com sucesso", MessageType.SUCCESS, 3000));
			}
			
			private function onEditarNotaFiscalSaidaFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[Inicializao do combo cliente] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");	
				dispatchEvent(new MensagemEvent("Erro ao editar nota fiscal", MessageType.ERROR, 3000));
			}
			
			private function onFinalizarNotaFiscalSaidaResult(event:ResultEvent = null):void
			{
				_notaFiscalSaida = event.result as NotaFiscalRemessa;
				detalhamentoNotaFiscalSaida.notaFiscalSaida = _notaFiscalSaida;
				Publicador.enviarMensagemExpedicao(MensagensAplicacao.ATUALIZAR_NOTA_FISCAL_REMESSA,_notaFiscalSaida);
				dispatchEvent(new MensagemEvent("Nota fiscal finalizada com sucesso", MessageType.SUCCESS, 3000));
			}
			
			private function onFinalizarNotaFiscalSaidaFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[Inicializao do combo cliente] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				dispatchEvent(new MensagemEvent("Erro ao finalizar nota fiscal", MessageType.ERROR, 3000));
			}
			
			public function visualizarDetalhe(data:Object=null, event:Event=null):void
			{	
				
				//for double click
				if(data==null && event is ListEvent){
					var event2:ListEvent = event as ListEvent;						
					data = _listaNotaFiscalRemessa.getItemAt(event2.rowIndex);				
				}
				
				if(data)
					_notaFiscalSaida = data as NotaFiscalRemessa;
				
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					notaFiscalRemessaService.buscarPorIdListagemNotaFiscalSaida(_notaFiscalSaida.id);
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(visualizarNotaFiscalAutenticar);	
				}
			}
			
			public function visualizarNotaFiscalAutenticar(event:UserRegisterNumberModalEvent=null):void{
				visualizarDetalhe();
			}
			
			public function retornarOsParaBaixa(data:Object=null, event:Event=null):void
			{	
				
				//for double click
				if(data==null && event is ListEvent){
					var event2:ListEvent = event as ListEvent;						
					data = _listaNotaFiscalRemessa.getItemAt(event2.rowIndex);				
				}
				
				if(data)
					_notaFiscalSaida = data as NotaFiscalRemessa;
				
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					notaFiscalRemessaService.retornarOsParaBaixa(_notaFiscalSaida);
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(retornarOSParaBaixaAutenticar);	
				}
			}
			
			public function retornarOSParaBaixaAutenticar(event:UserRegisterNumberModalEvent=null):void{
				retornarOsParaBaixa();
			}
			
			private function onRetornarOsParaBaixaResult(event:ResultEvent = null):void
			{
				var _resultado:Boolean = event.result as Boolean;
				
				if(_resultado) {
					Publicador.enviarMensagemExpedicao(MensagensAplicacao.ATUALIZAR_BAIXA_NOTA_FISCAL_REMESSA,null);
					notaFiscalRemessaService.listarNotaFiscalSaida();
					dispatchEvent(new MensagemEvent("Nota fiscal removida e OS's retornadas para baixa", MessageType.SUCCESS, 5000));
				}else{
					dispatchEvent(new MensagemEvent("Erro ao realizar a operaÃ§Ã£o", MessageType.ERROR, 5000));
				}	
			}
			
			private function onRetornarOsParaBaixaFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[onRetornarOsParaBaixaFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				dispatchEvent(new MensagemEvent("Erro ao buscar nota fiscal", MessageType.ERROR, 5000));
			}
			
			private function onBuscarNotaFiscalRemessaResult(event:ResultEvent = null):void
			{
				this.currentState = "edicao";
				_notaFiscalSaida = event.result as NotaFiscalRemessa;
				detalhamentoNotaFiscalSaida.notaFiscalSaida = _notaFiscalSaida;	
				
			}
			
			private function onBuscarNotaFiscalRemessaFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[onBuscarNotaFiscalRemessaFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				dispatchEvent(new MensagemEvent("Erro ao buscar nota fiscal", MessageType.ERROR, 5000));
			}
			
			private function iniciarNotaFiscalSaida(event:MouseEvent=null):void
			{
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					_notaFiscalSaida = detalhamentoNotaFiscalSaida.notaFiscalSaida;
					expedicaoController.channelSet = parentApplication.channelSet;
					expedicaoController.iniciarNotaFiscalSaida(_notaFiscalSaida,usr);
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(iniciarNotaFiscalSaidaAutenticar);	
				}
				
			}
			
			public function iniciarNotaFiscalSaidaAutenticar(event:UserRegisterNumberModalEvent=null):void{
				iniciarNotaFiscalSaida();
			}
			
			private function salvarNotaFiscalSaida(event:MouseEvent=null):void
			{
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					if(detalhamentoNotaFiscalSaida.validarEnderecoEntregaMinimo()){
						_notaFiscalSaida = detalhamentoNotaFiscalSaida.notaFiscalSaida;
						expedicaoController.channelSet = parentApplication.channelSet;
						expedicaoController.salvarNotaFiscalSaida(_notaFiscalSaida,usr);
					}
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(salvarNotaFiscalSaidaAutenticar);	
				}
			}
			
			public function salvarNotaFiscalSaidaAutenticar(event:UserRegisterNumberModalEvent=null):void{
				salvarNotaFiscalSaida();
			}
			
			private function emitirNotaFiscalSaida(event:MouseEvent=null):void
			{
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					if(detalhamentoNotaFiscalSaida.validarCamposEmissao() && detalhamentoNotaFiscalSaida.validarEnderecoEntregaMinimo()){
						if(detalhamentoNotaFiscalSaida.validarEnderecoEntrega()){
							_notaFiscalSaida = detalhamentoNotaFiscalSaida.notaFiscalSaida;
							expedicaoController.channelSet = parentApplication.channelSet;
							expedicaoController.emitirNotaFiscalSaida(_notaFiscalSaida,usr);
						}else{
							dispatchEvent(new MensagemEvent("Nenhuma informaÃ§Ã£o disponÃ­vel para gerar o relatÃ³rio!", MessageType.WARNING, 3000));
						}
					}else{
						dispatchEvent(new MensagemEvent("Campos obrigatÃ³rios nÃ£o foram preenchidos", MessageType.WARNING, 3000));
					}
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(emitirNotaFiscalSaidaAutenticar);	
				}
				
			}
			
			public function emitirNotaFiscalSaidaAutenticar(event:UserRegisterNumberModalEvent=null):void{
				emitirNotaFiscalSaida();
			}
			
			private function registrarDataSaidaNotaFiscalSaida(event:MouseEvent=null):void
			{
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					if(detalhamentoNotaFiscalSaida.validarCampos() && detalhamentoNotaFiscalSaida.validarEnderecoEntregaMinimo()){
						if(detalhamentoNotaFiscalSaida.validarEnderecoEntrega()){
							_notaFiscalSaida = detalhamentoNotaFiscalSaida.notaFiscalSaida;
							expedicaoController.channelSet = parentApplication.channelSet;
							expedicaoController.registrarDataSaidaNotaFiscalSaida(_notaFiscalSaida,detalhamentoNotaFiscalSaida.dataSaida,usr);
						}
					}else{
						dispatchEvent(new MensagemEvent("Campos obrigatÃ³rios nÃ£o foram preenchidos", MessageType.WARNING, 3000));
					}
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(registrarDataSaidaNotaFiscalSaidaAutenticar);	
				}
			}
			
			public function registrarDataSaidaNotaFiscalSaidaAutenticar(event:UserRegisterNumberModalEvent=null):void{
				registrarDataSaidaNotaFiscalSaida();
			}
			
			private function solicitarEmissaoNotaFiscalSaida(event:MouseEvent=null):void
			{
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){	
					if(detalhamentoNotaFiscalSaida.validarVolumes()){
						if(detalhamentoNotaFiscalSaida.validarEnderecoEntrega()){
							if(detalhamentoNotaFiscalSaida.validarCamposSolicitar()){
								_notaFiscalSaida = detalhamentoNotaFiscalSaida.notaFiscalSaida;
								expedicaoController.channelSet = parentApplication.channelSet;
								expedicaoController.solicitarNotaFiscalSaida(_notaFiscalSaida,usr);
							}else{
								dispatchEvent(new MensagemEvent("Campos obrigatÃ³rios nÃ£o foram preenchidos", MessageType.WARNING, 3000));
							}
						}else{
							dispatchEvent(new MensagemEvent("Nenhum endereÃ§o de entrega foi selecionado!", MessageType.WARNING, 3000));
						}
					}
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(solicitarEmissaoNotaFiscalSaidaAutenticar);	
				}
			}
			
			public function solicitarEmissaoNotaFiscalSaidaAutenticar(event:UserRegisterNumberModalEvent=null):void{
				solicitarEmissaoNotaFiscalSaida();
			}
			
			private function imprimirNotaFiscalSaida(event:MouseEvent):void
			{
				_notaFiscalSaida = detalhamentoNotaFiscalSaida.notaFiscalSaida;
				expedicaoController.imprimirNotaFiscalSaida(_notaFiscalSaida);
			}
			
			private function exportar(event:MouseEvent):void
			{
				_notaFiscalSaida = detalhamentoNotaFiscalSaida.notaFiscalSaida;
				if(_notaFiscalSaida != null && _notaFiscalSaida.ordensServico != null && _notaFiscalSaida.ordensServico.length > 0){
					ordenarLista(_notaFiscalSaida.ordensServico);
					gr.gerarRelatorio(_notaFiscalSaida, "relatorioNotaFiscalSaida",_notaFiscalSaida.ordensServico,onCreateFileResult,onCreateFileFault);
				}else{
					dispatchEvent(new MensagemEvent("Nenhuma informaÃ§Ã£o disponÃ­vel para gerar o relatÃ³rio!", MessageType.WARNING, 3000));
				}
			}
			
			private function ordenarLista(lista:ArrayCollection):void
			{
				if(lista != null){
					var sortA:Sort = new Sort();
					sortA.fields=[new SortField("osPaiOrdenar",false,false,true),new SortField("osFilhaOrdenar",false,false,true)];
					lista.sort=sortA;
					lista.refresh();
				}
			}
			
			private function onCreateFileResult(event:ResultEvent):void
			{
				CursorManager.removeAllCursors();
				byteArray = event.result as ByteArray;
				dispatchEvent(new MensagemEvent("Arquivo criado com sucesso", MessageType.INFO, 3000));
				
				Alert.noLabel = "NÃ£o";
				Alert.yesLabel = "Sim"
				var alert:Alert = new Alert();
				alert = Alert.show("Deseja salvar o arquivo?","Download completo",3,this,alertClickHandler);
				PopUpManager.centerPopUp(alert);
				var newY:Number = 180;
				alert.move(alert.x, newY);
			}
			
			private function openHandler(event:Event):void
			{
				//dispatchEvent(new MensagemEvent("Texto openHandler", MessageType.INFO, 3000));
			}
			
			private function alertClickHandler(event:CloseEvent):void
			{
				if (event.detail == Alert.YES)
				{
					gr.saveFile(byteArray,"Nota fiscal de saÃ­da");
				}
				else
				{
					dispatchEvent(new MensagemEvent("ExportaÃ§Ã£o foi cancelada", MessageType.INFO, 3000));
				}
			}
			
			private function onCreateFileFault(event:FaultEvent):void
			{
				// Return the cursor to its original state
				CursorManager.removeAllCursors();
				dispatchEvent(new MensagemEvent("Erro ao criar arquivo", MessageType.ERROR, 3000));
				// Debug output
				trace("[OrdersComponent.handleUsersServicefindAllFault] [" 
					+ event.fault.faultCode + "] " 
					+ event.fault.faultString 
					+ " (" + event.fault.faultDetail +
					")");
			}
			
			private function finalizarNotaFiscalSaida(event:MouseEvent=null):void
			{
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					if(detalhamentoNotaFiscalSaida.validarCamposFinalizar() && detalhamentoNotaFiscalSaida.validarEnderecoEntregaMinimo()){
						if(detalhamentoNotaFiscalSaida.validarEnderecoEntrega()){
							_notaFiscalSaida = detalhamentoNotaFiscalSaida.notaFiscalSaida;
							expedicaoController.channelSet = parentApplication.channelSet;
							expedicaoController.finalizarNotaFiscalSaida(_notaFiscalSaida,usr);
						}
					}else{
						dispatchEvent(new MensagemEvent("Campos obrigatÃ³rios nÃ£o foram preenchidos", MessageType.WARNING, 3000));
					}
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(finalizarNotaFiscalSaidaAutenticar);	
				}
				
			}
			
			public function finalizarNotaFiscalSaidaAutenticar(event:UserRegisterNumberModalEvent=null):void{
				finalizarNotaFiscalSaida();
			}
			
			private function gerarEtiquetas(event:MouseEvent):void
			{
				_notaFiscalSaida = detalhamentoNotaFiscalSaida.notaFiscalSaida;
				expedicaoController.gerarEtiquetas(_notaFiscalSaida);
			}
			
			private function voltar(event:MouseEvent):void
			{
				this.currentState = "listagem";
			}			
			
		]]>
	</fx:Script>
	
	<mx:states>
		<s:State name="listagem"/>
		<s:State name="edicao"/>
	</mx:states>
	
	<mx:VBox width="100%" height="100%" verticalGap="0" includeIn="listagem" verticalScrollPolicy="off" >
		<grid:MantisTable id="viewTable"
						  width="1200"
						  height="100%"
						  includeIn="listagem"
						  draggableColumns="true"
						  dataProvider="{_listaNotaFiscalRemessa}"
						  doubleClickEnabled="false"
						  >
			<grid:columns>
				
				<!-- CHANGE HERE THE ENTITY COLUMNS -->
				
				<!-- EDIT/REMOVE COLUMNS -->
				
				<mx:DataGridColumn headerText = "{resourceManager.getString('ApplicationResource','ACTION_COLUMN')}"	
								   draggable="false" width="40"							 
								   editable="false"
								   sortable="false">
					<mx:itemRenderer>
						<fx:Component>
							<mx:HBox horizontalAlign="center"
									 verticalAlign="middle"
									 >
								<fx:Script>
									<![CDATA[
										import modules.view.Login;
									]]>
								</fx:Script>
								
								<mx:Image source="@Embed(source='/assets/icons/edit.png')"
										  click="parentDocument.visualizarDetalhe(data, event)"
										  buttonMode="true"
										  useHandCursor="true"
										  toolTip="{resourceManager.getString('ApplicationResource','EDIT')}"
										  />	
								
								<mx:Image source="@Embed(source='/assets/icons/arrow_undo.png')"
										  click="parentDocument.retornarOsParaBaixa(data, event)"
										  buttonMode="true"
										  useHandCursor="true"
										  visible="{Login.currentUser.perfil.subMenuExpedicaoPermitirRetornarOS}"
										  toolTip="Retornar OS's para baixa"
										  />	
							</mx:HBox>
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
				
				<dc:DataGridColumnFilter  id="cliente" width="250" filterRenderer="components.grid.filtros.BeginWithFilterRenderer"
								   headerText = "{resourceManager.getString('ApplicationResource','CLIENTE')}"
								   textAlign="center"
								   sortable="false"
								   dataField="nomeCliente"							   
								   />
				
				<dc:DataGridColumnFilter  id="status" width="100" textAlign="center"
								   headerText = "{resourceManager.getString('ApplicationResource','STATUS')}"
								   dataField = "statusString"
								   />
				
				<dc:DataGridColumnFilter filterRenderer="components.grid.filtros.DateFilterRenderer" id="dataCriacao" width="80"
								   headerText = "{resourceManager.getString('ApplicationResource','DATA_CRIACAO')}"
								   textAlign="center"
								   sortable="false"
								   dataField="dtCriacaoString"							   
								   />
				
				
				<dc:DataGridColumnFilter filterRenderer="components.grid.filtros.DateFilterRenderer" id="dataSaida" width="80"
								   headerText = "Data saÃ­da"
								   textAlign="center"
								   sortable="false"
								   dataField="dtSaidaString"							   
								   />
				
				<dc:DataGridColumnFilter  id="numeroNF" width="60" filterRenderer="components.grid.filtros.BeginWithFilterRenderer"
								   headerText = "{resourceManager.getString('ApplicationResource','NUMERO_NOTA_FISCAL')}"
								   textAlign="center"
								   sortable="false"
								   dataField="numero"							   
								   />
				
			</grid:columns>
		</grid:MantisTable>
	</mx:VBox>
	
	<expedicao:NotaFiscalSaida id="detalhamentoNotaFiscalSaida" excludeFrom="listagem" />
	
	<mx:HBox excludeFrom="listagem" width="100%" horizontalAlign="left">
		<mx:Button id="btIniciar"
				   label="{resourceManager.getString('ApplicationResource','INICIAR_NF_SAIDA')}"
				   height="25"
				   icon="@Embed(source='/assets/icons/save.png')"
				   click="iniciarNotaFiscalSaida(event)"
				   enabled="{_notaFiscalSaida.statusString == 'Nova'}"
				   />
		
		<mx:Button id="btSalvar"
				   label="{resourceManager.getString('ApplicationResource','SALVAR_NF_SAIDA')}"
				   height="25"
				   icon="@Embed(source='/assets/icons/save.png')"
				   click="salvarNotaFiscalSaida(event)"
				   enabled="{_notaFiscalSaida.dtCriacao != null &amp;&amp; _notaFiscalSaida.saidaRegistradaEm == null}"
				   />
		<mx:Button id="btSolicitarEmissao" 
				   label="Solicitar emissÃ£o"
				   height="25"
				   icon="@Embed(source='/assets/icons/page_gear.png')"
				   click="solicitarEmissaoNotaFiscalSaida(event)"
				   enabled="{_notaFiscalSaida.statusString == 'Iniciada' &amp;&amp;  _notaFiscalSaida.solicitacaoRegistradaEm == null}"
				   />
		
		<mx:Button id="btEmitir" 
				   label="{resourceManager.getString('ApplicationResource','EMITIR_NF_SAIDA')}"
				   height="25"
				   icon="@Embed(source='/assets/icons/page_gear.png')"
				   click="emitirNotaFiscalSaida(event)"
				   enabled="{_notaFiscalSaida.statusString == 'Emitir nota fiscal' &amp;&amp; _notaFiscalSaida.solicitacaoRegistradaEm != null}"
				   />
		
		<mx:Button id="btRegistrarSaida" 
				   label="Registrar saÃ­da"
				   height="25"
				   icon="@Embed(source='/assets/icons/page_gear.png')"
				   click="registrarDataSaidaNotaFiscalSaida(event)"
				   enabled="{_notaFiscalSaida.statusString == 'Emitida' &amp;&amp; _notaFiscalSaida.saidaRegistradaEm == null}"
				   />
		<mx:Button id="btImprimir" 
				   label="Exportar"
				   height="25"
				   icon="@Embed(source='/assets/icons/page_gear.png')"
				   click="exportar(event)"
				   enabled="true"
				   />
		<mx:Button id="btGerarEtiquetas"
				   label="{resourceManager.getString('ApplicationResource','GERAR_ETIQUETAS')}"
				   height="25"
				   icon="@Embed(source='/assets/icons/page_gear.png')"
				   click="gerarEtiquetas(event)"
				   enabled="false"
				   />
		<mx:Button id="btFinalizar"
				   label="{resourceManager.getString('ApplicationResource','FINALIZAR_NF_SAIDA')}"
				   height="25"
				   icon="@Embed(source='/assets/icons/page_gear.png')"
				   click="finalizarNotaFiscalSaida(event)"
				   enabled="{_notaFiscalSaida.statusString == 'Emitida' &amp;&amp; _notaFiscalSaida.saidaRegistradaEm != null}"
				   />
		<mx:Button id="btVoltar" 
				   label="{resourceManager.getString('ApplicationResource','VOLTAR')}"
				   height="25"
				   icon="@Embed(source='/assets/icons/back.png')"
				   click="voltar(event)"
				   />
	</mx:HBox>
	
</mx:VBox>
