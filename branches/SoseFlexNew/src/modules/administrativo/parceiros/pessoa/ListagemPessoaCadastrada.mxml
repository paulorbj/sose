<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" initialize="initializeListagem()"
		 xmlns:components="components.*" width="100%"
		 xmlns:grid="components.grid.*">
	
	<fx:Declarations>
		<mx:RemoteObject id="pessoaService" destination="pessoaService" endpoint="{resourceManager.getString('ConfigurationResource','amf')}">			
			<mx:method name="buscarPorId"      
					   fault="onBuscarPorIdFault(event)" 
					   result="onBuscarPorIdResult(event)"
					   />
		</mx:RemoteObject>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import components.ConfirmarExclusaoModal;
			import components.RemoveModalEvent;
			import components.messages.MensagemEvent;
			import components.messages.MessageType;
			
			import entities.administrativo.parceiros.Pessoa;
			
			import modules.administrativo.parceiros.pessoa.eventos.PessoaEvent;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.events.ListEvent;
			import mx.managers.CursorManager;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import utils.ScreenUtils;
			
			[Bindable]
			private var listaPessoa:ArrayCollection = new ArrayCollection;
			
			[Bindable]
			private var listaPessoaCompleta:ArrayCollection = new ArrayCollection;
			
			private var pessoa:Pessoa;
			
			[Bindable]
			private var listaNome:ArrayCollection = new ArrayCollection;
			[Bindable]
			private var nomeSelecionado:String;
			
			[Bindable]
			private var listaTipo:ArrayCollection = new ArrayCollection;
			[Bindable]
			private var tipoSelecionado:String;
			
			[Bindable]
			private var listaTipoPessoa:ArrayCollection = new ArrayCollection;
			[Bindable]
			private var tipoPessoaSelecionado:String;
			
			[Bindable]
			private var listaRgIe:ArrayCollection = new ArrayCollection;
			[Bindable]
			private var rgIeSelecionado:String;
			
			[Bindable]
			private var listaCpfCnpj:ArrayCollection = new ArrayCollection;
			[Bindable]
			private var cpfCnpjSelecionado:String;
			
			private var sortPessoa:mx.collections.Sort;
			
			private function initializeListagem():void
			{
				sortPessoa = new Sort();
				sortPessoa.fields=[new SortField("nomeSistema",true,false,false)];
			}
			
			private function sortListaPessoa(lista:ArrayCollection):void
			{
				lista.sort = sortPessoa;
				lista.refresh();
			}
			
			public function setListaPessoa(lista:ArrayCollection):void
			{
				if(lista){
					sortListaPessoa(lista);
					listaPessoa = lista;
					listaPessoaCompleta = new ArrayCollection();
					listaPessoaCompleta.addAll(listaPessoa);
					popularFiltros();
					atualizaCombos();
				}
			}
			
			public function adicionarPessoa(pessoa:Pessoa):void
			{
				var pessoaAux:Pessoa = null;
				var encontrou:Boolean = false;
				for(var i:int=0; i<listaPessoa.length; i++){
					pessoaAux = listaPessoa.getItemAt(i) as Pessoa; 
					if(pessoaAux.id == pessoa.id){	
						var orcRepSub:Object = listaPessoa.removeItemAt(i);
						listaPessoa.addItemAt(pessoa,i);
						encontrou = true;
						break;
					}
				}
				if(!encontrou){
					listaPessoa.addItem(pessoa);
				}
				
				for(var i:int=0; i<listaPessoaCompleta.length; i++){
					pessoaAux = listaPessoaCompleta.getItemAt(i) as Pessoa; 
					if(pessoaAux.id == pessoa.id){	
						var atividadeSub:Object = listaPessoaCompleta.removeItemAt(i);
						listaPessoaCompleta.addItemAt(pessoa,i);
						encontrou = true;
						break;
					}
				}
				if(!encontrou){
					listaPessoaCompleta.addItem(pessoa);
				}
				
				sortListaPessoa(listaPessoa);
				sortListaPessoa(listaPessoaCompleta);
				
				popularFiltros();
				atualizaCombos();
			}

			private function onBuscarPorIdResult(event:ResultEvent = null):void
			{
				CursorManager.removeAllCursors(); 
				var pessoa:Pessoa = event.result as Pessoa;
				dispatchEvent(new PessoaEvent(PessoaEvent.EDITAR_PESSOA, pessoa));
			}
			
			private function onBuscarPorIdFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[SalvarAtividadeFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				dispatchEvent(new MensagemEvent("Erro ao buscar pessoa", MessageType.ERROR, 10000));			
			}
			
			public function editItem(data:Object, event:Event, edit:Boolean):void
			{					
				//for double click
				if(data==null && event is ListEvent){
					var event2:ListEvent = event as ListEvent						
					data = listaPessoa.getItemAt(event2.rowIndex);				
				}
				
				pessoaService.buscarPorId((data as Pessoa).id);
			}
			
			public function excluirItem(data:Object, event:Event, edit:Boolean):void
			{			
				pessoa = data as Pessoa;
				var modal:ConfirmarExclusaoModal=ConfirmarExclusaoModal(PopUpManager.createPopUp( this, ConfirmarExclusaoModal , true));
				modal.addEventListener(RemoveModalEvent.REMOVE_MODAL, excluir);
				PopUpManager.centerPopUp(modal);
				
			}
			
			private function excluir(event:RemoveModalEvent):void
			{
				dispatchEvent(new PessoaEvent(PessoaEvent.EXCLUIR_PESSOA,pessoa));
				pessoa = null;
			}
			
			private function labelFunctionTipo(item:Object, column:AdvancedDataGridColumn):String{
				switch((item as Pessoa).tipo)
				{
					case ScreenUtils.TIPO_CLIENTE.id:
						return ScreenUtils.TIPO_CLIENTE.nome;
					case ScreenUtils.TIPO_FORNECEDOR.id:
						return ScreenUtils.TIPO_FORNECEDOR.nome;
					case ScreenUtils.TIPO_PRESTADOR_SERVICO.id:
						return ScreenUtils.TIPO_PRESTADOR_SERVICO.nome;
					case ScreenUtils.TIPO_TRANSPORTADORA.id:
						return ScreenUtils.TIPO_TRANSPORTADORA.nome;
					default:
						return "";
				}
			}
			
			private function labelFunctionTipoPessoa(item:Object, column:AdvancedDataGridColumn):String{
				switch((item as Pessoa).tipoPessoa)
				{
					case ScreenUtils.TIPO_PESSOA_FISICA.id:
						return ScreenUtils.TIPO_PESSOA_FISICA.nome;
					case ScreenUtils.TIPO_PESSOA_JURIDICA.id:
						return ScreenUtils.TIPO_PESSOA_JURIDICA.nome;
					default:
						return "";
				}
			}
			
			public function atualizaCombos(event:Event=null):void{
				configurarFiltroLista();
			}
			
			private function configurarFiltroLista():void
			{
				listaPessoa.filterFunction = function stateFilterFunc(item:Object):Boolean 
				{
					var bolNome:Boolean;
					if(cbNome.selectedItem == null || cbNome.selectedItem == "" || cbNome.selectedItem == 'Todos'){
						bolNome = true;
					}else{
						bolNome = item.nomeSistema.toLowerCase() == cbNome.selectedItem.toLowerCase();
					}
					
					var bolCpfCnpj:Boolean;
					if(cbCpfCnpj.selectedItem == null || cbCpfCnpj.selectedItem == "" || cbCpfCnpj.selectedItem == 'Todos'){
						bolCpfCnpj = true;
					}else{
						bolCpfCnpj = item.cpfCnpj.toLowerCase() == cbCpfCnpj.selectedItem.toLowerCase();
					}
					
					var bolRgIe:Boolean;
					if(cbrRgIe.selectedItem == null || cbrRgIe.selectedItem == "" || cbrRgIe.selectedItem == 'Todos'){
						bolRgIe = true;
					}else{
						bolRgIe = item.rgIe.toLowerCase() == cbrRgIe.selectedItem.toLowerCase();
					}
					
					var bolTipo:Boolean;
					if(cbTipo.selectedItem == null || cbTipo.selectedItem == "" || cbTipo.selectedItem == 'Todos'){
						bolTipo = true;
					}else{
						if(cbTipo.selectedItem == ScreenUtils.TIPO_CLIENTE.nome){
							bolTipo = item.tipo == 1;
						}
						if(cbTipo.selectedItem == ScreenUtils.TIPO_FORNECEDOR.nome){
							bolTipo = item.tipo == 2;
						}
						if(cbTipo.selectedItem == ScreenUtils.TIPO_TRANSPORTADORA.nome){
							bolTipo = item.tipo == 3;
						}
						if(cbTipo.selectedItem == ScreenUtils.TIPO_PRESTADOR_SERVICO.nome){
							bolTipo = item.tipo == 4;
						}
					}
					
					var bolTipoPessoa:Boolean;
					if(cbTipoPessoa.selectedItem == null || cbTipoPessoa.selectedItem == "" || cbTipoPessoa.selectedItem == 'Todos'){
						bolTipoPessoa = true;
					}else{
						if(cbTipoPessoa.selectedItem == ScreenUtils.TIPO_PESSOA_FISICA.nome){
							bolTipoPessoa = item.tipoPessoa == 1;
						}
						if(cbTipoPessoa.selectedItem == ScreenUtils.TIPO_PESSOA_JURIDICA.nome){
							bolTipoPessoa = item.tipoPessoa == 2;
						}
					}
					
					return bolNome && bolCpfCnpj && bolRgIe && bolTipo && bolTipoPessoa;	
				};		
				listaPessoa.refresh();
			}
			
			private function popularFiltros():void
			{
				nomeSelecionado = cbNome.selectedItem as String;
				listaNome = new ArrayCollection();
				tipoSelecionado = cbTipo.selectedItem as String;
				listaTipo = new ArrayCollection();
				tipoPessoaSelecionado = cbTipoPessoa.selectedItem as String;
				listaTipoPessoa = new ArrayCollection();
				rgIeSelecionado = cbrRgIe.selectedItem as String;
				listaRgIe = new ArrayCollection();
				cpfCnpjSelecionado = cbCpfCnpj.selectedItem as String;
				listaCpfCnpj = new ArrayCollection();
				
				for each (var pessoaAux:Pessoa in listaPessoa){
					if(pessoaAux.nomeSistema != null && pessoaAux.nomeSistema.length > 0 && !listaNome.contains(pessoaAux.nomeSistema)){
						listaNome.addItem(pessoaAux.nomeSistema);
					}
					if(pessoaAux.tipo == 1 && !listaTipo.contains(ScreenUtils.TIPO_CLIENTE.nome)){
						listaTipo.addItem(ScreenUtils.TIPO_CLIENTE.nome);
					}
					if(pessoaAux.tipo == 2 && !listaTipo.contains(ScreenUtils.TIPO_FORNECEDOR.nome)){
						listaTipo.addItem(ScreenUtils.TIPO_FORNECEDOR.nome);
					}
					if(pessoaAux.tipo == 3 && !listaTipo.contains(ScreenUtils.TIPO_TRANSPORTADORA.nome)){
						listaTipo.addItem(ScreenUtils.TIPO_TRANSPORTADORA.nome);
					}
					if(pessoaAux.tipo == 4 && !listaTipo.contains(ScreenUtils.TIPO_PRESTADOR_SERVICO.nome)){
						listaTipo.addItem(ScreenUtils.TIPO_PRESTADOR_SERVICO.nome);
					}
					if(pessoaAux.tipoPessoa == 1 && !listaTipoPessoa.contains(ScreenUtils.TIPO_PESSOA_FISICA.nome)){
						listaTipoPessoa.addItem(ScreenUtils.TIPO_PESSOA_FISICA.nome);
					}
					if(pessoaAux.tipoPessoa == 2 && !listaTipoPessoa.contains(ScreenUtils.TIPO_PESSOA_JURIDICA.nome)){
						listaTipoPessoa.addItem(ScreenUtils.TIPO_PESSOA_JURIDICA.nome);
					}
					if(pessoaAux.rgIe != null && pessoaAux.rgIe.length > 0 && !listaRgIe.contains(pessoaAux.rgIe)){
						listaRgIe.addItem(pessoaAux.rgIe);
					}
					if(pessoaAux.cpfCnpj != null && pessoaAux.cpfCnpj.length > 0 && !listaCpfCnpj.contains(pessoaAux.cpfCnpj)){
						listaCpfCnpj.addItem(pessoaAux.cpfCnpj);
					}
				}
				
				
				//Filtro status
				var sortA:Sort = new Sort();
				sortA.fields=[new SortField(null,true,false,false)];
				listaNome.sort=sortA;
				listaNome.refresh();
				listaNome.sort = null;
				listaNome.addItemAt("Todos",0);
				
				cbNome.enabled = true;
				cbNome.dataProvider = listaNome;
				
				if(listaNome.length > 0){
					if(nomeSelecionado){
						cbNome.selectedItem = nomeSelecionado;
					}
				}
				
				
				//Filtro numero da nota
				var sortA:Sort = new Sort();
				sortA.fields=[new SortField(null,true,false,false)];
				listaTipo.sort=sortA;
				listaTipo.refresh();
				listaTipo.sort = null;
				listaTipo.addItemAt("Todos",0);
				
				cbTipo.enabled = true;
				cbTipo.dataProvider = listaTipo;
				
				if(listaTipo.length > 0){
					if(tipoSelecionado){
						cbTipo.selectedItem = tipoSelecionado;
					}
				}
				
				
				//Filtro cliente
				var sortA:Sort = new Sort();
				sortA.fields=[new SortField(null,true,false,false)];
				listaTipoPessoa.sort=sortA;
				listaTipoPessoa.refresh();
				listaTipoPessoa.sort = null;
				listaTipoPessoa.addItemAt("Todos",0);
				
				cbTipoPessoa.enabled = true;
				cbTipoPessoa.dataProvider = listaTipoPessoa;
				
				if(listaTipoPessoa.length > 0){
					if(tipoPessoaSelecionado){
						cbTipoPessoa.selectedItem = tipoPessoaSelecionado;
					}
				}
				
				//Filtro numero da nota
				var sortA:Sort = new Sort();
				sortA.fields=[new SortField(null,true,false,false)];
				listaRgIe.sort=sortA;
				listaRgIe.refresh();
				listaRgIe.sort = null;
				listaRgIe.addItemAt("Todos",0);
				
				cbrRgIe.enabled = true;
				cbrRgIe.dataProvider = listaRgIe;
				
				if(listaRgIe.length > 0){
					if(rgIeSelecionado){
						cbrRgIe.selectedItem = rgIeSelecionado;
					}
				}
				
				
				//Filtro cliente
				var sortA:Sort = new Sort();
				sortA.fields=[new SortField(null,true,false,false)];
				listaCpfCnpj.sort=sortA;
				listaCpfCnpj.refresh();
				listaCpfCnpj.sort = null;
				listaCpfCnpj.addItemAt("Todos",0);
				
				cbCpfCnpj.enabled = true;
				cbCpfCnpj.dataProvider = listaCpfCnpj;
				
				if(listaCpfCnpj.length > 0){
					if(cpfCnpjSelecionado){
						cbCpfCnpj.selectedItem = cpfCnpjSelecionado;
					}
				}
				
			}
			
		]]>
	</fx:Script>		
	
	<mx:HBox width="100%" verticalAlign="bottom" horizontalAlign="left">
		<components:DropBoxInput id="cbNome" labelText="Nome" change="atualizaCombos" requireSelectionFlag="true"  />
		<components:DropBoxInput id="cbTipo" labelText="Tipo" change="atualizaCombos" requireSelectionFlag="true"  />
		<components:DropBoxInput id="cbTipoPessoa" labelText="Tipo pessoa" change="atualizaCombos" requireSelectionFlag="true"  />
		<components:DropBoxInput id="cbrRgIe" labelText="RG/IE" change="atualizaCombos" requireSelectionFlag="true"  />
		<components:DropBoxInput id="cbCpfCnpj" labelText="CPF/CNPJ" change="atualizaCombos" requireSelectionFlag="true"  />
	</mx:HBox>
	
	<grid:MantisTable id="viewTable"
					  width="100%" height="100%"
					  draggableColumns="true"
					  dataProvider="{listaPessoa}"
					  itemDoubleClick="editItem(data, event,false)"	>
		<grid:columns>
			
			<!-- CHANGE HERE THE ENTITY COLUMNS -->
			
			
			<mx:AdvancedDataGridColumn id="nome"
							   headerText = "{resourceManager.getString('ApplicationResource','NOME')}"
							   textAlign="center"
							   sortable="false"
							   dataField="nomeSistema"							   
							   />
			
			<mx:AdvancedDataGridColumn id="tipo" labelFunction="labelFunctionTipo"
							   headerText = "{resourceManager.getString('ApplicationResource','TIPO')}"
							   textAlign="center"
							   sortable="false"					   
							   />
			
			<mx:AdvancedDataGridColumn id="tipoPessoa" labelFunction="labelFunctionTipoPessoa"
							   headerText = "{resourceManager.getString('ApplicationResource','TIPO_PESSOA')}"
							   textAlign="center"
							   sortable="false"							   
							   />
			
			<mx:AdvancedDataGridColumn id="rgIe" 
							   headerText = "{resourceManager.getString('ApplicationResource','RGIE')}"
							   dataField = "rgIe"
							   />
			
			<mx:AdvancedDataGridColumn id="cpfCnpj" 
							   headerText = "{resourceManager.getString('ApplicationResource','CPFCNPJ')}"
							   dataField = "cpfCnpj"
							   />
			
			<!-- EDIT/REMOVE COLUMNS -->
			
			<mx:AdvancedDataGridColumn headerText = "{resourceManager.getString('ApplicationResource','ACTION_COLUMN')}"	
							   draggable="false" width="100"	 						 
							   editable="false"
							   sortable="false">
				<mx:itemRenderer>
					<fx:Component>
						<mx:HBox horizontalAlign="center"
								 verticalAlign="middle"
								 >
							
							<mx:Image source="@Embed(source='/assets/icons/edit.png')"
									  click="parentDocument.editItem(data, event, true)"
									  buttonMode="true"
									  useHandCursor="true"
									  toolTip="{resourceManager.getString('ApplicationResource','EDIT')}"
									  />
							
							<mx:Image source="@Embed(source='/assets/icons/delete.png')"
									  click="parentDocument.excluirItem(data, event, true)"
									  buttonMode="true"
									  useHandCursor="true"
									  toolTip="{resourceManager.getString('ApplicationResource','EXCLUIR')}"
									  />
							
						</mx:HBox>
					</fx:Component>
				</mx:itemRenderer>
			</mx:AdvancedDataGridColumn>
		</grid:columns>
	</grid:MantisTable>
	
</mx:VBox>
