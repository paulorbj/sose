<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:grid="components.grid.*"
		 creationComplete="initData();" xmlns:combos="components.combos.*" >

	<fx:Declarations>
		<mx:RemoteObject id="unidadeService" destination="unidadeService" endpoint="{resourceManager.getString('ConfigurationResource','amf')}">			
			<mx:method name="listarUnidades"      
					   fault="onListarUnidadesFault(event)" 
					   result="onListarUnidadesResult(event)"
					   />
		</mx:RemoteObject>
		
		<mx:RemoteObject id="lpuService" destination="lpuService" endpoint="{resourceManager.getString('ConfigurationResource','amf')}">			
			<mx:method name="buscarLpuMatriz"      
					   fault="onBuscarLpuMatrizFault(event)" 
					   result="onBuscarLpuMatrizResult(event)"
					   />
		</mx:RemoteObject>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import entities.administrativo.Lpu;
			import entities.administrativo.Unidade;
			import entities.administrativo.UnidadeItemLpu;
			
			import mx.collections.ArrayCollection;
			import mx.managers.CursorManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.components.gridClasses.GridColumn;
			
			[Bindable]
			[Embed(source='/assets/fonts/MyriadWebPro-Bold.ttf', fontWeight='bold', fontName='myBoldMyriadFont', mimeType='application/x-font', embedAsCFF='true')]
			public var myVerdana:Class;
			
			[Bindable]
			private var listaLpu:ArrayCollection;
			
			[Bindable]
			private var listaCliente:ArrayCollection;
			
			[Bindable]
			private var listaItemLpu:ArrayCollection; 
			
			[Bindable]
			private var listaColuna:ArrayCollection; 
			
			[Bindable]
			private var _listaUnidade:ArrayCollection; 
			
			[Bindable]
			private var _lpu:Lpu;
			
			[Bindable] 
			public var _listaItemMatriz:ArrayCollection; 
			
			// Initialize initDG variable from the Array. 
			public function initData():void { 
				unidadeService.listarUnidades();
			} 
			
			private function onListarUnidadesResult(event:ResultEvent = null):void
			{
				CursorManager.removeAllCursors(); 
				_listaUnidade = event.result as ArrayCollection;
				var unidade:Unidade;
				for(var i:int=0; i<_listaUnidade.length; i++){
					unidade = _listaUnidade.getItemAt(i) as Unidade;
					addDataGridColumn("_" + unidade.id, unidade.nome);
				}
			}
			
			private function onListarUnidadesFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[ListarUnidadesFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");		
			}
			
			public function createItens(str:String):Object
			{
				var obj:Object = new Object();
				obj.cliente = "Cliente " + str;
				obj.dataLpu = "12/04/2013";
				obj.ativa = "Sim";
				for(var i:int=0; i<2000; i++){
					obj["_"+i] = i + str;
				}
				return obj;
			}
			
			private function addDataGridColumn(dataField:String, headerText:String):void {
				var dgc:GridColumn = new GridColumn(dataField);
				dgc.headerText = headerText;
				dgc.width = 30;
				myDG.columns.addItem(dgc);
			}
			
			private function irParaUnidade(event:Event = null):void
			{
				for(var i:int=0; i<_listaUnidade.length; i++){
					if(_listaUnidade.getItemAt(i).id == buscaUnidade.unidadeSelecionado.id){
						myDG.grid.horizontalScrollPosition = myDG.grid.getCellX(0, i);
					}
				}				
			}
			
			private function adicionarLpu(event:MouseEvent):void
			{
				var idLpu:Number = (comboLpu.lpuSelecionada as Lpu).id;
				lpuService.buscarLpuMatriz(idLpu);
			}
			
			private function onBuscarLpuMatrizResult(event:ResultEvent = null):void
			{
				CursorManager.removeAllCursors(); 
				_lpu = event.result as Lpu;
				_listaItemMatriz.addItem(criarItemMatriz(_lpu));
			}
			
			private function onBuscarLpuMatrizFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[onBuscarLpuMatrizFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");		
			}
			
			public function criarItemMatriz(lpu:Lpu):Object
			{
				var obj:Object = new Object();
				obj.cliente = lpu.cliente.nomeSistema;
				obj.dataLpu = lpu.validoAteString;
				obj.ativa = lpu.ativa ? "Sim" : "NÃ£o";
				
				var unidadeItemLpu:UnidadeItemLpu;
				for(var i:int=0; i<lpu.listaUnidadeItemLpu.length; i++){
					unidadeItemLpu = lpu.listaUnidadeItemLpu.getItemAt(i) as UnidadeItemLpu;
					obj["_"+unidadeItemLpu.unidadeServilogi.id] = unidadeItemLpu.valor;
				}
				return obj;
			}
			
		]]>
	</fx:Script>
		
	<mx:HBox>
		<combos:ComboLpu id="comboLpu" labelText="Lista de lpu" />
		<s:Button id="btAdicionarLpu"  label="Adicionar LPU" click="adicionarLpu(event)" />
		<combos:ComboUnidade id="buscaUnidade" labelText="Buscar unidade" changeFunction="irParaUnidade" />
	</mx:HBox>
	
	<mx:HBox horizontalGap="0" >
		<mx:DataGrid id="myDGFixed" 
					 dataProvider="{_listaItemMatriz}" rowHeight="23"
					 headerHeight="161" height="400" >
			<mx:columns>
				<mx:DataGridColumn headerText="Cliente" dataField="cliente" />
				<mx:DataGridColumn headerText="Data lpu" dataField="dataLpu" />
				<mx:DataGridColumn headerText="Ativa" dataField="ativa" />
			</mx:columns>
		</mx:DataGrid>
		
		<s:DataGrid id="myDG"
					sortableColumns="false"
					resizableColumns="false"
					width="800" height="400"
					dataProvider="{_listaItemMatriz}"
					skinClass="modules.recebimento.DGSkin">
			<s:columns>
				<s:ArrayList>
					
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
	</mx:HBox>
	
</mx:VBox>
