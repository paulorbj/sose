<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%"  height="100%" paddingBottom="20" paddingLeft="10" paddingRight="10" paddingTop="10"
		 xmlns:components="components.*" horizontalAlign="center" xmlns:texto="components.textInput.*"
		 xmlns:grid="components.grid.*" xmlns:combos="components.combos.*"
		 initialize="init()">
	
	<fx:Declarations>
		<mx:RemoteObject concurrency="single" id="itemEstoqueAvayaService" destination="itemEstoqueAvayaService" showBusyCursor="true" endpoint="{resourceManager.getString('ConfigurationResource','amf')}">			
			<mx:method name="listarItemEstoqueAvaya"      
					   fault="onListarItemEstoqueAvayaFault(event)" 
					   result="onListarItemEstoqueAvayaResult(event)"
					   />
			<mx:method name="salvarItens"      
					   fault="onSalvarFault(event)" 
					   result="onSalvarResult(event)"
					   />
		</mx:RemoteObject>
		
		<mx:RemoteObject concurrency="single" id="estoqueAvayaController" destination="estoqueAvayaController" showBusyCursor="true" endpoint="{resourceManager.getString('ConfigurationResource','amf')}">			
			<mx:method name="estocar"      
					   fault="onEstocarFault(event)" 
					   result="onEstocarResult(event)"
					   />
			<mx:method name="substituir"      
					   fault="onSubstituirFault(event)" 
					   result="onSubstituirResult(event)"
					   />
			<mx:method name="repor"      
					   fault="onReporFault(event)" 
					   result="onReporResult(event)"
					   />
			<mx:method name="retirarTodos"      
					   fault="onRetirarFault(event)" 
					   result="onRetirarResult(event)"
					   />
		</mx:RemoteObject>
		
		<mx:Producer id="produtorEstoqueService" destination="EstoqueMessageServicePush" /> 
		
		<mx:Consumer id="consumidorEstoqueService" destination="EstoqueMessageServicePush" message="onMsgEstoque(event)" />
		
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import components.PopupModalController;
			import components.events.UserRegisterNumberModalEvent;
			import components.messages.MensagemEvent;
			import components.messages.MessageType;
			
			import entities.GlobalMessage;
			import entities.administrativo.Componente;
			import entities.administrativo.Usuario;
			import entities.estoque.DevolucaoComponente;
			import entities.estoque.avaya.ItemEstoqueAvaya;
			
			import modules.view.Login;
			import modules.view.eventos.LoginEvent;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.events.ListEvent;
			import mx.managers.CursorManager;
			import mx.messaging.events.MessageEvent;
			import mx.messaging.messages.AsyncMessage;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.StringUtil;
			import mx.validators.Validator;
			
			import utils.MensagensAplicacao;
			
			[Bindable]
			private var _listaItemEstoqueAvaya:ArrayCollection;
			
			[Bindable]
			private var _itemEstoqueAvaya:ItemEstoqueAvaya;
			
			[Bindable]
			private var totalComponentes:Number = 0;
			
			[Bindable]
			private var listaNControle:ArrayCollection = new ArrayCollection;
			[Bindable]
			private var nControleSelecionado:String;
			[Bindable]
			private var listaStatus:ArrayCollection = new ArrayCollection;
			[Bindable]
			private var statusSelecionado:String;
			[Bindable]
			private var listaUnidade:ArrayCollection = new ArrayCollection;
			[Bindable]
			private var unidadeSelecionado:String;
			[Bindable]
			private var listaUsuario:ArrayCollection = new ArrayCollection;
			[Bindable]
			private var usuarioSelecionado:String;
			[Bindable]
			private var listaOsOriginal:ArrayCollection = new ArrayCollection;
			[Bindable]
			private var osOriginalSelecionado:String;
			[Bindable]
			private var listaNFabricanteOriginal:ArrayCollection = new ArrayCollection;
			[Bindable]
			private var nFabricanteOriginalSelecionado:String;
			[Bindable]
			private var listaNClienteOriginal:ArrayCollection = new ArrayCollection;
			[Bindable]
			private var nClienteOriginalSelecionado:String;
			[Bindable]
			private var listaNfOrignal:ArrayCollection = new ArrayCollection;
			[Bindable]
			private var nfOriginalSelecionado:String;
			[Bindable]
			private var listaOsSubstituida:ArrayCollection = new ArrayCollection;
			[Bindable]
			private var osSubstituidaSelecionado:String;
			[Bindable]
			private var listaNFabricanteSubstituida:ArrayCollection = new ArrayCollection;
			[Bindable]
			private var nFabricanteSubstituidaSelecionado:String;
			[Bindable]
			private var listaNClienteSubstituida:ArrayCollection = new ArrayCollection;
			[Bindable]
			private var nClienteSubstituidaSelecionado:String;
			[Bindable]
			private var listaNfSubstituida:ArrayCollection = new ArrayCollection;
			[Bindable]
			private var nfSubstituidaSelecionado:String;
			
			private var sort:Sort;
			
			private function init():void
			{
				itemEstoqueAvayaService.listarItemEstoqueAvaya();
				consumidorEstoqueService.subscribe();
				sort = new Sort();
				sort.fields=[new SortField("numeroOsOriginal",true,false,true)];

			}
			
			private function ordenarListaPorOs():void
			{
				_listaItemEstoqueAvaya.sort=sort;
				_listaItemEstoqueAvaya.refresh();
			}
			
			private function publicarDevolucao(orc:DevolucaoComponente, msg:String):void   { 								
				var message:AsyncMessage = new AsyncMessage();
				var messageGlobal:GlobalMessage=new GlobalMessage();
				messageGlobal.mensagem=msg;
				messageGlobal.conteudo = orc;				
				message.body=messageGlobal;
				produtorEstoqueService.send(message);	
			}
			
			private function publicarComponente(orc:Componente, msg:String):void   { 								
				var message:AsyncMessage = new AsyncMessage();
				var messageGlobal:GlobalMessage=new GlobalMessage();
				messageGlobal.mensagem=msg;
				messageGlobal.conteudo = orc;				
				message.body=messageGlobal;
				produtorEstoqueService.send(message);	
			}
			
			private function onMsgEstoque(event:MessageEvent):void{ 
				var globalMessage:GlobalMessage = event.message.body as GlobalMessage;	
				
				if (globalMessage.mensagem==MensagensAplicacao.DEVOLUCAO_COMPONENTE_ATUALIZAR){
					var req:ItemEstoqueAvaya = globalMessage.conteudo as ItemEstoqueAvaya;
					ItemEstoqueAvaya(req);
				}
			} 
			
			public function addItemEstoqueAvaya(req:ItemEstoqueAvaya):void
			{
				var requisicaoAux:ItemEstoqueAvaya = null;
				var encontrou:Boolean = false;
				for(var i:int=0; i<_listaItemEstoqueAvaya.length; i++){
					requisicaoAux = _listaItemEstoqueAvaya.getItemAt(i) as ItemEstoqueAvaya; 
					if(requisicaoAux.id == req.id){
						_listaItemEstoqueAvaya.removeItemAt(i);
						_listaItemEstoqueAvaya.addItemAt(req,i);
						encontrou = true;
						break;
					}
				}
				if(!encontrou){
					_listaItemEstoqueAvaya.addItem(req);
				}
				popularFiltros();
				atualizaCombos();
			}
			
			public function removeItemEstoqueAvaya(req:ItemEstoqueAvaya):void
			{
				var requisicaoAux:ItemEstoqueAvaya = null;
				var encontrou:Boolean = false;
				for(var i:int=0; i<_listaItemEstoqueAvaya.length; i++){
					requisicaoAux = _listaItemEstoqueAvaya.getItemAt(i) as ItemEstoqueAvaya; 
					if(requisicaoAux.id == req.id){
						_listaItemEstoqueAvaya.removeItemAt(i);
						encontrou = true;
						break;
					}
				}
				popularFiltros();
				atualizaCombos();
			}
			
			public function validarSelecao():ItemEstoqueAvaya
			{
				var nSelecionados:int = 0;
				var itemSelecionado:ItemEstoqueAvaya = null;
				if(_listaItemEstoqueAvaya != null && _listaItemEstoqueAvaya.length > 0){
					for each(var iea:ItemEstoqueAvaya in _listaItemEstoqueAvaya){
						if(iea.isSelected){
							nSelecionados++;
							itemSelecionado = iea;
						}
					}
					if(nSelecionados == 1){
						return itemSelecionado;
					}else{
						return null;
					}
				}else{
					return null;
				}
			}
			
			public function validarCampoOS():Boolean {	
				var validatorArr:Array = new Array();

				nOrdemServico.required = true
				validatorArr.push(nOrdemServico.stringValidator);
				
				var validatorErrorArray:Array = Validator.validateAll(validatorArr);;
				var isValidForm:Boolean = validatorErrorArray.length == 0;			
				return isValidForm;
			}
			
			private function onListarItemEstoqueAvayaResult(event:ResultEvent = null):void
			{
				_listaItemEstoqueAvaya = event.result as ArrayCollection;
				atualizaTotalComponentes(_listaItemEstoqueAvaya);	
				popularFiltros();
				ordenarListaPorOs();
			}
			
			private function atualizaTotalComponentes(lista:ArrayCollection):void{
				totalComponentes = 0;
				for each (var req:ItemEstoqueAvaya in lista){
					totalComponentes++;
				}
			}
			
			private function onListarItemEstoqueAvayaFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[onListarOrdemServicoBaixaExpedicaoFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");		
			}
			
			public function estocar(event:MouseEvent=null):void
			{
				_itemEstoqueAvaya = validarSelecao();
				if(_itemEstoqueAvaya != null){
					var usr:Usuario = Login.usuarioAutenticado;
					if(usr){
						if(_itemEstoqueAvaya.posicao != null && StringUtil.trim(_itemEstoqueAvaya.posicao) != "" && _itemEstoqueAvaya.posicao.length > 0){
							estoqueAvayaController.estocar(_itemEstoqueAvaya,usr)
						}else{
							dispatchEvent(new MensagemEvent("Preencha a posição do item selecionado", MessageType.WARNING, 3000));
						}
					}else{
						PopupModalController.getInstance().showModalAutenticacaoUsuario(estocarAutenticar);
					}
				}else{
					dispatchEvent(new MensagemEvent("Selecione somente um item da tabela", MessageType.WARNING, 3000));
				}
			}
			
			public function estocarAutenticar(event:UserRegisterNumberModalEvent=null):void{
				estocar();
			}
			
			private function onEstocarResult(event:ResultEvent = null):void
			{
				_itemEstoqueAvaya = event.result as ItemEstoqueAvaya;
				addItemEstoqueAvaya(_itemEstoqueAvaya);
				nOrdemServico.inputText == "";
				dispatchEvent(new MensagemEvent("Material estocado com sucesso", MessageType.SUCCESS, 3000));	
			}
			
			private function onEstocarFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				nOrdemServico.inputText == "";
				trace("[onCriarNotaFiscalRemessaExpedicaoFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				if(event.fault.faultString.indexOf("br.com.sose.exceptions") != -1){
					var index:Number = event.fault.faultString.lastIndexOf(":");
					dispatchEvent(new MensagemEvent(event.fault.faultString.substr(index+1), MessageType.WARNING, 10000));
				}else{
					dispatchEvent(new MensagemEvent("Erro ao estocar material", MessageType.ERROR, 3000));
				}
					
			}
			
			public function substituir(event:MouseEvent=null):void
			{
				_itemEstoqueAvaya = validarSelecao();
				if(_itemEstoqueAvaya != null){
					var usr:Usuario = Login.usuarioAutenticado;
					if(usr){
						if(validarCampoOS()){
							estoqueAvayaController.substituir(_itemEstoqueAvaya,nOrdemServico.inputText,usr)
						}else{
							dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','ERRO_VALIDACAO'), MessageType.WARNING, 3000));
						}
						
					}else{
						PopupModalController.getInstance().showModalAutenticacaoUsuario(substituirAutenticar);
					}
				}else{
					dispatchEvent(new MensagemEvent("Selecione somente um item da tabela", MessageType.WARNING, 3000));
				}
			}
			
			public function substituirAutenticar(event:UserRegisterNumberModalEvent=null):void{
				substituir();
			}
			
			private function onSubstituirResult(event:ResultEvent = null):void
			{
				_itemEstoqueAvaya = event.result as ItemEstoqueAvaya;
				addItemEstoqueAvaya(_itemEstoqueAvaya);
				nOrdemServico.inputText == "";
				dispatchEvent(new MensagemEvent("Substituição realizada com sucesso", MessageType.SUCCESS, 3000));	
			}
			
			private function onSubstituirFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				nOrdemServico.inputText == "";
				if(event.fault.faultString.indexOf("br.com.sose.exceptions") != -1 || event.fault.faultString.indexOf("java.lang.Exception") != -1){
					var index:Number = event.fault.faultString.lastIndexOf(":");
					dispatchEvent(new MensagemEvent(event.fault.faultString.substr(index+1), MessageType.WARNING, 10000));
				}else{
					dispatchEvent(new MensagemEvent("Erro ao substituir material", MessageType.ERROR, 3000));
				}
				trace("[onCriarNotaFiscalRemessaExpedicaoFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
			}
			
			public function repor(event:MouseEvent=null):void
			{
				_itemEstoqueAvaya = validarSelecao();
				if(_itemEstoqueAvaya != null){
					var usr:Usuario = Login.usuarioAutenticado;
					if(usr){
						if(validarCampoOS()){
							estoqueAvayaController.repor(_itemEstoqueAvaya,nOrdemServico.inputText,usr)
						}else{
							dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','ERRO_VALIDACAO'), MessageType.WARNING, 3000));
						}
					}else{
						PopupModalController.getInstance().showModalAutenticacaoUsuario(reporAutenticar);
					}
				}else{
					dispatchEvent(new MensagemEvent("Selecione somente um item da tabela", MessageType.WARNING, 3000));
				}
				

			}
			
			public function reporAutenticar(event:UserRegisterNumberModalEvent=null):void{
				repor();
			}
			
			private function onReporResult(event:ResultEvent = null):void
			{
				_itemEstoqueAvaya = event.result as ItemEstoqueAvaya;
				addItemEstoqueAvaya(_itemEstoqueAvaya);
				nOrdemServico.inputText == "";
				dispatchEvent(new MensagemEvent("Reposição realizada com sucesso", MessageType.SUCCESS, 3000));	
			}
			
			private function onReporFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				nOrdemServico.inputText == "";
				trace("[onCriarNotaFiscalRemessaExpedicaoFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				if(event.fault.faultString.indexOf("br.com.sose.exceptions") != -1){
					var index:Number = event.fault.faultString.lastIndexOf(":");
					dispatchEvent(new MensagemEvent(event.fault.faultString.substr(index+1), MessageType.WARNING, 10000));
				}else{
					dispatchEvent(new MensagemEvent("Erro ao repor material", MessageType.ERROR, 3000));
				}
			}
			
			public function retirar(event:MouseEvent=null):void
			{
				var itensSelecionados:ArrayCollection = new ArrayCollection(); 
				if(_listaItemEstoqueAvaya != null && _listaItemEstoqueAvaya.length > 0){
					for each(var iea:ItemEstoqueAvaya in _listaItemEstoqueAvaya){
						if(iea.isSelected && iea.statusString == "Estocado"){
							itensSelecionados.addItem(iea);
						}
					}
				}
				
				if(itensSelecionados.length > 0){
					var usr:Usuario = Login.usuarioAutenticado;
					if(usr){
						estoqueAvayaController.retirarTodos(itensSelecionados,usr)
					}else{
						PopupModalController.getInstance().showModalAutenticacaoUsuario(retirarAutenticar);
					}
				}else{
					dispatchEvent(new MensagemEvent("Nenhum item foi selecionado ou todos os itens selecionados não se encontram no status 'Estocado'", MessageType.WARNING, 3000));
				}
			}
			
			public function retirarAutenticar(event:UserRegisterNumberModalEvent=null):void{
				retirar();
			}
			
			private function onRetirarResult(event:ResultEvent = null):void
			{
				var itens:ArrayCollection = event.result as ArrayCollection;
				for each (var item:ItemEstoqueAvaya in itens){
					removeItemEstoqueAvaya(item);
				}
				nOrdemServico.inputText == "";
				ordenarListaPorOs();
				dispatchEvent(new MensagemEvent("Material enviado para a expedição com sucesso", MessageType.SUCCESS, 3000));	
			}
			
			private function onRetirarFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				nOrdemServico.inputText == "";
				trace("[onCriarNotaFiscalRemessaExpedicaoFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				if(event.fault.faultString.indexOf("br.com.sose.exceptions") != -1){
					var index:Number = event.fault.faultString.lastIndexOf(":");
					dispatchEvent(new MensagemEvent(event.fault.faultString.substr(index+1), MessageType.WARNING, 10000));
				}else{
					dispatchEvent(new MensagemEvent("Erro ao retirar material", MessageType.ERROR, 3000));
				}
			}
			
			public function salvar(event:MouseEvent=null):void
			{
				var itensSelecionados:ArrayCollection = new ArrayCollection(); 
				if(_listaItemEstoqueAvaya != null && _listaItemEstoqueAvaya.length > 0){
					for each(var iea:ItemEstoqueAvaya in _listaItemEstoqueAvaya){
						if(iea.isSelected){
							itensSelecionados.addItem(iea);
						}
					}
				}
				
				if(itensSelecionados.length > 0){
					var usr:Usuario = Login.usuarioAutenticado;
					if(usr){
						itemEstoqueAvayaService.salvarItens(itensSelecionados)
					}else{
						PopupModalController.getInstance().showModalAutenticacaoUsuario(salvarAutenticar);
					}
				}else{
					dispatchEvent(new MensagemEvent("Nenhum item foi selecionado ou todos os itens selecionados não se encontram no status 'Estocado'", MessageType.WARNING, 3000));
				}
			}
			
			public function salvarAutenticar(event:UserRegisterNumberModalEvent=null):void{
				salvar();
			}
			
			private function onSalvarResult(event:ResultEvent = null):void
			{
				var itens:ArrayCollection = event.result as ArrayCollection;
				dispatchEvent(new MensagemEvent("Itens salvos com sucesso", MessageType.SUCCESS, 3000));	
			}
			
			private function onSalvarFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[onCriarNotaFiscalRemessaExpedicaoFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				if(event.fault.faultString.indexOf("br.com.sose.exceptions") != -1){
					var index:Number = event.fault.faultString.lastIndexOf(":");
					dispatchEvent(new MensagemEvent(event.fault.faultString.substr(index+1), MessageType.WARNING, 10000));
				}else{
					dispatchEvent(new MensagemEvent("Erro ao salvar itens", MessageType.ERROR, 3000));
				}
			}
			
			public function atualizaCombos(event:Event=null):void{
				configurarFiltroLista();
			}
			
			private function configurarFiltroLista():void
			{
				_listaItemEstoqueAvaya.filterFunction = function stateFilterFunc(item:Object):Boolean 
				{
					var bolControle:Boolean;
					if(cbNControle.selectedItem == null || cbNControle.selectedItem == "" || cbNControle.selectedItem == 'Todos'){
						bolControle = true;
					}else{
						bolControle = item.id.toString().toLowerCase() == cbNControle.selectedItem.toString().toLowerCase();
					}
					
					var bolStatus:Boolean;
					if(cbStatus.selectedItem == null || cbStatus.selectedItem == "" || cbStatus.selectedItem == 'Todos'){
						bolStatus = true;
					}else{
						bolStatus = item.statusString.toLowerCase() == cbStatus.selectedItem.toLowerCase();
					}
					
					var bolUnidade:Boolean;
					if(cbUnidade.selectedItem == null || cbUnidade.selectedItem == "" || cbUnidade.selectedItem == 'Todos'){
						bolUnidade = true;
					}else{
						if(item != null && item.unidade != null){
							bolUnidade = item.unidade.toLowerCase() == cbUnidade.selectedItem.toLowerCase();
						}else{
							bolUnidade = false;
						}
					}
					
					var bolUsuario:Boolean;
					if(cbUsuario.selectedItem == null || cbUsuario.selectedItem == "" || cbUsuario.selectedItem == 'Todos'){
						bolUsuario = true;
					}else{
						if(item != null && item.usuarioOperacao != null){
							bolUsuario = item.usuarioOperacao.toLowerCase() == cbUsuario.selectedItem.toLowerCase();
						}else{
							bolUsuario = false;
						}
					}
					
					var bolOsOriginal:Boolean;
					if(cbOsOriginal.selectedItem == null || cbOsOriginal.selectedItem == "" || cbOsOriginal.selectedItem == 'Todos'){
						bolOsOriginal = true;
					}else{
						if(item != null && item.numeroOsOriginal != null){
							bolOsOriginal = item.numeroOsOriginal.toLowerCase() == cbOsOriginal.selectedItem.toLowerCase();
						}else{
							bolOsOriginal = false;
						}
					}
					
					var bolNClienteOriginal:Boolean;
					if(cbNClienteOriginal.selectedItem == null || cbNClienteOriginal.selectedItem == "" || cbNClienteOriginal.selectedItem == 'Todos'){
						bolNClienteOriginal = true;
					}else{
						if(item != null && item.nsClienteOriginal != null){
							bolNClienteOriginal = item.nsClienteOriginal.toLowerCase() == cbNClienteOriginal.selectedItem.toLowerCase();
						}else{
							bolNClienteOriginal = false;
						}
					}
					
					var bolNFabricanteOriginal:Boolean;
					if(cbNFabricanteOriginal.selectedItem == null || cbNFabricanteOriginal.selectedItem == "" || cbNFabricanteOriginal.selectedItem == 'Todos'){
						bolNFabricanteOriginal = true;
					}else{
						if(item != null && item.nsFabricanteOriginal != null){
							bolNFabricanteOriginal = item.nsFabricanteOriginal.toLowerCase() == cbNFabricanteOriginal.selectedItem.toLowerCase();
						}else{
							bolNFabricanteOriginal = false;
						}
					}
					
					var bolNfOriginal:Boolean;
					if(cbNfOriginal.selectedItem == null || cbNfOriginal.selectedItem == "" || cbNfOriginal.selectedItem == 'Todos'){
						bolNfOriginal = true;
					}else{
						if(item != null && item.nfOriginal != null){
							bolNfOriginal = item.nfOriginal.toLowerCase() == cbNfOriginal.selectedItem.toLowerCase();
						}else{
							bolNfOriginal = false;
						}
					}
					
					var bolOsSubstituida:Boolean;
					if(cbOsSubstituida.selectedItem == null || cbOsSubstituida.selectedItem == "" || cbOsSubstituida.selectedItem == 'Todos'){
						bolOsSubstituida = true;
					}else{
						if(item != null && item.ordemServicoSubstituida != null && item.ordemServicoSubstituida.numeroOrdemServico != null){
							bolOsSubstituida = item.ordemServicoSubstituida.numeroOrdemServico.toLowerCase() == cbOsSubstituida.selectedItem.toLowerCase();
						}else{
							bolOsSubstituida = false;
						}
					}
					
					var bolNClienteSubstituida:Boolean;
					if(cbNClienteSubstituida.selectedItem == null || cbNClienteSubstituida.selectedItem == "" || cbNClienteSubstituida.selectedItem == 'Todos'){
						bolNClienteSubstituida = true;
					}else{
						if(item != null && item.nsClienteSubstituida != null){
							bolNClienteSubstituida = item.nsClienteSubstituida.toLowerCase() == cbNClienteSubstituida.selectedItem.toLowerCase();
						}else{
							bolNClienteSubstituida = false;
						}
					}
					
					var bolNFabricanteSubstituida:Boolean;
					if(cbNFabricanteSubstituida.selectedItem == null || cbNFabricanteSubstituida.selectedItem == "" || cbNFabricanteSubstituida.selectedItem == 'Todos'){
						bolNFabricanteSubstituida = true;
					}else{
						if(item != null && item.nsFabricanteSubstituida != null){
							bolNFabricanteSubstituida = item.nsFabricanteSubstituida.toLowerCase() == cbNFabricanteSubstituida.selectedItem.toLowerCase();
						}else{
							bolNFabricanteSubstituida = false;
						}
					}
					
					var bolNfSubstituida:Boolean;
					if(cbNfSubstituida.selectedItem == null || cbNfSubstituida.selectedItem == "" || cbNfSubstituida.selectedItem == 'Todos'){
						bolNfSubstituida = true;
					}else{
						if(item != null && item.nfSubstituida != null){
							bolNfSubstituida = item.nfSubstituida.toLowerCase() == cbNfSubstituida.selectedItem.toLowerCase();
						}else{
							bolNfSubstituida = false;
						}
					}
					
					return bolControle && bolStatus && bolUnidade && bolOsOriginal && bolNFabricanteOriginal && bolNClienteOriginal && bolNfOriginal && bolOsSubstituida && bolNFabricanteSubstituida && bolNClienteSubstituida && bolNfSubstituida && bolUsuario;	
				};		
				_listaItemEstoqueAvaya.refresh();
				totalComponentes = _listaItemEstoqueAvaya.length;
			}
			
			private function popularFiltros():void
			{
				statusSelecionado = cbStatus.selectedItem as String;
				listaStatus = new ArrayCollection();
				unidadeSelecionado = cbUnidade.selectedItem as String;
				listaUnidade = new ArrayCollection();
				nControleSelecionado = cbNControle.selectedItem as String;
				listaNControle = new ArrayCollection();
				usuarioSelecionado = cbUsuario.selectedItem as String;
				listaUsuario = new ArrayCollection();
				
				osOriginalSelecionado = cbOsOriginal.selectedItem as String;
				listaOsOriginal = new ArrayCollection();
				nClienteOriginalSelecionado = cbNClienteOriginal.selectedItem as String;
				listaNClienteOriginal = new ArrayCollection();
				nFabricanteOriginalSelecionado = cbNFabricanteOriginal.selectedItem as String;
				listaNFabricanteOriginal = new ArrayCollection();
				nfOriginalSelecionado = cbNfOriginal.selectedItem as String;
				listaNfOrignal = new ArrayCollection();
				
				osSubstituidaSelecionado = cbOsSubstituida.selectedItem as String;
				listaOsSubstituida = new ArrayCollection();
				nClienteSubstituidaSelecionado = cbNClienteSubstituida.selectedItem as String;
				listaNClienteSubstituida = new ArrayCollection();
				nFabricanteSubstituidaSelecionado = cbNFabricanteSubstituida.selectedItem as String;
				listaNFabricanteSubstituida = new ArrayCollection();
				nfSubstituidaSelecionado = cbNfSubstituida.selectedItem as String;
				listaNfOrignal = new ArrayCollection();
				
				for each (var itemEstoqueAvaya:ItemEstoqueAvaya in _listaItemEstoqueAvaya){
					if(!listaNControle.contains(itemEstoqueAvaya.id.toString())){
						listaNControle.addItem(itemEstoqueAvaya.id.toString());
					}
					if(itemEstoqueAvaya.statusString != null && itemEstoqueAvaya.statusString.length > 0 && !listaStatus.contains(itemEstoqueAvaya.statusString)){
						listaStatus.addItem(itemEstoqueAvaya.statusString);
					}
					if(itemEstoqueAvaya.unidade != null && itemEstoqueAvaya.unidade.length > 0 && !listaUnidade.contains(itemEstoqueAvaya.unidade)){
						listaUnidade.addItem(itemEstoqueAvaya.unidade);
					}
					if(itemEstoqueAvaya.nsClienteOriginal != null && itemEstoqueAvaya.nsClienteOriginal.length > 0 && !listaNClienteOriginal.contains(itemEstoqueAvaya.nsClienteOriginal)){
						listaNClienteOriginal.addItem(itemEstoqueAvaya.nsClienteOriginal);
					}
					if(itemEstoqueAvaya.nsFabricanteOriginal != null && itemEstoqueAvaya.nsFabricanteOriginal.length > 0 && !listaNFabricanteOriginal.contains(itemEstoqueAvaya.nsFabricanteOriginal)){
						listaNFabricanteOriginal.addItem(itemEstoqueAvaya.nsFabricanteOriginal);
					}
					if(itemEstoqueAvaya.nfOriginal != null && itemEstoqueAvaya.nfOriginal.length > 0 && !listaNfOrignal.contains(itemEstoqueAvaya.nfOriginal)){
						listaNfOrignal.addItem(itemEstoqueAvaya.nfOriginal);
					}
					if(itemEstoqueAvaya.numeroOsOriginal != null && itemEstoqueAvaya.numeroOsOriginal.length > 0 && !listaOsOriginal.contains(itemEstoqueAvaya.numeroOsOriginal)){
						listaOsOriginal.addItem(itemEstoqueAvaya.numeroOsOriginal);
					}
					
					if(itemEstoqueAvaya.nsClienteSubstituida != null && itemEstoqueAvaya.nsClienteSubstituida.length > 0 && !listaNClienteSubstituida.contains(itemEstoqueAvaya.nsClienteSubstituida)){
						listaNClienteSubstituida.addItem(itemEstoqueAvaya.nsClienteSubstituida);
					}
					if(itemEstoqueAvaya.nsFabricanteSubstituida != null && itemEstoqueAvaya.nsFabricanteSubstituida.length > 0 && !listaNFabricanteSubstituida.contains(itemEstoqueAvaya.nsFabricanteSubstituida)){
						listaNFabricanteSubstituida.addItem(itemEstoqueAvaya.nsFabricanteSubstituida);
					}
					if(itemEstoqueAvaya.nfSubstituida != null && itemEstoqueAvaya.nfSubstituida.length > 0 && !listaNfSubstituida.contains(itemEstoqueAvaya.nfSubstituida)){
						listaNfSubstituida.addItem(itemEstoqueAvaya.nfSubstituida);
					}
					if(itemEstoqueAvaya.numeroOsSubstituida != null && itemEstoqueAvaya.numeroOsSubstituida.length > 0 && !listaOsSubstituida.contains(itemEstoqueAvaya.numeroOsSubstituida)){
						listaOsSubstituida.addItem(itemEstoqueAvaya.numeroOsSubstituida);
					}
					
					if(itemEstoqueAvaya.operacaoRealizadaPor != null && itemEstoqueAvaya.operacaoRealizadaPor.usuario.length > 0 && !listaUsuario.contains(itemEstoqueAvaya.operacaoRealizadaPor.usuario)){
						listaUsuario.addItem(itemEstoqueAvaya.operacaoRealizadaPor.usuario);
					}
				}
				
				
				//Filtro status
				var sortA:Sort = new Sort();
				sortA.fields=[new SortField(null,true,false,false)];
				listaStatus.sort=sortA;
				listaStatus.refresh();
				listaStatus.sort = null;
				listaStatus.addItemAt("Todos",0);
				
				cbStatus.enabled = true;
				cbStatus.dataProvider = listaStatus;
				
				if(listaStatus.length > 0){
					if(statusSelecionado){
						cbStatus.selectedItem = statusSelecionado;
					}
				}
				
				
				//Filtro numero da nota
				var sortA:Sort = new Sort();
				sortA.fields=[new SortField(null,true,false,false)];
				listaNClienteOriginal.sort=sortA;
				listaNClienteOriginal.refresh();
				listaNClienteOriginal.sort = null;
				listaNClienteOriginal.addItemAt("Todos",0);
				
				cbNClienteOriginal.enabled = true;
				cbNClienteOriginal.dataProvider = listaNClienteOriginal;
				
				if(listaNClienteOriginal.length > 0){
					if(nClienteOriginalSelecionado){
						cbNClienteOriginal.selectedItem = nClienteOriginalSelecionado;
					}
				}
				
				
				//Filtro cliente
				var sortA:Sort = new Sort();
				sortA.fields=[new SortField(null,true,false,false)];
				listaNClienteSubstituida.sort=sortA;
				listaNClienteSubstituida.refresh();
				listaNClienteSubstituida.sort = null;
				listaNClienteSubstituida.addItemAt("Todos",0);
				
				cbNClienteSubstituida.enabled = true;
				cbNClienteSubstituida.dataProvider = listaNClienteSubstituida;
				
				if(listaNClienteSubstituida.length > 0){
					if(nClienteSubstituidaSelecionado){
						cbNClienteSubstituida.selectedItem = nClienteSubstituidaSelecionado;
					}
				}
				
				//Filtro cliente
				var sortA:Sort = new Sort();
				sortA.fields=[new SortField(null,true,false,true)];
				listaNControle.sort=sortA;
				listaNControle.refresh();
				listaNControle.sort = null;
				listaNControle.addItemAt("Todos",0);
				
				cbNControle.enabled = true;
				cbNControle.dataProvider = listaNControle;
				
				if(listaNControle.length > 0){
					if(nControleSelecionado){
						cbNControle.selectedItem = nControleSelecionado;
					}
				}
				
				//Filtro cliente
				var sortA:Sort = new Sort();
				sortA.fields=[new SortField(null,true,false,false)];
				listaNFabricanteOriginal.sort=sortA;
				listaNFabricanteOriginal.refresh();
				listaNFabricanteOriginal.sort = null;
				listaNFabricanteOriginal.addItemAt("Todos",0);
				
				cbNFabricanteOriginal.enabled = true;
				cbNFabricanteOriginal.dataProvider = listaNFabricanteOriginal;
				
				if(listaNFabricanteOriginal.length > 0){
					if(nFabricanteOriginalSelecionado){
						cbNFabricanteOriginal.selectedItem = nFabricanteOriginalSelecionado;
					}
				}
				
				//Filtro cliente
				var sortA:Sort = new Sort();
				sortA.fields=[new SortField(null,true,false,false)];
				listaNFabricanteSubstituida.sort=sortA;
				listaNFabricanteSubstituida.refresh();
				listaNFabricanteSubstituida.sort = null;
				listaNFabricanteSubstituida.addItemAt("Todos",0);
				
				cbNFabricanteSubstituida.enabled = true;
				cbNFabricanteSubstituida.dataProvider = listaNFabricanteSubstituida;
				
				if(listaNFabricanteSubstituida.length > 0){
					if(nFabricanteSubstituidaSelecionado){
						cbNFabricanteSubstituida.selectedItem = nFabricanteSubstituidaSelecionado;
					}
				}
				
				//Filtro cliente
				var sortA:Sort = new Sort();
				sortA.fields=[new SortField(null,true,false,false)];
				listaNfOrignal.sort=sortA;
				listaNfOrignal.refresh();
				listaNfOrignal.sort = null;
				listaNfOrignal.addItemAt("Todos",0);
				
				cbNfOriginal.enabled = true;
				cbNfOriginal.dataProvider = listaNfOrignal;
				
				if(listaNfOrignal.length > 0){
					if(nfOriginalSelecionado){
						cbNfOriginal.selectedItem = nfOriginalSelecionado;
					}
				}
				
				//Filtro cliente
				var sortA:Sort = new Sort();
				sortA.fields=[new SortField(null,true,false,false)];
				listaNfSubstituida.sort=sortA;
				listaNfSubstituida.refresh();
				listaNfSubstituida.sort = null;
				listaNfSubstituida.addItemAt("Todos",0);
				
				cbNfSubstituida.enabled = true;
				cbNfSubstituida.dataProvider = listaNfSubstituida;
				
				if(listaNfSubstituida.length > 0){
					if(nfSubstituidaSelecionado){
						cbNfSubstituida.selectedItem = nfSubstituidaSelecionado;
					}
				}
				
				//Filtro cliente
				var sortA:Sort = new Sort();
				sortA.fields=[new SortField(null,true,false,false)];
				listaOsOriginal.sort=sortA;
				listaOsOriginal.refresh();
				listaOsOriginal.sort = null;
				listaOsOriginal.addItemAt("Todos",0);
				
				cbOsOriginal.enabled = true;
				cbOsOriginal.dataProvider = listaOsOriginal;
				
				if(listaOsOriginal.length > 0){
					if(osOriginalSelecionado){
						cbOsOriginal.selectedItem = osOriginalSelecionado;
					}
				}
				
				//Filtro cliente
				var sortA:Sort = new Sort();
				sortA.fields=[new SortField(null,true,false,false)];
				listaOsSubstituida.sort=sortA;
				listaOsSubstituida.refresh();
				listaOsSubstituida.sort = null;
				listaOsSubstituida.addItemAt("Todos",0);
				
				cbOsSubstituida.enabled = true;
				cbOsSubstituida.dataProvider = listaOsSubstituida;
				
				if(listaOsSubstituida.length > 0){
					if(osSubstituidaSelecionado){
						cbOsSubstituida.selectedItem = osSubstituidaSelecionado;
					}
				}
				
				//Filtro cliente
				var sortA:Sort = new Sort();
				sortA.fields=[new SortField(null,true,false,false)];
				listaUnidade.sort=sortA;
				listaUnidade.refresh();
				listaUnidade.sort = null;
				listaUnidade.addItemAt("Todos",0);
				
				cbUnidade.enabled = true;
				cbUnidade.dataProvider = listaUnidade;
				
				if(listaUnidade.length > 0){
					if(unidadeSelecionado){
						cbUnidade.selectedItem = unidadeSelecionado;
					}
				}
				
				//Filtro cliente
				var sortA:Sort = new Sort();
				sortA.fields=[new SortField(null,true,false,false)];
				listaUsuario.sort=sortA;
				listaUsuario.refresh();
				listaUsuario.sort = null;
				listaUsuario.addItemAt("Todos",0);
				
				cbUsuario.enabled = true;
				cbUsuario.dataProvider = listaUsuario;
				
				if(listaUsuario.length > 0){
					if(usuarioSelecionado){
						cbUsuario.selectedItem = usuarioSelecionado;
					}
				}
			}
			
		]]>
	</fx:Script>
	<mx:HBox width="100%" verticalAlign="bottom" horizontalAlign="left">
		<texto:TextInput id="nOrdemServico" labelText="Nº OS" width="10%"  />
		<mx:Button id="btSubstituir"
				   label="Substituir"
				   height="25"
				   icon="@Embed(source='/assets/icons/user.png')"
				   click="substituir(event)"/>
		<mx:Button id="btRepor"
				   label="Repor"
				   height="25"
				   icon="@Embed(source='/assets/icons/user.png')"
				   click="repor(event)"/>
		<mx:Button id="btEstocar"
				   label="Estocar"
				   height="25"
				   icon="@Embed(source='/assets/icons/user.png')"
				   click="estocar(event)"/>
		<mx:Button id="btRetirar"
				   label="Retirar"
				   height="25"
				   icon="@Embed(source='/assets/icons/user.png')"
				   click="retirar(event)"/>
		<mx:Button id="btSalvar"
				   label="Salvar posição"
				   height="25"
				   icon="@Embed(source='/assets/icons/user.png')"
				   click="salvar(event)"/>
	</mx:HBox>
	<mx:HBox width="100%" verticalAlign="bottom" horizontalAlign="left">
		<components:DropBoxInput id="cbNControle" labelText="Nº Controle" change="atualizaCombos" requireSelectionFlag="true"  />
		<components:DropBoxInput id="cbStatus" labelText="Status" change="atualizaCombos" requireSelectionFlag="true"  />
		<components:DropBoxInput id="cbUnidade" labelText="Unidade" change="atualizaCombos" requireSelectionFlag="true"  />
		<components:DropBoxInput id="cbOsOriginal" labelText="OS Orig." change="atualizaCombos" requireSelectionFlag="true"  />
		<components:DropBoxInput id="cbNFabricanteOriginal" labelText="N/S Fab. Orig." change="atualizaCombos" requireSelectionFlag="true"  />
		<components:DropBoxInput id="cbNClienteOriginal" labelText="N/S Cli. Orig." change="atualizaCombos" requireSelectionFlag="true"  />
		<components:DropBoxInput id="cbNfOriginal" labelText="NF Orig." change="atualizaCombos" requireSelectionFlag="true"  />
		<components:DropBoxInput id="cbOsSubstituida" labelText="OS Subst." change="atualizaCombos" requireSelectionFlag="true"  />
		<components:DropBoxInput id="cbNFabricanteSubstituida" labelText="N/S Fab. Subst." change="atualizaCombos" requireSelectionFlag="true"  />
		<components:DropBoxInput id="cbNClienteSubstituida" labelText="N/S Cli. Subst." change="atualizaCombos" requireSelectionFlag="true"  />
		<components:DropBoxInput id="cbNfSubstituida" labelText="NF Subst." change="atualizaCombos" requireSelectionFlag="true"  />
		<components:DropBoxInput id="cbUsuario" labelText="Usuário" change="atualizaCombos" requireSelectionFlag="true"  />
	</mx:HBox>
	<mx:VBox width="100%" height="100%" verticalGap="0">
		<grid:MantisTable id="requisicoesTable"
						  width="100%"
						  height="100%"
						  draggableColumns="false" editable="true"
						  dataProvider="{_listaItemEstoqueAvaya}"
						  doubleClickEnabled="false"
						  >
			<grid:columns>
				
				<mx:AdvancedDataGridColumn headerText = ""	width="40"						   
								   itemRenderer="components.grid.CheckBoxItemRenderer"
								   headerRenderer="components.grid.CheckBoxItemRenderer"
								   resizable="false" draggable="false" sortable="false"
								   dataField="isSelected" editable="false"
								   />

				<mx:AdvancedDataGridColumn id="cOSOriginal"  width="130"
								   headerText = "OS original"
								   textAlign="center"
								   sortable="false" editable="false"
								   dataField="numeroOsOriginal"							   
								   />
				
				<mx:AdvancedDataGridColumn id="cStatusEstoque" 
								   headerText = "Status estoque"
								   dataField = "statusString"
								   width="170" editable="false"
								   />
				
				<mx:AdvancedDataGridColumn id="cPosicao" editable="true"
								   headerText = "Posição"
								   dataField = "posicao"
								   width="170"
								   />
				
				<mx:AdvancedDataGridColumn id="cUnidade" 
								   headerText = "Unidade"
								   dataField="unidade"
								   width="170" editable="false"
								   />
				
				
				<mx:AdvancedDataGridColumn id="cNSOrigFabricante" width="70"
								   headerText = "N/S Fabr. Orig."
								   textAlign="center"
								   sortable="false" editable="false"
								   dataField="nsFabricanteOriginal"						   
								   />
				
				<mx:AdvancedDataGridColumn id="cNSOrigCliente"
								   headerText = "N/S Cliente Subst."
								   textAlign="center"
								   sortable="false" editable="false"
								   dataField="nsClienteOriginal"							   
								   />
				
				<mx:AdvancedDataGridColumn id="cNotaFiscalOrig"
								   headerText = "NF Orig."
								   textAlign="center"
								   sortable="false" editable="false"
								   dataField="nfOriginal"							   
								   />
				
				<mx:AdvancedDataGridColumn id="cOSSubstituida" width="70"
								   headerText = "OS substituição"
								   textAlign="center"
								   sortable="false" editable="false"
								   dataField="numeroOsSubstituida"							   
								   />
				
				<mx:AdvancedDataGridColumn id="cNSSubstFabricante" width="70"
								   headerText = "N/S Fabr. Subst."
								   textAlign="center"
								   sortable="false" editable="false"
								   dataField="nsFabricanteSubstituida"							   
								   />
				
				<mx:AdvancedDataGridColumn id="cNSSubstCliente"
								   headerText = "N/S Cliente Subst."
								   textAlign="center"
								   sortable="false" editable="false"
								   dataField="nsClienteSubstituida"							   
								   />
				
				<mx:AdvancedDataGridColumn id="cNotaFiscalSubst"
								   headerText = "NF Subst."
								   textAlign="center"
								   sortable="false" editable="false"
								   dataField="nfSubstituida"							   
								   />
				
				<mx:AdvancedDataGridColumn id="cDtOperacao" width="80"
								   headerText = "Data"
								   dataField = "dataOperacao" editable="false"
								   />
				
				<mx:AdvancedDataGridColumn id="cUsrOperacao" width="110" editable="false"
								   headerText = "Usuário"
								   dataField = "usuarioOperacao"
								   />
				
				
				
			</grid:columns>
		</grid:MantisTable>
		<mx:HBox paddingTop="10">
			<s:Label text="Total de unidades: {totalComponentes}" fontWeight="bold" fontSize="12"  />
		</mx:HBox>
	</mx:VBox>
	
	
	
	
</mx:VBox>
