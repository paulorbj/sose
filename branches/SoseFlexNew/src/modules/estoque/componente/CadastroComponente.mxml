<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:componente="modules.estoque.componente.*"
		 creationComplete="onCreationComplete()" 
		 width="100%" horizontalAlign="center" height="100%" 
		 paddingTop="10" paddingLeft="10" paddingRight="10" paddingBottom="10" >
	
	<fx:Declarations>
		<mx:RemoteObject id="componenteService" destination="componenteService" endpoint="{resourceManager.getString('ConfigurationResource','amf')}">			
			<mx:method name="listarComponentes"      
					   fault="onListarComponentesFault(event)" 
					   result="onListarComponentesResult(event)"
					   />
			<mx:method name="validarComponente"      
					   fault="onValidarComponenteFault(event)" 
					   result="onValidarComponenteResult(event)"
					   />
			<mx:method name="salvarComponente"      
					   fault="onSalvarComponenteFault(event)" 
					   result="onSalvarComponenteResult(event)"
					   />
			<mx:method name="excluirComponente"      
					   fault="onExcluirComponenteFault(event)" 
					   result="onExcluirComponenteResult(event)"
					   />
		</mx:RemoteObject>
		
		<mx:Producer id="produtorEstoqueService" destination="EstoqueMessageServicePush" /> 
		
		<mx:Consumer id="consumidorEstoqueService" destination="EstoqueMessageServicePush" message="onMsgEstoque(event)" />
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import components.PopupModalController;
			import components.events.UserRegisterNumberModalEvent;
			import components.messages.MensagemEvent;
			import components.messages.MessageType;
			
			import entities.GlobalMessage;
			import entities.administrativo.Componente;
			import entities.administrativo.Usuario;
			import entities.compra.PedidoCompra;
			
			import modules.administrativo.componente.eventos.ComponenteEvent;
			import modules.view.Login;
			
			import mx.collections.ArrayCollection;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.managers.CursorManager;
			import mx.managers.PopUpManager;
			import mx.messaging.events.MessageEvent;
			import mx.messaging.messages.AsyncMessage;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import utils.MensagensAplicacao;
			import utils.Publicador;
			
			[Bindable]			
			private var _componente:Componente;
			
			[Bindable]	
			private var _listaComponente:ArrayCollection = new ArrayCollection;
			
			private function onCreationComplete():void
			{
				componenteService.listarComponentes();	
				this.addEventListener(ComponenteEvent.EDITAR_COMPONENTE,onEditar);
				this.addEventListener(ComponenteEvent.EXCLUIR_COMPONENTE,onExcluir);
				consumidorEstoqueService.subscribe();
			}
			
			private function publicarComponente(orc:Componente, msg:String):void   { 								
				var message:AsyncMessage = new AsyncMessage();
				var messageGlobal:GlobalMessage=new GlobalMessage();
				messageGlobal.mensagem=msg;
				messageGlobal.conteudo = orc;				
				message.body=messageGlobal;
				produtorEstoqueService.send(message);	
			}
			
			private function onMsgEstoque(event:MessageEvent):void{ 
				var globalMessage:GlobalMessage = event.message.body as GlobalMessage;	
				
				if (globalMessage.mensagem==MensagensAplicacao.COMPONENTE_QUANTIDADE_ATUALIZAR){
					var comp:Componente = globalMessage.conteudo as Componente;
					atualizarComponente(comp);
				}
			} 
			
			private function atualizarComponente(componente:Componente):void
			{
				var componenteAux:Componente = null;
				for(var i:int=0; i<_listaComponente.length; i++){
					componenteAux = _listaComponente.getItemAt(i) as Componente; 
					if(componenteAux.id == componente.id){
						_listaComponente.removeItemAt(i);
						_listaComponente.addItemAt(componente,i);
					}
				}				
			}
			
			private function onEditar(event:ComponenteEvent):void
			{
				this.currentState = "edicao";
				_componente = event.componente;
				dados.componente = _componente;
			}
			
			public function setarComponente(comp:Componente):void
			{
				_componente = comp;
				dados.componente = comp;
				Publicador.enviarMensagemEstoque(MensagensAplicacao.ATUALIZAR_COMPONENTE_VALIDACAO_QTD_ESTOQUE, comp);

			}
			
			private function onExcluir(event:ComponenteEvent):void
			{
				_componente = event.componente;
				componenteService.excluirComponente(_componente);
			}
			
			private function onListarComponentesResult(event:ResultEvent = null):void
			{
				CursorManager.removeAllCursors(); 
				_listaComponente.removeAll();
				_listaComponente = event.result as ArrayCollection;
				listagem.setListaComponente(_listaComponente);
			}
			
			private function onListarComponentesFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[ListarComponentesFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");		
			}
			
			private function onSalvarComponenteResult(event:ResultEvent = null):void
			{
				CursorManager.removeAllCursors(); 
				_componente = event.result as Componente;
				publicarComponente(_componente,MensagensAplicacao.COMPONENTE_QUANTIDADE_ATUALIZAR);
				if(dados.componente.id == 0){
					//_listaComponente.addItem(_componente);
					dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','COMPONENTE_SALVAR_SUCESSO'), MessageType.SUCCESS, 10000));
				}else{
					//var index:int = _listaComponente.getItemIndex(dados.componente);
					//_listaComponente.removeItemAt(index);
					//_listaComponente.addItemAt(_componente, index);
					dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','COMPONENTE_EDITAR_SUCESSO'), MessageType.SUCCESS, 10000));
				}
				//listagem.setListaComponente(_listaComponente);
				componenteService.listarComponentes();
				dados.limpar();
			}
			
			private function onSalvarComponenteFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[SalvarAtividadeFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				var str:String = event.fault.faultString.substr(0,22);
				var i:Number;
				if(str == "br.com.sose.exceptions"){
					i = event.fault.faultString.indexOf(":");
					dispatchEvent(new MensagemEvent(event.fault.faultString.substring(i+1), MessageType.ERROR, 10000));
				}else{
					dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','COMPONENTE_SALVAR_ERRO'), MessageType.ERROR, 10000));	
				}			
			}
			
			private function onValidarComponenteResult(event:ResultEvent = null):void
			{
				CursorManager.removeAllCursors(); 
				_componente = event.result as Componente;
				dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','COMPONENTE_EDITAR_SUCESSO'), MessageType.SUCCESS, 10000));
				listagem.adicionarComponente(_componente);
			}
			
			private function onValidarComponenteFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[SalvarAtividadeFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','COMPONENTE_SALVAR_ERRO'), MessageType.ERROR, 10000));	
			}
			
			private function onExcluirComponenteResult(event:ResultEvent = null):void
			{
				CursorManager.removeAllCursors(); 
				var index:int = _listaComponente.getItemIndex(_componente);
				_listaComponente.removeItemAt(index);
				listagem.setListaComponente(_listaComponente);
				limpar();
				dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','COMPONENTE_REMOVER_SUCESSO'), MessageType.SUCCESS, 10000));
			}
			
			private function onExcluirComponenteFault(event:FaultEvent = null):void
			{
				CursorManager.removeAllCursors();
				trace("[ExcluirComponenteFault] [" +	event.fault.faultCode + "] " + event.fault.faultString + " (" +	event.fault.faultDetail + ")");
				var i:Number;
				if(event.fault.faultString.search("br.com.sose.exceptions") != -1){
					i = event.fault.faultString.indexOf(":");
					dispatchEvent(new MensagemEvent(event.fault.faultString.substring(i+1), MessageType.ERROR, 10000));
				}else{
					dispatchEvent(new MensagemEvent(resourceManager.getString('ApplicationResource','COMPONENTE_REMOVER_ERRO'), MessageType.ERROR, 10000));
				}
			}
			
			private function salvar(event:MouseEvent = null):void
			{
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					componenteService.salvarComponente(dados.componente);	
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(salvarAutenticar);
				}
			}
			
			public function salvarAutenticar(event:UserRegisterNumberModalEvent=null):void{
				salvar();
			}
			
			private function limpar(event:MouseEvent = null):void
			{
				_componente = new Componente();
				if(dados)
					dados.limpar();
			}
			
			private function novo(event:MouseEvent = null):void
			{
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					this.currentState = "insercao";
					limpar();	
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(novoAutenticar);
				}
						
			}
			
			public function novoAutenticar(event:UserRegisterNumberModalEvent=null):void{
				novo();
			}
			
			private function voltar(event:MouseEvent = null):void
			{
				this.currentState = "listagem";
				limpar();
			}
			
			private function requisitarCompra(event:MouseEvent = null):void
			{
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					var modal:ModalRequisitarQtdEstoque=ModalRequisitarQtdEstoque(PopUpManager.createPopUp( this, ModalRequisitarQtdEstoque , true));
					modal.myParentObject = this;
					modal.usuario = usr;
					modal.componente = dados.componente;
					modal.pedidoCompra = new PedidoCompra();
					modal.reposicao = true;
					PopUpManager.centerPopUp(modal);
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(requisitarCompraAutenticar);
				}	
			}
			
			public function requisitarCompraAutenticar(event:UserRegisterNumberModalEvent=null):void{
				requisitarCompra();
			}
			
			private function requisitarCompraEnter(event:KeyboardEvent):void
			{		
				if (event.charCode == 13) {
					requisitarCompra();
				}
			}
			
			private function realizarCompraAvulsa(event:MouseEvent = null):void
			{
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					var modal:ModalRequisitarQtdEstoque=ModalRequisitarQtdEstoque(PopUpManager.createPopUp( this, ModalRequisitarQtdEstoque , true));
					modal.myParentObject = this;
					modal.usuario = usr;
					modal.componente = dados.componente;
					modal.pedidoCompra = new PedidoCompra();
					modal.reposicao = false;
					PopUpManager.centerPopUp(modal);
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(realizarCompraAvulsaAutenticar);
				}	
			}
			
			public function realizarCompraAvulsaAutenticar(event:UserRegisterNumberModalEvent=null):void{
				realizarCompraAvulsa();
			}
			
			private function realizarCompraAvulsaEnter(event:KeyboardEvent):void
			{		
				if (event.charCode == 13) {
					realizarCompraAvulsa();
				}
			}
			
			private function validarComponente(event:MouseEvent = null):void
			{
				var usr:Usuario = Login.usuarioAutenticado;
				if(usr){
					componenteService.validarComponente(dados.componente);
				}else{
					PopupModalController.getInstance().showModalAutenticacaoUsuario(validarComponenteAutenticar);
				}		
			}
			
			public function validarComponenteAutenticar(event:UserRegisterNumberModalEvent=null):void{
				validarComponente();
			}
			
			private function validarComponenteEnter(event:KeyboardEvent):void
			{		
				if (event.charCode == 13) {
					validarComponente();
				}
			}
			
			private function validarQtdEstoque(event:MouseEvent = null):void
			{
				var modal:ModalValidarQuantidadeEstoque=ModalValidarQuantidadeEstoque(PopUpManager.createPopUp( this, ModalValidarQuantidadeEstoque , true));
				modal.myParentObject = this;
				modal.componente = _componente;
				PopUpManager.centerPopUp(modal);
			}
			
			private function validarQtdEstoqueEnter(event:KeyboardEvent):void
			{		
				if (event.charCode == 13) {
					validarQtdEstoque();
				}
			}
			
			private function salvarEnter(event:KeyboardEvent):void
			{		
				if (event.charCode == 13) {
					salvar();
				}
			}
			
			private function limparEnter(event:KeyboardEvent):void
			{		
				if (event.charCode == 13) {
					limpar();
				}
			}
			
			private function voltarEnter(event:KeyboardEvent):void
			{		
				if (event.charCode == 13) {
					voltar();
				}
			}
			
			
		]]>
	</fx:Script>
	
	<mx:states>
		<s:State name="listagem"/>
		<s:State name="edicao"/>
		<s:State name="insercao"/>
	</mx:states>
	
	<mx:VBox width="100%" horizontalAlign="center">
		<s:Label fontSize="15" fontWeight="bold" text="{resourceManager.getString('ApplicationResource','LISTA_COMPONENTE')}" includeIn="listagem"/>
		<s:Label fontSize="15" fontWeight="bold" text="{resourceManager.getString('ApplicationResource','DETALHAMENTO_COMPONENTE')}" excludeFrom="listagem"/>
	</mx:VBox>	
	
	<mx:VBox width="100%" horizontalAlign="left">
		<mx:Button id="newButton" includeIn="listagem"
				   label="{resourceManager.getString('ApplicationResource','NOVO')}"
				   height="25"
				   icon="@Embed(source='/assets/icons/new.png')"
				   click="novo(event)"
				   />
	</mx:VBox>
	
	<componente:ListagemComponenteCadastrado id="listagem" includeIn="listagem" width="100%" height="100%" />
	
	<componente:DadosComponente id="dados" excludeFrom="listagem" width="100%" />
	
	<mx:HBox width="100%" excludeFrom="listagem">
		<mx:Button id="saveButton" excludeFrom="listagem"
				   label="{resourceManager.getString('ApplicationResource','SALVAR')}"
				   height="25"
				   icon="@Embed(source='/assets/icons/save.png')"
				   keyDown="salvarEnter(event)"
				   click="salvar(event)"
				   />
		<mx:Button id="cleanButton" excludeFrom="listagem"
				   label="{resourceManager.getString('ApplicationResource','LIMPAR')}"
				   height="25"
				   icon="@Embed(source='/assets/icons/clean.png')"
				   keyDown="limparEnter(event)"
				   click="limpar(event)"
				   />
		<mx:Button id="validarButton" excludeFrom="listagem"
				   label="Validar cadastro componente"
				   height="25" enabled="{_componente.valido == false}"
				   icon="@Embed(source='/assets/icons/flag_green.png')"
				   keyDown="validarComponenteEnter(event)"
				   click="validarComponente(event)"
				   />
		<mx:Button id="validarQtdEstoqueButton" excludeFrom="listagem"
				   label="Validar qtd em estoque"
				   height="25" enabled="{_componente.qtdComprada != 0}"
				   icon="@Embed(source='/assets/icons/flag_green.png')"
				   keyDown="validarQtdEstoqueEnter(event)"
				   click="validarQtdEstoque(event)"
				   />
		<mx:Button id="requisitarButton" excludeFrom="listagem"
				   label="Repor estoque"
				   height="25"
				   icon="@Embed(source='/assets/icons/lightbulb_add.png')"
				   keyDown="requisitarCompraEnter(event)"
				   click="requisitarCompra(event)"
				   />
		<mx:Button id="compraAvulsaButton" excludeFrom="listagem"
				   label="Realizar compra avulsa"
				   height="25"
				   icon="@Embed(source='/assets/icons/lightbulb_add.png')"
				   keyDown="realizarCompraAvulsaEnter(event)"
				   click="realizarCompraAvulsa(event)"
				   />
		<mx:Button id="voltarButton" excludeFrom="listagem"
				   label="{resourceManager.getString('ApplicationResource','VOLTAR')}"
				   height="25"
				   icon="@Embed(source='/assets/icons/back.png')"
				   keyDown="voltarEnter(event)"
				   click="voltar(event)"
				   />
	</mx:HBox>
</mx:VBox>
